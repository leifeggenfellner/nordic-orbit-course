
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 18 00 20 f9 29 00 00 af 6e 00 00 cd 29 00 00     ... .)...n...)..
  10:	cd 29 00 00 cd 29 00 00 cd 29 00 00 00 00 00 00     .)...)...)......
	...
  2c:	fd 22 00 00 cd 29 00 00 00 00 00 00 a9 22 00 00     ."...)......."..
  3c:	cd 29 00 00                                         .)..

00000040 <_irq_vector_table>:
  40:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  50:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  60:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  70:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  80:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  90:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  a0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  b0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  c0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  d0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  e0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..
  f0:	ad 23 00 00 ad 23 00 00 ad 23 00 00 ad 23 00 00     .#...#...#...#..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <__data_size+0x15>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <button_handler.part.0>:
// 		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
// 	}
// }

/* CALLBACKS */
void button_handler(uint32_t button_state, uint32_t change_detected)
     3dc:	b580      	push	{r7, lr}
{
	uint8_t button_pressed = 0;
	if (change_detected & button_state)
	{
		switch (change_detected)
     3de:	3801      	subs	r0, #1
void button_handler(uint32_t button_state, uint32_t change_detected)
     3e0:	af00      	add	r7, sp, #0
		switch (change_detected)
     3e2:	2807      	cmp	r0, #7
     3e4:	d850      	bhi.n	488 <CONFIG_FLASH_SIZE+0x88>
     3e6:	e8df f000 	tbb	[pc, r0]
     3ea:	2204      	.short	0x2204
     3ec:	4f4f314f 	.word	0x4f4f314f
     3f0:	404f      	.short	0x404f
		{
		case DK_BTN1_MSK:
			button_pressed = 1;
			dk_set_led(DK_LED1, 1);
     3f2:	2101      	movs	r1, #1
     3f4:	2000      	movs	r0, #0
     3f6:	f003 fde9 	bl	3fcc <dk_set_led>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3fa:	2100      	movs	r1, #0
     3fc:	f640 40cd 	movw	r0, #3277	; 0xccd
     400:	f005 fc8c 	bl	5d1c <z_impl_k_sleep>
			k_sleep(K_MSEC(100));
			dk_set_led(DK_LED1, 0);
     404:	2100      	movs	r1, #0
     406:	4608      	mov	r0, r1
     408:	f003 fde0 	bl	3fcc <dk_set_led>
			button_pressed = 1;
     40c:	2301      	movs	r3, #1
			dk_set_led(DK_LED4, 0);
			break;
		default:
			break;
		}
		LOG_INF("Button %d pressed", button_pressed);
     40e:	b088      	sub	sp, #32
     410:	466a      	mov	r2, sp
     412:	491e      	ldr	r1, [pc, #120]	; (48c <CONFIG_FLASH_SIZE+0x8c>)
     414:	e9c2 1305 	strd	r1, r3, [r2, #20]
     418:	2303      	movs	r3, #3
     41a:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     41e:	481c      	ldr	r0, [pc, #112]	; (490 <CONFIG_FLASH_SIZE+0x90>)
     420:	2300      	movs	r3, #0
     422:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     426:	f001 f9cd 	bl	17c4 <z_impl_z_log_msg_static_create>
	}
}
     42a:	46bd      	mov	sp, r7
     42c:	bd80      	pop	{r7, pc}
			dk_set_led(DK_LED2, 1);
     42e:	2101      	movs	r1, #1
     430:	4608      	mov	r0, r1
     432:	f003 fdcb 	bl	3fcc <dk_set_led>
     436:	2100      	movs	r1, #0
     438:	f640 40cd 	movw	r0, #3277	; 0xccd
     43c:	f005 fc6e 	bl	5d1c <z_impl_k_sleep>
			dk_set_led(DK_LED2, 0);
     440:	2100      	movs	r1, #0
     442:	2001      	movs	r0, #1
     444:	f003 fdc2 	bl	3fcc <dk_set_led>
			button_pressed = 2;
     448:	2302      	movs	r3, #2
			break;
     44a:	e7e0      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
			dk_set_led(DK_LED3, 1);
     44c:	2101      	movs	r1, #1
     44e:	2002      	movs	r0, #2
     450:	f003 fdbc 	bl	3fcc <dk_set_led>
     454:	2100      	movs	r1, #0
     456:	f640 40cd 	movw	r0, #3277	; 0xccd
     45a:	f005 fc5f 	bl	5d1c <z_impl_k_sleep>
			dk_set_led(DK_LED3, 0);
     45e:	2100      	movs	r1, #0
     460:	2002      	movs	r0, #2
     462:	f003 fdb3 	bl	3fcc <dk_set_led>
			button_pressed = 3;
     466:	2303      	movs	r3, #3
			break;
     468:	e7d1      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
			dk_set_led(DK_LED4, 1);
     46a:	2101      	movs	r1, #1
     46c:	2003      	movs	r0, #3
     46e:	f003 fdad 	bl	3fcc <dk_set_led>
     472:	2100      	movs	r1, #0
     474:	f640 40cd 	movw	r0, #3277	; 0xccd
     478:	f005 fc50 	bl	5d1c <z_impl_k_sleep>
			dk_set_led(DK_LED4, 0);
     47c:	2100      	movs	r1, #0
     47e:	2003      	movs	r0, #3
     480:	f003 fda4 	bl	3fcc <dk_set_led>
			button_pressed = 4;
     484:	2304      	movs	r3, #4
			break;
     486:	e7c2      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
		switch (change_detected)
     488:	2300      	movs	r3, #0
     48a:	e7c0      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
     48c:	00007fe8 	.word	0x00007fe8
     490:	00007cac 	.word	0x00007cac

00000494 <main>:
		LOG_ERR("Couldn't init MPU (err %d)", err);
	}
}

void main(void)
{
     494:	b598      	push	{r3, r4, r7, lr}
     496:	af00      	add	r7, sp, #0
	LOG_INF("Hello World! %s\n", CONFIG_BOARD);
     498:	466c      	mov	r4, sp
     49a:	b088      	sub	sp, #32
     49c:	466a      	mov	r2, sp
     49e:	4b25      	ldr	r3, [pc, #148]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4a0:	6153      	str	r3, [r2, #20]
     4a2:	4b25      	ldr	r3, [pc, #148]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     4a4:	6193      	str	r3, [r2, #24]
     4a6:	2302      	movs	r3, #2
     4a8:	7713      	strb	r3, [r2, #28]
     4aa:	4b24      	ldr	r3, [pc, #144]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     4ac:	f842 3f10 	str.w	r3, [r2, #16]!
     4b0:	4823      	ldr	r0, [pc, #140]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4b2:	2300      	movs	r3, #0
     4b4:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
     4b8:	f001 f984 	bl	17c4 <z_impl_z_log_msg_static_create>
     4bc:	46a5      	mov	sp, r4
	err = dk_leds_init();
     4be:	f003 fcb1 	bl	3e24 <dk_leds_init>
	if (err)
     4c2:	b170      	cbz	r0, 4e2 <main+0x4e>
		LOG_ERR("Couldn't init LEDS (err %d)", err);
     4c4:	b088      	sub	sp, #32
     4c6:	466a      	mov	r2, sp
     4c8:	4b1e      	ldr	r3, [pc, #120]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)
     4ca:	e9c2 3005 	strd	r3, r0, [r2, #20]
     4ce:	2303      	movs	r3, #3
     4d0:	f842 3f10 	str.w	r3, [r2, #16]!
     4d4:	481a      	ldr	r0, [pc, #104]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4d6:	2300      	movs	r3, #0
     4d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     4dc:	f001 f972 	bl	17c4 <z_impl_z_log_msg_static_create>
     4e0:	46a5      	mov	sp, r4
	err = dk_buttons_init(button_handler);
     4e2:	4819      	ldr	r0, [pc, #100]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4e4:	f003 fcdc 	bl	3ea0 <dk_buttons_init>
	if (err)
     4e8:	b178      	cbz	r0, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		LOG_ERR("Couldn't init buttons (err %d)", err);
     4ea:	466c      	mov	r4, sp
     4ec:	b088      	sub	sp, #32
     4ee:	466a      	mov	r2, sp
     4f0:	4b16      	ldr	r3, [pc, #88]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     4f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
     4f6:	2303      	movs	r3, #3
     4f8:	f842 3f10 	str.w	r3, [r2, #16]!
     4fc:	4810      	ldr	r0, [pc, #64]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     4fe:	2300      	movs	r3, #0
     500:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     504:	f001 f95e 	bl	17c4 <z_impl_z_log_msg_static_create>
     508:	46a5      	mov	sp, r4
	err = mpu_sensor_init();
     50a:	f000 f877 	bl	5fc <mpu_sensor_init>
	if (err)
     50e:	b178      	cbz	r0, 530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
		LOG_ERR("Couldn't init MPU (err %d)", err);
     510:	466c      	mov	r4, sp
     512:	b088      	sub	sp, #32
     514:	466a      	mov	r2, sp
     516:	4b0e      	ldr	r3, [pc, #56]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     518:	e9c2 3005 	strd	r3, r0, [r2, #20]
     51c:	2303      	movs	r3, #3
     51e:	f842 3f10 	str.w	r3, [r2, #16]!
     522:	4807      	ldr	r0, [pc, #28]	; (540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>)
     524:	2300      	movs	r3, #0
     526:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     52a:	f001 f94b 	bl	17c4 <z_impl_z_log_msg_static_create>
     52e:	46a5      	mov	sp, r4
	configure_dk_button_leds();

	// uint8_t blink_state = 0;

	// blink_run_led(&blink_state);
     530:	46bd      	mov	sp, r7
     532:	bd98      	pop	{r3, r4, r7, pc}
     534:	00007ffa 	.word	0x00007ffa
     538:	0000800b 	.word	0x0000800b
     53c:	01000003 	.word	0x01000003
     540:	00007cac 	.word	0x00007cac
     544:	0000801f 	.word	0x0000801f
     548:	00006655 	.word	0x00006655
     54c:	0000803b 	.word	0x0000803b
     550:	0000805a 	.word	0x0000805a

00000554 <my_twim_handler>:
const nrfx_twim_t m_twim_instance = NRFX_TWIM_INSTANCE(0);

LOG_MODULE_REGISTER(LOG_MODULE_NAME_MPU);

void my_twim_handler(nrfx_twim_evt_t const *p_event, void *p_context)
{
     554:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("TWIM callback");
     556:	4b07      	ldr	r3, [pc, #28]	; (574 <my_twim_handler+0x20>)
     558:	9305      	str	r3, [sp, #20]
     55a:	2302      	movs	r3, #2
     55c:	9304      	str	r3, [sp, #16]
     55e:	4806      	ldr	r0, [pc, #24]	; (578 <my_twim_handler+0x24>)
     560:	2300      	movs	r3, #0
     562:	aa04      	add	r2, sp, #16
     564:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     568:	f001 f92c 	bl	17c4 <z_impl_z_log_msg_static_create>
}
     56c:	b007      	add	sp, #28
     56e:	f85d fb04 	ldr.w	pc, [sp], #4
     572:	bf00      	nop
     574:	00008079 	.word	0x00008079
     578:	00007ce4 	.word	0x00007ce4

0000057c <twi_init>:

uint8_t twi_init(void)
{
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	b085      	sub	sp, #20
    // Setup peripheral interrupt.
    IRQ_CONNECT(DT_IRQN(DT_NODELABEL(i2c0)), DT_IRQ(DT_NODELABEL(i2c0), priority), nrfx_isr, nrfx_twim_0_irq_handler, 0);
     580:	2200      	movs	r2, #0
     582:	2101      	movs	r1, #1
     584:	2003      	movs	r0, #3
{
     586:	af00      	add	r7, sp, #0
    IRQ_CONNECT(DT_IRQN(DT_NODELABEL(i2c0)), DT_IRQ(DT_NODELABEL(i2c0), priority), nrfx_isr, nrfx_twim_0_irq_handler, 0);
     588:	f001 fe3c 	bl	2204 <z_arm_irq_priority_set>
    irq_enable(DT_IRQN(DT_NODELABEL(i2c0)));
     58c:	2003      	movs	r0, #3
     58e:	f001 fe1b 	bl	21c8 <arch_irq_enable>

    int err = 0;

    const nrfx_twim_config_t twim_config = {
     592:	2503      	movs	r5, #3
     594:	2304      	movs	r3, #4
     596:	e9c7 3500 	strd	r3, r5, [r7]
     59a:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
     59e:	2307      	movs	r3, #7
     5a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
        .frequency = NRF_TWIM_FREQ_400K,
        .interrupt_priority = NRFX_TWIM_DEFAULT_CONFIG_IRQ_PRIORITY,
        .hold_bus_uninit = false,
    };

    err = nrfx_twim_init(&m_twim_instance, &twim_config, my_twim_handler, NULL);
     5a4:	4810      	ldr	r0, [pc, #64]	; (5e8 <twi_init+0x6c>)
     5a6:	4a11      	ldr	r2, [pc, #68]	; (5ec <twi_init+0x70>)
     5a8:	2300      	movs	r3, #0
     5aa:	4639      	mov	r1, r7
     5ac:	f004 faa0 	bl	4af0 <nrfx_twim_init>

    if (err != NRFX_SUCCESS)
     5b0:	4b0f      	ldr	r3, [pc, #60]	; (5f0 <twi_init+0x74>)
     5b2:	4298      	cmp	r0, r3
    err = nrfx_twim_init(&m_twim_instance, &twim_config, my_twim_handler, NULL);
     5b4:	4604      	mov	r4, r0
    if (err != NRFX_SUCCESS)
     5b6:	d012      	beq.n	5de <twi_init+0x62>
    {
        LOG_ERR("twim_init failed. (err %x)", err);
     5b8:	466e      	mov	r6, sp
     5ba:	b088      	sub	sp, #32
     5bc:	466a      	mov	r2, sp
     5be:	4b0d      	ldr	r3, [pc, #52]	; (5f4 <twi_init+0x78>)
     5c0:	e9c2 3005 	strd	r3, r0, [r2, #20]
     5c4:	f842 5f10 	str.w	r5, [r2, #16]!
     5c8:	480b      	ldr	r0, [pc, #44]	; (5f8 <twi_init+0x7c>)
     5ca:	2300      	movs	r3, #0
     5cc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     5d0:	f001 f8f8 	bl	17c4 <z_impl_z_log_msg_static_create>
        return err;
     5d4:	b2e0      	uxtb	r0, r4
     5d6:	46b5      	mov	sp, r6
    }

    nrfx_twim_enable(&m_twim_instance);

    return 0;
}
     5d8:	3714      	adds	r7, #20
     5da:	46bd      	mov	sp, r7
     5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nrfx_twim_enable(&m_twim_instance);
     5de:	4802      	ldr	r0, [pc, #8]	; (5e8 <twi_init+0x6c>)
     5e0:	f004 fae8 	bl	4bb4 <nrfx_twim_enable>
    return 0;
     5e4:	2000      	movs	r0, #0
     5e6:	e7f7      	b.n	5d8 <twi_init+0x5c>
     5e8:	00007d28 	.word	0x00007d28
     5ec:	00000555 	.word	0x00000555
     5f0:	0bad0000 	.word	0x0bad0000
     5f4:	00008087 	.word	0x00008087
     5f8:	00007ce4 	.word	0x00007ce4

000005fc <mpu_sensor_init>:

uint8_t mpu_sensor_init(void)
{
     5fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    int err;

    LOG_INF("Initializing MPU Sensor");
     5fe:	4b08      	ldr	r3, [pc, #32]	; (620 <mpu_sensor_init+0x24>)
     600:	9305      	str	r3, [sp, #20]
     602:	2302      	movs	r3, #2
     604:	9304      	str	r3, [sp, #16]
     606:	4807      	ldr	r0, [pc, #28]	; (624 <mpu_sensor_init+0x28>)
     608:	2300      	movs	r3, #0
     60a:	aa04      	add	r2, sp, #16
     60c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     610:	f001 f8d8 	bl	17c4 <z_impl_z_log_msg_static_create>
    {
        return err;
    }

    return err;
     614:	b007      	add	sp, #28
     616:	f85d eb04 	ldr.w	lr, [sp], #4
    err = twi_init();
     61a:	f7ff bfaf 	b.w	57c <twi_init>
     61e:	bf00      	nop
     620:	000080a2 	.word	0x000080a2
     624:	00007ce4 	.word	0x00007ce4

00000628 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     62c:	b093      	sub	sp, #76	; 0x4c
     62e:	4604      	mov	r4, r0
     630:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
     634:	9201      	str	r2, [sp, #4]
     636:	461f      	mov	r7, r3
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     638:	468b      	mov	fp, r1
     63a:	b949      	cbnz	r1, 650 <cbprintf_package_convert+0x28>
	buf += ros_nbr;
     63c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     63e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     640:	7880      	ldrb	r0, [r0, #2]
     642:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     646:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
     648:	45b3      	cmp	fp, r6
     64a:	d318      	bcc.n	67e <cbprintf_package_convert+0x56>
	return (size_t)(uintptr_t)(buf - start);
     64c:	eba0 0b04 	sub.w	fp, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     650:	78a5      	ldrb	r5, [r4, #2]
     652:	9503      	str	r5, [sp, #12]
	ro_cpy = ros_nbr &&
     654:	b1e5      	cbz	r5, 690 <cbprintf_package_convert+0x68>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     656:	f00a 0301 	and.w	r3, sl, #1

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     65a:	78e2      	ldrb	r2, [r4, #3]
     65c:	9202      	str	r2, [sp, #8]
	rw_cpy = rws_nbr > 0 &&
     65e:	b112      	cbz	r2, 666 <cbprintf_package_convert+0x3e>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     660:	f01a 0f02 	tst.w	sl, #2
     664:	d116      	bne.n	694 <cbprintf_package_convert+0x6c>
     666:	b9ab      	cbnz	r3, 694 <cbprintf_package_convert+0x6c>
		if (cb) {
     668:	9b01      	ldr	r3, [sp, #4]
     66a:	b11b      	cbz	r3, 674 <cbprintf_package_convert+0x4c>
			cb(in_packaged, in_len, ctx);
     66c:	463a      	mov	r2, r7
     66e:	4659      	mov	r1, fp
     670:	4620      	mov	r0, r4
     672:	4798      	blx	r3
		}

		return in_len;
     674:	465e      	mov	r6, fp

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     676:	4630      	mov	r0, r6
     678:	b013      	add	sp, #76	; 0x4c
     67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     67e:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     680:	4628      	mov	r0, r5
     682:	f006 fc1e 	bl	6ec2 <strlen>
     686:	3001      	adds	r0, #1
     688:	4428      	add	r0, r5
	for (int i = 0; i < s_nbr; i++) {
     68a:	f10b 0b01 	add.w	fp, fp, #1
     68e:	e7db      	b.n	648 <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
     690:	462b      	mov	r3, r5
     692:	e7e2      	b.n	65a <cbprintf_package_convert+0x32>
	args_size = in_desc->len * sizeof(int);
     694:	f894 9000 	ldrb.w	r9, [r4]
     698:	ea4f 0289 	mov.w	r2, r9, lsl #2
     69c:	9204      	str	r2, [sp, #16]
	if (cb == NULL) {
     69e:	9a01      	ldr	r2, [sp, #4]
	uint8_t *str_pos = &buf[args_size];
     6a0:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	if (cb == NULL) {
     6a4:	2a00      	cmp	r2, #0
     6a6:	d15a      	bne.n	75e <cbprintf_package_convert+0x136>
		out_len = (int)in_len;
     6a8:	465e      	mov	r6, fp
		if (ro_cpy) {
     6aa:	b393      	cbz	r3, 712 <cbprintf_package_convert+0xea>
     6ac:	444d      	add	r5, r9
	size_t strl_cnt = 0;
     6ae:	4617      	mov	r7, r2
			for (int i = 0; i < ros_nbr; i++) {
     6b0:	45a9      	cmp	r9, r5
     6b2:	d11c      	bne.n	6ee <cbprintf_package_convert+0xc6>
		bool drop_ro_str_pos = !(flags &
     6b4:	f8dd 8008 	ldr.w	r8, [sp, #8]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     6b8:	f8df c234 	ldr.w	ip, [pc, #564]	; 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     6bc:	498d      	ldr	r1, [pc, #564]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
		bool drop_ro_str_pos = !(flags &
     6be:	f00a 0b05 	and.w	fp, sl, #5
		for (int i = 0; i < rws_nbr; i++) {
     6c2:	464d      	mov	r5, r9
     6c4:	44c8      	add	r8, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     6c6:	f00a 0202 	and.w	r2, sl, #2
		for (int i = 0; i < rws_nbr; i++) {
     6ca:	45a8      	cmp	r8, r5
     6cc:	d0d3      	beq.n	676 <cbprintf_package_convert+0x4e>
			const char *str = *(const char **)&buf32[*str_pos];
     6ce:	f815 0b01 	ldrb.w	r0, [r5], #1
     6d2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
     6d6:	4560      	cmp	r0, ip
     6d8:	d324      	bcc.n	724 <cbprintf_package_convert+0xfc>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     6da:	4288      	cmp	r0, r1
     6dc:	d222      	bcs.n	724 <cbprintf_package_convert+0xfc>
     6de:	f01a 0f01 	tst.w	sl, #1
     6e2:	d139      	bne.n	758 <cbprintf_package_convert+0x130>
			if (is_ro && drop_ro_str_pos) {
     6e4:	f1bb 0f00 	cmp.w	fp, #0
     6e8:	d1ef      	bne.n	6ca <cbprintf_package_convert+0xa2>
				out_len--;
     6ea:	3e01      	subs	r6, #1
		for (int i = 0; i < rws_nbr; i++) {
     6ec:	e7ed      	b.n	6ca <cbprintf_package_convert+0xa2>
				const char *str = *(const char **)&buf32[*str_pos];
     6ee:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     6f2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
     6f6:	f006 fbe4 	bl	6ec2 <strlen>
				if (strl && strl_cnt < strl_len) {
     6fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
		return 1 + strlen(str);
     6fc:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     6fe:	b133      	cbz	r3, 70e <cbprintf_package_convert+0xe6>
     700:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     702:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
     704:	bf3e      	ittt	cc
     706:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
     708:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
     70c:	3701      	addcc	r7, #1
				out_len += len;
     70e:	4406      	add	r6, r0
			for (int i = 0; i < ros_nbr; i++) {
     710:	e7ce      	b.n	6b0 <cbprintf_package_convert+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     712:	b12d      	cbz	r5, 720 <cbprintf_package_convert+0xf8>
     714:	f01a 0704 	ands.w	r7, sl, #4
     718:	d0cc      	beq.n	6b4 <cbprintf_package_convert+0x8c>
				str_pos += ros_nbr;
     71a:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     71c:	461f      	mov	r7, r3
     71e:	e7c9      	b.n	6b4 <cbprintf_package_convert+0x8c>
     720:	462f      	mov	r7, r5
     722:	e7c7      	b.n	6b4 <cbprintf_package_convert+0x8c>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     724:	2a00      	cmp	r2, #0
     726:	d0d0      	beq.n	6ca <cbprintf_package_convert+0xa2>
     728:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     72c:	9201      	str	r2, [sp, #4]
     72e:	f006 fbc8 	bl	6ec2 <strlen>
				if (strl && strl_cnt < strl_len) {
     732:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     734:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
     738:	9a01      	ldr	r2, [sp, #4]
     73a:	496e      	ldr	r1, [pc, #440]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
		return 1 + strlen(str);
     73c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     73e:	b133      	cbz	r3, 74e <cbprintf_package_convert+0x126>
     740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     742:	429f      	cmp	r7, r3
					strl[strl_cnt++] = (uint16_t)len;
     744:	bf3e      	ittt	cc
     746:	9b1d      	ldrcc	r3, [sp, #116]	; 0x74
     748:	f823 0017 	strhcc.w	r0, [r3, r7, lsl #1]
     74c:	3701      	addcc	r7, #1
				out_len += len;
     74e:	4406      	add	r6, r0
			if (is_ro && drop_ro_str_pos) {
     750:	f1b9 0f00 	cmp.w	r9, #0
     754:	d0b9      	beq.n	6ca <cbprintf_package_convert+0xa2>
     756:	e7c5      	b.n	6e4 <cbprintf_package_convert+0xbc>
     758:	f04f 0901 	mov.w	r9, #1
     75c:	e7e6      	b.n	72c <cbprintf_package_convert+0x104>
	if (ro_cpy) {
     75e:	2b00      	cmp	r3, #0
     760:	f040 80b9 	bne.w	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     764:	b125      	cbz	r5, 770 <cbprintf_package_convert+0x148>
     766:	f01a 0f04 	tst.w	sl, #4
     76a:	f040 80bc 	bne.w	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
		keep_cnt = 0;
     76e:	461d      	mov	r5, r3
     770:	46a8      	mov	r8, r5
	str_pos += ros_nbr;
     772:	9b03      	ldr	r3, [sp, #12]
     774:	4499      	add	r9, r3
	for (int i = 0; i < rws_nbr; i++) {
     776:	9b02      	ldr	r3, [sp, #8]
     778:	eb03 0c09 	add.w	ip, r3, r9
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     77c:	f00a 0304 	and.w	r3, sl, #4
     780:	464a      	mov	r2, r9
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     782:	f00a 0001 	and.w	r0, sl, #1
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     786:	f00a 0e02 	and.w	lr, sl, #2
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     78a:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < rws_nbr; i++) {
     78c:	4594      	cmp	ip, r2
     78e:	d14f      	bne.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     790:	9b02      	ldr	r3, [sp, #8]
     792:	444b      	add	r3, r9
     794:	9306      	str	r3, [sp, #24]
	out_desc.len = in_desc->len;
     796:	7823      	ldrb	r3, [r4, #0]
     798:	9305      	str	r3, [sp, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     79a:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     79c:	f01a 0f02 	tst.w	sl, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     7a0:	eb03 0205 	add.w	r2, r3, r5
     7a4:	b2d2      	uxtb	r2, r2
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RW_STR) ? 0 : keep_cnt;
     7a6:	bf0c      	ite	eq
     7a8:	46c4      	moveq	ip, r8
     7aa:	f04f 0c00 	movne.w	ip, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     7ae:	2800      	cmp	r0, #0
     7b0:	d160      	bne.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     7b2:	f01a 0f04 	tst.w	sl, #4
     7b6:	bf14      	ite	ne
     7b8:	4641      	movne	r1, r8
     7ba:	2100      	moveq	r1, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     7bc:	f894 a002 	ldrb.w	sl, [r4, #2]
     7c0:	78e6      	ldrb	r6, [r4, #3]
     7c2:	9307      	str	r3, [sp, #28]
	*in_desc = out_desc;
     7c4:	7062      	strb	r2, [r4, #1]
     7c6:	70a1      	strb	r1, [r4, #2]
	rv = cb(in_packaged, args_size, ctx);
     7c8:	9b01      	ldr	r3, [sp, #4]
     7ca:	9904      	ldr	r1, [sp, #16]
	*in_desc = out_desc;
     7cc:	f884 c003 	strb.w	ip, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     7d0:	463a      	mov	r2, r7
     7d2:	4620      	mov	r0, r4
     7d4:	4798      	blx	r3
	if (rv < 0) {
     7d6:	f1b0 0900 	subs.w	r9, r0, #0
     7da:	db78      	blt.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
	*in_desc = in_desc_backup;
     7dc:	9b05      	ldr	r3, [sp, #20]
     7de:	7023      	strb	r3, [r4, #0]
     7e0:	9b07      	ldr	r3, [sp, #28]
     7e2:	7063      	strb	r3, [r4, #1]
     7e4:	70e6      	strb	r6, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     7e6:	9b01      	ldr	r3, [sp, #4]
	*in_desc = in_desc_backup;
     7e8:	f884 a002 	strb.w	sl, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     7ec:	463a      	mov	r2, r7
     7ee:	4641      	mov	r1, r8
     7f0:	a80e      	add	r0, sp, #56	; 0x38
     7f2:	4798      	blx	r3
	if (rv < 0) {
     7f4:	1e06      	subs	r6, r0, #0
     7f6:	f6ff af3e 	blt.w	676 <cbprintf_package_convert+0x4e>
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     7fa:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
     7fe:	4419      	add	r1, r3
     800:	9b04      	ldr	r3, [sp, #16]
	rv = cb(str_pos, strs_len, ctx);
     802:	9806      	ldr	r0, [sp, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     804:	4419      	add	r1, r3
	rv = cb(str_pos, strs_len, ctx);
     806:	463a      	mov	r2, r7
     808:	9b01      	ldr	r3, [sp, #4]
     80a:	ebab 0101 	sub.w	r1, fp, r1
     80e:	4798      	blx	r3
	if (rv < 0) {
     810:	2800      	cmp	r0, #0
     812:	db5e      	blt.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
	out_len += rv;
     814:	444e      	add	r6, r9
	out_len += rv;
     816:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
     818:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     81c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
	for (int i = 0; i < scpy_cnt; i++) {
     820:	454d      	cmp	r5, r9
     822:	dc29      	bgt.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
	(void)cb(NULL, 0, ctx);
     824:	2100      	movs	r1, #0
     826:	9b01      	ldr	r3, [sp, #4]
     828:	463a      	mov	r2, r7
     82a:	4608      	mov	r0, r1
     82c:	4798      	blx	r3
	return out_len;
     82e:	e722      	b.n	676 <cbprintf_package_convert+0x4e>
		const char *str = *(const char **)&buf32[*str_pos];
     830:	f812 3b01 	ldrb.w	r3, [r2], #1
     834:	4e2e      	ldr	r6, [pc, #184]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     836:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     83a:	42b1      	cmp	r1, r6
     83c:	d302      	bcc.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
     83e:	4e2d      	ldr	r6, [pc, #180]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     840:	42b1      	cmp	r1, r6
     842:	d30b      	bcc.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     844:	f1be 0f00 	cmp.w	lr, #0
     848:	d109      	bne.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
				keep_str_pos[keep_cnt++] = *str_pos;
     84a:	ae12      	add	r6, sp, #72	; 0x48
     84c:	f108 0101 	add.w	r1, r8, #1
     850:	44b0      	add	r8, r6
     852:	f808 3c10 	strb.w	r3, [r8, #-16]
     856:	fa5f f881 	uxtb.w	r8, r1
	for (int i = 0; i < rws_nbr; i++) {
     85a:	e797      	b.n	78c <cbprintf_package_convert+0x164>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     85c:	b130      	cbz	r0, 86c <CONFIG_ISR_STACK_SIZE+0x6c>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     85e:	ae12      	add	r6, sp, #72	; 0x48
     860:	1c69      	adds	r1, r5, #1
     862:	4435      	add	r5, r6
     864:	f805 3c20 	strb.w	r3, [r5, #-32]
     868:	b2cd      	uxtb	r5, r1
     86a:	e78f      	b.n	78c <cbprintf_package_convert+0x164>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     86c:	9905      	ldr	r1, [sp, #20]
     86e:	2900      	cmp	r1, #0
     870:	d08c      	beq.n	78c <cbprintf_package_convert+0x164>
     872:	e7ea      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_COPY_RO_STR) ? 0 :
     874:	2100      	movs	r1, #0
     876:	e7a1      	b.n	7bc <cbprintf_package_convert+0x194>
		uint8_t loc = cpy_str_pos[i];
     878:	f819 300b 	ldrb.w	r3, [r9, fp]
     87c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		const char *str = *(const char **)&buf32[loc];
     880:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
     886:	b1fb      	cbz	r3, 8c8 <CONFIG_ISR_STACK_SIZE+0xc8>
     888:	f833 8019 	ldrh.w	r8, [r3, r9, lsl #1]
		rv = cb(&loc, 1, ctx);
     88c:	9b01      	ldr	r3, [sp, #4]
     88e:	463a      	mov	r2, r7
     890:	2101      	movs	r1, #1
     892:	f10d 0027 	add.w	r0, sp, #39	; 0x27
     896:	4798      	blx	r3
		if (rv < 0) {
     898:	2800      	cmp	r0, #0
     89a:	db1a      	blt.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
		out_len += rv;
     89c:	4406      	add	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     89e:	f1b8 0f00 	cmp.w	r8, #0
     8a2:	d106      	bne.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     8a4:	4650      	mov	r0, sl
     8a6:	f006 fb0c 	bl	6ec2 <strlen>
     8aa:	f100 0801 	add.w	r8, r0, #1
     8ae:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     8b2:	9b01      	ldr	r3, [sp, #4]
     8b4:	463a      	mov	r2, r7
     8b6:	4641      	mov	r1, r8
     8b8:	4650      	mov	r0, sl
     8ba:	4798      	blx	r3
		if (rv < 0) {
     8bc:	2800      	cmp	r0, #0
     8be:	db08      	blt.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
		out_len += rv;
     8c0:	4406      	add	r6, r0
	for (int i = 0; i < scpy_cnt; i++) {
     8c2:	f109 0901 	add.w	r9, r9, #1
     8c6:	e7ab      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
		uint16_t str_len = strl ? strl[i] : 0;
     8c8:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
     8cc:	e7de      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
     8ce:	464e      	mov	r6, r9
     8d0:	e6d1      	b.n	676 <cbprintf_package_convert+0x4e>
     8d2:	4606      	mov	r6, r0
     8d4:	e6cf      	b.n	676 <cbprintf_package_convert+0x4e>
		dst = cpy_str_pos;
     8d6:	a80a      	add	r0, sp, #40	; 0x28
		keep_cnt = 0;
     8d8:	f04f 0800 	mov.w	r8, #0
		memcpy(dst, str_pos, ros_nbr);
     8dc:	9a03      	ldr	r2, [sp, #12]
     8de:	4649      	mov	r1, r9
     8e0:	f006 faff 	bl	6ee2 <memcpy>
     8e4:	e745      	b.n	772 <cbprintf_package_convert+0x14a>
     8e6:	46a8      	mov	r8, r5
		dst = keep_str_pos;
     8e8:	a80e      	add	r0, sp, #56	; 0x38
		scpy_cnt = 0;
     8ea:	461d      	mov	r5, r3
     8ec:	e7f6      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8ee:	bf00      	nop
     8f0:	00007a2c 	.word	0x00007a2c
     8f4:	000088fc 	.word	0x000088fc

000008f8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     8f8:	4b01      	ldr	r3, [pc, #4]	; (900 <char_out+0x8>)
     8fa:	681b      	ldr	r3, [r3, #0]
     8fc:	4718      	bx	r3
     8fe:	bf00      	nop
     900:	20000000 	.word	0x20000000

00000904 <__printk_hook_install>:
	_char_out = fn;
     904:	4b01      	ldr	r3, [pc, #4]	; (90c <__printk_hook_install+0x8>)
     906:	6018      	str	r0, [r3, #0]
}
     908:	4770      	bx	lr
     90a:	bf00      	nop
     90c:	20000000 	.word	0x20000000

00000910 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     910:	b507      	push	{r0, r1, r2, lr}
     912:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     914:	2100      	movs	r1, #0
     916:	4602      	mov	r2, r0
     918:	9100      	str	r1, [sp, #0]
     91a:	4803      	ldr	r0, [pc, #12]	; (928 <vprintk+0x18>)
     91c:	f000 f8fc 	bl	b18 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     920:	b003      	add	sp, #12
     922:	f85d fb04 	ldr.w	pc, [sp], #4
     926:	bf00      	nop
     928:	000008f9 	.word	0x000008f9

0000092c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     92c:	b530      	push	{r4, r5, lr}
     92e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     930:	2500      	movs	r5, #0
     932:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     936:	4604      	mov	r4, r0
     938:	9500      	str	r5, [sp, #0]
     93a:	a903      	add	r1, sp, #12
     93c:	4805      	ldr	r0, [pc, #20]	; (954 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     93e:	9505      	str	r5, [sp, #20]
     940:	f000 f8ea 	bl	b18 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     944:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     948:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     94a:	bfb8      	it	lt
     94c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     94e:	b007      	add	sp, #28
     950:	bd30      	pop	{r4, r5, pc}
     952:	bf00      	nop
     954:	000066fb 	.word	0x000066fb

00000958 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     95c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     960:	f019 0808 	ands.w	r8, r9, #8
{
     964:	4604      	mov	r4, r0
     966:	4693      	mov	fp, r2
	if (processing) {
     968:	d00d      	beq.n	986 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     96a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     96c:	bf0c      	ite	eq
     96e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     972:	f049 0920 	orrne.w	r9, r9, #32
     976:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     97a:	f38b 8811 	msr	BASEPRI, fp
     97e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     986:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     98a:	2902      	cmp	r1, #2
     98c:	d107      	bne.n	99e <process_event+0x46>
			evt = process_recheck(mgr);
     98e:	4620      	mov	r0, r4
     990:	f005 fee0 	bl	6754 <process_recheck>
		if (evt == EVT_NOP) {
     994:	2800      	cmp	r0, #0
     996:	d0f0      	beq.n	97a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     998:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     99a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     99c:	d14e      	bne.n	a3c <process_event+0xe4>
			res = mgr->last_res;
     99e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9a0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     9a2:	2f00      	cmp	r7, #0
     9a4:	da15      	bge.n	9d2 <process_event+0x7a>
		*clients = mgr->clients;
     9a6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9a8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     9ac:	e9c4 8800 	strd	r8, r8, [r4]
     9b0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     9b4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     9b6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     9b8:	8b21      	ldrh	r1, [r4, #24]
     9ba:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     9be:	45ca      	cmp	sl, r9
     9c0:	d002      	beq.n	9c8 <process_event+0x70>
		if (do_monitors
     9c2:	68a3      	ldr	r3, [r4, #8]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d15a      	bne.n	a7e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     9c8:	b90d      	cbnz	r5, 9ce <process_event+0x76>
		    || (transit != NULL)) {
     9ca:	2e00      	cmp	r6, #0
     9cc:	d071      	beq.n	ab2 <process_event+0x15a>
     9ce:	2300      	movs	r3, #0
     9d0:	e056      	b.n	a80 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9d2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     9d6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     9d8:	2a01      	cmp	r2, #1
     9da:	d81e      	bhi.n	a1a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9dc:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     9e0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     9e2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9e4:	b289      	uxth	r1, r1
     9e6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     9ea:	d10a      	bne.n	a02 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     9ec:	b13d      	cbz	r5, 9fe <process_event+0xa6>
     9ee:	8b63      	ldrh	r3, [r4, #26]
     9f0:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     9f2:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     9f4:	3301      	adds	r3, #1
     9f6:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     9f8:	2a00      	cmp	r2, #0
     9fa:	d1fa      	bne.n	9f2 <process_event+0x9a>
     9fc:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9fe:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     a02:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     a04:	4620      	mov	r0, r4
     a06:	f005 fea5 	bl	6754 <process_recheck>
     a0a:	4606      	mov	r6, r0
     a0c:	2800      	cmp	r0, #0
     a0e:	d0d3      	beq.n	9b8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a10:	8b23      	ldrh	r3, [r4, #24]
     a12:	f043 0320 	orr.w	r3, r3, #32
     a16:	8323      	strh	r3, [r4, #24]
     a18:	e7cd      	b.n	9b6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     a1a:	2b04      	cmp	r3, #4
     a1c:	d10c      	bne.n	a38 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a1e:	f021 0107 	bic.w	r1, r1, #7
     a22:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     a24:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     a26:	4620      	mov	r0, r4
     a28:	f005 fe94 	bl	6754 <process_recheck>
     a2c:	4605      	mov	r5, r0
     a2e:	2800      	cmp	r0, #0
     a30:	d0c1      	beq.n	9b6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a32:	f041 0120 	orr.w	r1, r1, #32
     a36:	8321      	strh	r1, [r4, #24]
     a38:	2500      	movs	r5, #0
     a3a:	e7bc      	b.n	9b6 <process_event+0x5e>
		} else if (evt == EVT_START) {
     a3c:	2803      	cmp	r0, #3
     a3e:	d109      	bne.n	a54 <process_event+0xfc>
			transit = mgr->transitions->start;
     a40:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a42:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     a46:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a48:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     a4c:	8323      	strh	r3, [r4, #24]
}
     a4e:	2500      	movs	r5, #0
		res = 0;
     a50:	462f      	mov	r7, r5
     a52:	e7b1      	b.n	9b8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     a54:	2804      	cmp	r0, #4
     a56:	d106      	bne.n	a66 <process_event+0x10e>
			transit = mgr->transitions->stop;
     a58:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a5a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     a5e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a60:	f043 0304 	orr.w	r3, r3, #4
     a64:	e7f2      	b.n	a4c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     a66:	2805      	cmp	r0, #5
     a68:	d106      	bne.n	a78 <process_event+0x120>
			transit = mgr->transitions->reset;
     a6a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a6c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     a70:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a72:	f043 0305 	orr.w	r3, r3, #5
     a76:	e7e9      	b.n	a4c <process_event+0xf4>
     a78:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     a7a:	462e      	mov	r6, r5
     a7c:	e7e8      	b.n	a50 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     a7e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a80:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     a84:	8321      	strh	r1, [r4, #24]
     a86:	f38b 8811 	msr	BASEPRI, fp
     a8a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a8e:	b9fb      	cbnz	r3, ad0 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     a90:	bb85      	cbnz	r5, af4 <process_event+0x19c>
			if (transit != NULL) {
     a92:	b116      	cbz	r6, a9a <process_event+0x142>
				transit(mgr, transition_complete);
     a94:	491f      	ldr	r1, [pc, #124]	; (b14 <process_event+0x1bc>)
     a96:	4620      	mov	r0, r4
     a98:	47b0      	blx	r6
	__asm__ volatile(
     a9a:	f04f 0320 	mov.w	r3, #32
     a9e:	f3ef 8b11 	mrs	fp, BASEPRI
     aa2:	f383 8812 	msr	BASEPRI_MAX, r3
     aa6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     aaa:	8b23      	ldrh	r3, [r4, #24]
     aac:	f023 0308 	bic.w	r3, r3, #8
     ab0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     ab2:	8b23      	ldrh	r3, [r4, #24]
     ab4:	06da      	lsls	r2, r3, #27
     ab6:	d525      	bpl.n	b04 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ab8:	f023 0310 	bic.w	r3, r3, #16
     abc:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     abe:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     ac0:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     ac4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     ac8:	2900      	cmp	r1, #0
     aca:	f47f af5e 	bne.w	98a <process_event+0x32>
out:
     ace:	e754      	b.n	97a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     ad0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ad2:	2900      	cmp	r1, #0
     ad4:	d0dc      	beq.n	a90 <process_event+0x138>
	return node->next;
     ad6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     ada:	f8d1 b004 	ldr.w	fp, [r1, #4]
     ade:	463b      	mov	r3, r7
     ae0:	4652      	mov	r2, sl
     ae2:	4620      	mov	r0, r4
     ae4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ae6:	f1b9 0f00 	cmp.w	r9, #0
     aea:	d0d1      	beq.n	a90 <process_event+0x138>
     aec:	4649      	mov	r1, r9
     aee:	f8d9 9000 	ldr.w	r9, [r9]
     af2:	e7f2      	b.n	ada <process_event+0x182>
     af4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     af6:	463b      	mov	r3, r7
     af8:	4652      	mov	r2, sl
     afa:	4620      	mov	r0, r4
     afc:	682d      	ldr	r5, [r5, #0]
     afe:	f005 fe45 	bl	678c <notify_one>
     b02:	e7c5      	b.n	a90 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     b04:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     b08:	bf1e      	ittt	ne
     b0a:	f023 0320 	bicne.w	r3, r3, #32
     b0e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     b10:	2102      	movne	r1, #2
     b12:	e7d5      	b.n	ac0 <process_event+0x168>
     b14:	000067b9 	.word	0x000067b9

00000b18 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b1c:	b091      	sub	sp, #68	; 0x44
     b1e:	468b      	mov	fp, r1
     b20:	9002      	str	r0, [sp, #8]
     b22:	4692      	mov	sl, r2
     b24:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b26:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b28:	f89a 0000 	ldrb.w	r0, [sl]
     b2c:	b908      	cbnz	r0, b32 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     b2e:	4628      	mov	r0, r5
     b30:	e363      	b.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
		if (*fp != '%') {
     b32:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     b34:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     b38:	d007      	beq.n	b4a <z_cbvprintf_impl+0x32>
			OUTC('%');
     b3a:	9b02      	ldr	r3, [sp, #8]
     b3c:	4659      	mov	r1, fp
     b3e:	4798      	blx	r3
     b40:	2800      	cmp	r0, #0
     b42:	f2c0 835a 	blt.w	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
     b46:	3501      	adds	r5, #1
			break;
     b48:	e212      	b.n	f70 <z_cbvprintf_impl+0x458>
		} state = {
     b4a:	2218      	movs	r2, #24
     b4c:	2100      	movs	r1, #0
     b4e:	a80a      	add	r0, sp, #40	; 0x28
     b50:	f006 f9d2 	bl	6ef8 <memset>
	if (*sp == '%') {
     b54:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b58:	2b25      	cmp	r3, #37	; 0x25
     b5a:	d078      	beq.n	c4e <z_cbvprintf_impl+0x136>
     b5c:	2200      	movs	r2, #0
     b5e:	4610      	mov	r0, r2
     b60:	4696      	mov	lr, r2
     b62:	4694      	mov	ip, r2
     b64:	4616      	mov	r6, r2
     b66:	4639      	mov	r1, r7
		switch (*sp) {
     b68:	f817 3b01 	ldrb.w	r3, [r7], #1
     b6c:	2b2b      	cmp	r3, #43	; 0x2b
     b6e:	f000 809d 	beq.w	cac <z_cbvprintf_impl+0x194>
     b72:	f200 8094 	bhi.w	c9e <z_cbvprintf_impl+0x186>
     b76:	2b20      	cmp	r3, #32
     b78:	f000 809b 	beq.w	cb2 <z_cbvprintf_impl+0x19a>
     b7c:	2b23      	cmp	r3, #35	; 0x23
     b7e:	f000 809b 	beq.w	cb8 <z_cbvprintf_impl+0x1a0>
     b82:	b12e      	cbz	r6, b90 <z_cbvprintf_impl+0x78>
     b84:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b88:	f046 0604 	orr.w	r6, r6, #4
     b8c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b90:	f1bc 0f00 	cmp.w	ip, #0
     b94:	d005      	beq.n	ba2 <z_cbvprintf_impl+0x8a>
     b96:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b9a:	f046 0608 	orr.w	r6, r6, #8
     b9e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     ba2:	f1be 0f00 	cmp.w	lr, #0
     ba6:	d005      	beq.n	bb4 <z_cbvprintf_impl+0x9c>
     ba8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     bac:	f046 0610 	orr.w	r6, r6, #16
     bb0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     bb4:	b128      	cbz	r0, bc2 <z_cbvprintf_impl+0xaa>
     bb6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     bba:	f040 0020 	orr.w	r0, r0, #32
     bbe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     bc2:	b12a      	cbz	r2, bd0 <z_cbvprintf_impl+0xb8>
     bc4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     bcc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     bd0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bd4:	f002 0044 	and.w	r0, r2, #68	; 0x44
     bd8:	2844      	cmp	r0, #68	; 0x44
     bda:	d103      	bne.n	be4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     bdc:	f36f 1286 	bfc	r2, #6, #1
     be0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     be4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     be8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     bee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     bf2:	d17b      	bne.n	cec <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
     bf4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     bf8:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     bfc:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     bfe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     c02:	781a      	ldrb	r2, [r3, #0]
     c04:	2a2e      	cmp	r2, #46	; 0x2e
     c06:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c0a:	bf0c      	ite	eq
     c0c:	2101      	moveq	r1, #1
     c0e:	2100      	movne	r1, #0
     c10:	f361 0241 	bfi	r2, r1, #1, #1
     c14:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     c18:	d174      	bne.n	d04 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
     c1a:	785a      	ldrb	r2, [r3, #1]
     c1c:	2a2a      	cmp	r2, #42	; 0x2a
     c1e:	d06a      	beq.n	cf6 <z_cbvprintf_impl+0x1de>
	++sp;
     c20:	3301      	adds	r3, #1
	size_t val = 0;
     c22:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     c24:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     c26:	4618      	mov	r0, r3
     c28:	f810 2b01 	ldrb.w	r2, [r0], #1
     c2c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c30:	2f09      	cmp	r7, #9
     c32:	f240 808e 	bls.w	d52 <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     c36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     c3a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     c3c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     c40:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     c44:	f361 0241 	bfi	r2, r1, #1, #1
     c48:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     c4c:	e05a      	b.n	d04 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
     c4e:	f10a 0702 	add.w	r7, sl, #2
     c52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     c56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c5a:	07d9      	lsls	r1, r3, #31
     c5c:	f140 8149 	bpl.w	ef2 <z_cbvprintf_impl+0x3da>
			width = va_arg(ap, int);
     c60:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     c64:	f1b9 0f00 	cmp.w	r9, #0
     c68:	da07      	bge.n	c7a <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
     c6a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     c6e:	f042 0204 	orr.w	r2, r2, #4
     c72:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     c76:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     c7a:	075a      	lsls	r2, r3, #29
     c7c:	f140 8142 	bpl.w	f04 <z_cbvprintf_impl+0x3ec>
			int arg = va_arg(ap, int);
     c80:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c84:	f1b8 0f00 	cmp.w	r8, #0
     c88:	f280 8141 	bge.w	f0e <z_cbvprintf_impl+0x3f6>
				conv->prec_present = false;
     c8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c90:	f36f 0341 	bfc	r3, #1, #1
     c94:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c98:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     c9c:	e137      	b.n	f0e <z_cbvprintf_impl+0x3f6>
		switch (*sp) {
     c9e:	2b2d      	cmp	r3, #45	; 0x2d
     ca0:	d00c      	beq.n	cbc <z_cbvprintf_impl+0x1a4>
     ca2:	2b30      	cmp	r3, #48	; 0x30
     ca4:	f47f af6d 	bne.w	b82 <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
     ca8:	2201      	movs	r2, #1
	} while (loop);
     caa:	e75c      	b.n	b66 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
     cac:	f04f 0c01 	mov.w	ip, #1
     cb0:	e759      	b.n	b66 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
     cb2:	f04f 0e01 	mov.w	lr, #1
     cb6:	e756      	b.n	b66 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
     cb8:	2001      	movs	r0, #1
     cba:	e754      	b.n	b66 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
     cbc:	2601      	movs	r6, #1
     cbe:	e752      	b.n	b66 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
     cc0:	fb0c 0202 	mla	r2, ip, r2, r0
     cc4:	3a30      	subs	r2, #48	; 0x30
     cc6:	4633      	mov	r3, r6
     cc8:	461e      	mov	r6, r3
     cca:	f816 0b01 	ldrb.w	r0, [r6], #1
     cce:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     cd2:	2f09      	cmp	r7, #9
     cd4:	d9f4      	bls.n	cc0 <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
     cd6:	4299      	cmp	r1, r3
     cd8:	d093      	beq.n	c02 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     cda:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     cde:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ce0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ce2:	f362 0141 	bfi	r1, r2, #1, #1
     ce6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     cea:	e78a      	b.n	c02 <z_cbvprintf_impl+0xea>
     cec:	460b      	mov	r3, r1
	size_t val = 0;
     cee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     cf0:	f04f 0c0a 	mov.w	ip, #10
     cf4:	e7e8      	b.n	cc8 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
     cf6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cfa:	f042 0204 	orr.w	r2, r2, #4
     cfe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     d02:	3302      	adds	r3, #2
	switch (*sp) {
     d04:	461f      	mov	r7, r3
     d06:	f817 2b01 	ldrb.w	r2, [r7], #1
     d0a:	2a6c      	cmp	r2, #108	; 0x6c
     d0c:	d041      	beq.n	d92 <z_cbvprintf_impl+0x27a>
     d0e:	d825      	bhi.n	d5c <z_cbvprintf_impl+0x244>
     d10:	2a68      	cmp	r2, #104	; 0x68
     d12:	d02b      	beq.n	d6c <z_cbvprintf_impl+0x254>
     d14:	2a6a      	cmp	r2, #106	; 0x6a
     d16:	d046      	beq.n	da6 <z_cbvprintf_impl+0x28e>
     d18:	2a4c      	cmp	r2, #76	; 0x4c
     d1a:	d04c      	beq.n	db6 <z_cbvprintf_impl+0x29e>
     d1c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     d1e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     d22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     d26:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     d2a:	2a78      	cmp	r2, #120	; 0x78
     d2c:	f200 80d9 	bhi.w	ee2 <z_cbvprintf_impl+0x3ca>
     d30:	2a57      	cmp	r2, #87	; 0x57
     d32:	d84d      	bhi.n	dd0 <z_cbvprintf_impl+0x2b8>
     d34:	2a41      	cmp	r2, #65	; 0x41
     d36:	d003      	beq.n	d40 <z_cbvprintf_impl+0x228>
     d38:	3a45      	subs	r2, #69	; 0x45
     d3a:	2a02      	cmp	r2, #2
     d3c:	f200 80d1 	bhi.w	ee2 <z_cbvprintf_impl+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     d40:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d44:	2204      	movs	r2, #4
     d46:	f362 0302 	bfi	r3, r2, #0, #3
     d4a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     d4e:	2301      	movs	r3, #1
			break;
     d50:	e09e      	b.n	e90 <z_cbvprintf_impl+0x378>
		val = 10U * val + *sp++ - '0';
     d52:	fb06 2101 	mla	r1, r6, r1, r2
     d56:	3930      	subs	r1, #48	; 0x30
     d58:	4603      	mov	r3, r0
     d5a:	e764      	b.n	c26 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
     d5c:	2a74      	cmp	r2, #116	; 0x74
     d5e:	d026      	beq.n	dae <z_cbvprintf_impl+0x296>
     d60:	2a7a      	cmp	r2, #122	; 0x7a
     d62:	d1db      	bne.n	d1c <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
     d64:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d68:	2206      	movs	r2, #6
     d6a:	e00d      	b.n	d88 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
     d6c:	785a      	ldrb	r2, [r3, #1]
     d6e:	2a68      	cmp	r2, #104	; 0x68
     d70:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d74:	d106      	bne.n	d84 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
     d76:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d78:	f361 02c6 	bfi	r2, r1, #3, #4
     d7c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d80:	1c9f      	adds	r7, r3, #2
     d82:	e7cc      	b.n	d1e <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
     d84:	4613      	mov	r3, r2
     d86:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d88:	f362 03c6 	bfi	r3, r2, #3, #4
     d8c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d90:	e7c5      	b.n	d1e <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
     d92:	785a      	ldrb	r2, [r3, #1]
     d94:	2a6c      	cmp	r2, #108	; 0x6c
     d96:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d9a:	d101      	bne.n	da0 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
     d9c:	2104      	movs	r1, #4
     d9e:	e7eb      	b.n	d78 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
     da0:	4613      	mov	r3, r2
     da2:	2203      	movs	r2, #3
     da4:	e7f0      	b.n	d88 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
     da6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     daa:	2205      	movs	r2, #5
     dac:	e7ec      	b.n	d88 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
     dae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     db2:	2207      	movs	r2, #7
     db4:	e7e8      	b.n	d88 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
     db6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     dba:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     dbe:	f023 0302 	bic.w	r3, r3, #2
     dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     dc6:	f043 0302 	orr.w	r3, r3, #2
     dca:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     dce:	e7a6      	b.n	d1e <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
     dd0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     dd4:	2920      	cmp	r1, #32
     dd6:	f200 8084 	bhi.w	ee2 <z_cbvprintf_impl+0x3ca>
     dda:	a001      	add	r0, pc, #4	; (adr r0, de0 <z_cbvprintf_impl+0x2c8>)
     ddc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     de0:	00000ea5 	.word	0x00000ea5
     de4:	00000ee3 	.word	0x00000ee3
     de8:	00000ee3 	.word	0x00000ee3
     dec:	00000ee3 	.word	0x00000ee3
     df0:	00000ee3 	.word	0x00000ee3
     df4:	00000ee3 	.word	0x00000ee3
     df8:	00000ee3 	.word	0x00000ee3
     dfc:	00000ee3 	.word	0x00000ee3
     e00:	00000ee3 	.word	0x00000ee3
     e04:	00000d41 	.word	0x00000d41
     e08:	00000ee3 	.word	0x00000ee3
     e0c:	00000ea5 	.word	0x00000ea5
     e10:	00000e65 	.word	0x00000e65
     e14:	00000d41 	.word	0x00000d41
     e18:	00000d41 	.word	0x00000d41
     e1c:	00000d41 	.word	0x00000d41
     e20:	00000ee3 	.word	0x00000ee3
     e24:	00000e65 	.word	0x00000e65
     e28:	00000ee3 	.word	0x00000ee3
     e2c:	00000ee3 	.word	0x00000ee3
     e30:	00000ee3 	.word	0x00000ee3
     e34:	00000ee3 	.word	0x00000ee3
     e38:	00000ead 	.word	0x00000ead
     e3c:	00000ea5 	.word	0x00000ea5
     e40:	00000ec9 	.word	0x00000ec9
     e44:	00000ee3 	.word	0x00000ee3
     e48:	00000ee3 	.word	0x00000ee3
     e4c:	00000ec9 	.word	0x00000ec9
     e50:	00000ee3 	.word	0x00000ee3
     e54:	00000ea5 	.word	0x00000ea5
     e58:	00000ee3 	.word	0x00000ee3
     e5c:	00000ee3 	.word	0x00000ee3
     e60:	00000ea5 	.word	0x00000ea5
		conv->specifier_cat = SPECIFIER_SINT;
     e64:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e68:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     e6a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     e6e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e72:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e74:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e78:	bf02      	ittt	eq
     e7a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e7e:	f041 0101 	orreq.w	r1, r1, #1
     e82:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e86:	2a63      	cmp	r2, #99	; 0x63
     e88:	d131      	bne.n	eee <z_cbvprintf_impl+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e8a:	3b00      	subs	r3, #0
     e8c:	bf18      	it	ne
     e8e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e90:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e94:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e98:	430b      	orrs	r3, r1
     e9a:	f363 0241 	bfi	r2, r3, #1, #1
     e9e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     ea2:	e6d8      	b.n	c56 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     ea4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     ea8:	2002      	movs	r0, #2
     eaa:	e7de      	b.n	e6a <z_cbvprintf_impl+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     eac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     eb0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     eb4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     eb8:	2103      	movs	r1, #3
     eba:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ebe:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     ec0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ec4:	4143      	adcs	r3, r0
     ec6:	e7e3      	b.n	e90 <z_cbvprintf_impl+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     ec8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     ecc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     ece:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ed2:	f361 0202 	bfi	r2, r1, #0, #3
     ed6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     eda:	bf14      	ite	ne
     edc:	2301      	movne	r3, #1
     ede:	2300      	moveq	r3, #0
     ee0:	e7d6      	b.n	e90 <z_cbvprintf_impl+0x378>
		conv->invalid = true;
     ee2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ee6:	f043 0301 	orr.w	r3, r3, #1
     eea:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     eee:	2300      	movs	r3, #0
     ef0:	e7ce      	b.n	e90 <z_cbvprintf_impl+0x378>
		} else if (conv->width_present) {
     ef2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     ef6:	2a00      	cmp	r2, #0
			width = conv->width_value;
     ef8:	bfb4      	ite	lt
     efa:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     efe:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     f02:	e6ba      	b.n	c7a <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
     f04:	079b      	lsls	r3, r3, #30
     f06:	f57f aec7 	bpl.w	c98 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
     f0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     f0e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     f12:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     f14:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     f18:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     f1c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     f20:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     f22:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     f26:	d135      	bne.n	f94 <z_cbvprintf_impl+0x47c>
			switch (length_mod) {
     f28:	1ecb      	subs	r3, r1, #3
     f2a:	2b04      	cmp	r3, #4
     f2c:	d822      	bhi.n	f74 <z_cbvprintf_impl+0x45c>
     f2e:	e8df f003 	tbb	[pc, r3]
     f32:	0903      	.short	0x0903
     f34:	2109      	.short	0x2109
     f36:	21          	.byte	0x21
     f37:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     f38:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     f3c:	17da      	asrs	r2, r3, #31
     f3e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     f42:	e006      	b.n	f52 <z_cbvprintf_impl+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     f44:	3407      	adds	r4, #7
     f46:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     f4a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     f4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     f52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     f56:	f013 0603 	ands.w	r6, r3, #3
     f5a:	d059      	beq.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			OUTS(sp, fp);
     f5c:	9802      	ldr	r0, [sp, #8]
     f5e:	463b      	mov	r3, r7
     f60:	4652      	mov	r2, sl
     f62:	4659      	mov	r1, fp
     f64:	f005 fcf1 	bl	694a <outs>
     f68:	2800      	cmp	r0, #0
     f6a:	f2c0 8146 	blt.w	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
     f6e:	4405      	add	r5, r0
			continue;
     f70:	46ba      	mov	sl, r7
     f72:	e5d9      	b.n	b28 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f74:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f78:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f7a:	ea4f 72e3 	mov.w	r2, r3, asr #31
     f7e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f82:	d102      	bne.n	f8a <z_cbvprintf_impl+0x472>
				value->sint = (signed char)value->sint;
     f84:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
     f88:	e7d8      	b.n	f3c <z_cbvprintf_impl+0x424>
			} else if (length_mod == LENGTH_H) {
     f8a:	2902      	cmp	r1, #2
     f8c:	d1e1      	bne.n	f52 <z_cbvprintf_impl+0x43a>
				value->sint = (short)value->sint;
     f8e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     f92:	e7d3      	b.n	f3c <z_cbvprintf_impl+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f94:	2b02      	cmp	r3, #2
     f96:	d129      	bne.n	fec <z_cbvprintf_impl+0x4d4>
			switch (length_mod) {
     f98:	1ecb      	subs	r3, r1, #3
     f9a:	2b04      	cmp	r3, #4
     f9c:	d813      	bhi.n	fc6 <z_cbvprintf_impl+0x4ae>
     f9e:	e8df f003 	tbb	[pc, r3]
     fa2:	0a03      	.short	0x0a03
     fa4:	120a      	.short	0x120a
     fa6:	12          	.byte	0x12
     fa7:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     fa8:	6822      	ldr	r2, [r4, #0]
     faa:	920a      	str	r2, [sp, #40]	; 0x28
     fac:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     fae:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     fb0:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     fb2:	4604      	mov	r4, r0
     fb4:	e7cd      	b.n	f52 <z_cbvprintf_impl+0x43a>
					(uint_value_type)va_arg(ap,
     fb6:	1de0      	adds	r0, r4, #7
     fb8:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     fbc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     fc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     fc4:	e7f5      	b.n	fb2 <z_cbvprintf_impl+0x49a>
					(uint_value_type)va_arg(ap, size_t);
     fc6:	f854 3b04 	ldr.w	r3, [r4], #4
     fca:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     fcc:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     fce:	f04f 0300 	mov.w	r3, #0
     fd2:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     fd4:	d105      	bne.n	fe2 <z_cbvprintf_impl+0x4ca>
				value->uint = (unsigned char)value->uint;
     fd6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     fda:	930a      	str	r3, [sp, #40]	; 0x28
     fdc:	2300      	movs	r3, #0
     fde:	930b      	str	r3, [sp, #44]	; 0x2c
     fe0:	e7b7      	b.n	f52 <z_cbvprintf_impl+0x43a>
			} else if (length_mod == LENGTH_H) {
     fe2:	2902      	cmp	r1, #2
     fe4:	d1b5      	bne.n	f52 <z_cbvprintf_impl+0x43a>
				value->uint = (unsigned short)value->uint;
     fe6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     fea:	e7f6      	b.n	fda <z_cbvprintf_impl+0x4c2>
		} else if (specifier_cat == SPECIFIER_FP) {
     fec:	2b04      	cmp	r3, #4
     fee:	d109      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
					(sint_value_type)va_arg(ap, long long);
     ff0:	1de3      	adds	r3, r4, #7
     ff2:	f023 0307 	bic.w	r3, r3, #7
     ff6:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
     ffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1002:	e7a6      	b.n	f52 <z_cbvprintf_impl+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1004:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1006:	bf04      	itt	eq
    1008:	f854 3b04 	ldreq.w	r3, [r4], #4
    100c:	930a      	streq	r3, [sp, #40]	; 0x28
    100e:	e7a0      	b.n	f52 <z_cbvprintf_impl+0x43a>
		switch (conv->specifier) {
    1010:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1014:	2878      	cmp	r0, #120	; 0x78
    1016:	d8ab      	bhi.n	f70 <z_cbvprintf_impl+0x458>
    1018:	2862      	cmp	r0, #98	; 0x62
    101a:	d822      	bhi.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    101c:	2825      	cmp	r0, #37	; 0x25
    101e:	f43f ad8c 	beq.w	b3a <z_cbvprintf_impl+0x22>
    1022:	2858      	cmp	r0, #88	; 0x58
    1024:	d1a4      	bne.n	f70 <z_cbvprintf_impl+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1026:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    102a:	9300      	str	r3, [sp, #0]
    102c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1030:	ab04      	add	r3, sp, #16
    1032:	aa0c      	add	r2, sp, #48	; 0x30
    1034:	f005 fc43 	bl	68be <encode_uint>
    1038:	4682      	mov	sl, r0
			if (precision >= 0) {
    103a:	f1b8 0f00 	cmp.w	r8, #0
    103e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1042:	db0c      	blt.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
				conv->flag_zero = false;
    1044:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1048:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    104c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1050:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1052:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1056:	d902      	bls.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
					conv->pad0_value = precision - (int)len;
    1058:	eba8 0303 	sub.w	r3, r8, r3
    105c:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    105e:	4680      	mov	r8, r0
    1060:	e03e      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		switch (conv->specifier) {
    1062:	3863      	subs	r0, #99	; 0x63
    1064:	2815      	cmp	r0, #21
    1066:	d883      	bhi.n	f70 <z_cbvprintf_impl+0x458>
    1068:	a201      	add	r2, pc, #4	; (adr r2, 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    106e:	bf00      	nop
    1070:	000010f1 	.word	0x000010f1
    1074:	00001155 	.word	0x00001155
    1078:	00000f71 	.word	0x00000f71
    107c:	00000f71 	.word	0x00000f71
    1080:	00000f71 	.word	0x00000f71
    1084:	00000f71 	.word	0x00000f71
    1088:	00001155 	.word	0x00001155
    108c:	00000f71 	.word	0x00000f71
    1090:	00000f71 	.word	0x00000f71
    1094:	00000f71 	.word	0x00000f71
    1098:	00000f71 	.word	0x00000f71
    109c:	000011af 	.word	0x000011af
    10a0:	0000117d 	.word	0x0000117d
    10a4:	00001181 	.word	0x00001181
    10a8:	00000f71 	.word	0x00000f71
    10ac:	00000f71 	.word	0x00000f71
    10b0:	000010c9 	.word	0x000010c9
    10b4:	00000f71 	.word	0x00000f71
    10b8:	0000117d 	.word	0x0000117d
    10bc:	00000f71 	.word	0x00000f71
    10c0:	00000f71 	.word	0x00000f71
    10c4:	0000117d 	.word	0x0000117d
			if (precision >= 0) {
    10c8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    10cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    10d0:	db0a      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
				len = strnlen(bps, precision);
    10d2:	4641      	mov	r1, r8
    10d4:	4650      	mov	r0, sl
    10d6:	f005 fefb 	bl	6ed0 <strnlen>
			bpe = bps + len;
    10da:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    10de:	2600      	movs	r6, #0
		if (bps == NULL) {
    10e0:	f1ba 0f00 	cmp.w	sl, #0
    10e4:	d10c      	bne.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
    10e6:	e743      	b.n	f70 <z_cbvprintf_impl+0x458>
				len = strlen(bps);
    10e8:	4650      	mov	r0, sl
    10ea:	f005 feea 	bl	6ec2 <strlen>
    10ee:	e7f4      	b.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    10f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10f2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    10f6:	2600      	movs	r6, #0
			bps = buf;
    10f8:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    10fc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1100:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1104:	b106      	cbz	r6, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
			nj_len += 1U;
    1106:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1108:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    110c:	06d0      	lsls	r0, r2, #27
    110e:	d568      	bpl.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
			nj_len += 2U;
    1110:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1112:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1114:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1116:	bf48      	it	mi
    1118:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    111a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    111c:	bf48      	it	mi
    111e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1120:	f1b9 0f00 	cmp.w	r9, #0
    1124:	dd76      	ble.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
			if (!conv->flag_dash) {
    1126:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    112a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    112e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1132:	9303      	str	r3, [sp, #12]
    1134:	0753      	lsls	r3, r2, #29
    1136:	d46d      	bmi.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
				if (conv->flag_zero) {
    1138:	0650      	lsls	r0, r2, #25
    113a:	d561      	bpl.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
					if (sign != 0) {
    113c:	b146      	cbz	r6, 1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
						OUTC(sign);
    113e:	9b02      	ldr	r3, [sp, #8]
    1140:	4659      	mov	r1, fp
    1142:	4630      	mov	r0, r6
    1144:	4798      	blx	r3
    1146:	2800      	cmp	r0, #0
    1148:	db57      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
						sign = 0;
    114a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    114c:	3501      	adds	r5, #1
						sign = 0;
    114e:	461e      	mov	r6, r3
					pad = '0';
    1150:	2330      	movs	r3, #48	; 0x30
    1152:	e056      	b.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
			if (conv->flag_plus) {
    1154:	071e      	lsls	r6, r3, #28
    1156:	d40f      	bmi.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
				sign = ' ';
    1158:	f013 0610 	ands.w	r6, r3, #16
    115c:	bf18      	it	ne
    115e:	2620      	movne	r6, #32
			sint = value->sint;
    1160:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1164:	2b00      	cmp	r3, #0
    1166:	f6bf af5e 	bge.w	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
				value->uint = (uint_value_type)-sint;
    116a:	4252      	negs	r2, r2
    116c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1170:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1174:	262d      	movs	r6, #45	; 0x2d
    1176:	e756      	b.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
				sign = '+';
    1178:	262b      	movs	r6, #43	; 0x2b
    117a:	e7f1      	b.n	1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>
		switch (conv->specifier) {
    117c:	2600      	movs	r6, #0
    117e:	e752      	b.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
			if (value->ptr != NULL) {
    1180:	980a      	ldr	r0, [sp, #40]	; 0x28
    1182:	b340      	cbz	r0, 11d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1184:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1188:	9300      	str	r3, [sp, #0]
    118a:	aa0c      	add	r2, sp, #48	; 0x30
    118c:	ab04      	add	r3, sp, #16
    118e:	2100      	movs	r1, #0
    1190:	f005 fb95 	bl	68be <encode_uint>
				conv->altform_0c = true;
    1194:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1198:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    119c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    11a0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    11a4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    11a6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    11aa:	2600      	movs	r6, #0
				goto prec_int_pad0;
    11ac:	e745      	b.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
				store_count(conv, value->ptr, count);
    11ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    11b0:	2907      	cmp	r1, #7
    11b2:	f63f aedd 	bhi.w	f70 <z_cbvprintf_impl+0x458>
    11b6:	e8df f001 	tbb	[pc, r1]
    11ba:	040c      	.short	0x040c
    11bc:	08080c06 	.word	0x08080c06
    11c0:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    11c2:	701d      	strb	r5, [r3, #0]
		break;
    11c4:	e6d4      	b.n	f70 <z_cbvprintf_impl+0x458>
		*(short *)dp = (short)count;
    11c6:	801d      	strh	r5, [r3, #0]
		break;
    11c8:	e6d2      	b.n	f70 <z_cbvprintf_impl+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    11ca:	17ea      	asrs	r2, r5, #31
    11cc:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    11d0:	e6ce      	b.n	f70 <z_cbvprintf_impl+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    11d2:	601d      	str	r5, [r3, #0]
		break;
    11d4:	e6cc      	b.n	f70 <z_cbvprintf_impl+0x458>
			bps = "(nil)";
    11d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    11da:	4606      	mov	r6, r0
			bpe = bps + 5;
    11dc:	f10a 0805 	add.w	r8, sl, #5
    11e0:	e78e      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		} else if (conv->altform_0) {
    11e2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    11e4:	bf48      	it	mi
    11e6:	3301      	addmi	r3, #1
    11e8:	e793      	b.n	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
					OUTC(pad);
    11ea:	4618      	mov	r0, r3
    11ec:	9303      	str	r3, [sp, #12]
    11ee:	4659      	mov	r1, fp
    11f0:	9b02      	ldr	r3, [sp, #8]
    11f2:	4798      	blx	r3
    11f4:	2800      	cmp	r0, #0
    11f6:	9b03      	ldr	r3, [sp, #12]
    11f8:	da04      	bge.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
#undef OUTS
#undef OUTC
}
    11fa:	b011      	add	sp, #68	; 0x44
    11fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1200:	2320      	movs	r3, #32
    1202:	444d      	add	r5, r9
    1204:	464a      	mov	r2, r9
				while (width-- > 0) {
    1206:	2a00      	cmp	r2, #0
    1208:	eba5 0109 	sub.w	r1, r5, r9
    120c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1210:	dceb      	bgt.n	11ea <CONFIG_FPROTECT_BLOCK_SIZE+0x1ea>
    1212:	460d      	mov	r5, r1
		if (sign != 0) {
    1214:	b136      	cbz	r6, 1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>
			OUTC(sign);
    1216:	9b02      	ldr	r3, [sp, #8]
    1218:	4659      	mov	r1, fp
    121a:	4630      	mov	r0, r6
    121c:	4798      	blx	r3
    121e:	2800      	cmp	r0, #0
    1220:	dbeb      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1222:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1224:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1228:	06d9      	lsls	r1, r3, #27
    122a:	d401      	bmi.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    122c:	071a      	lsls	r2, r3, #28
    122e:	d506      	bpl.n	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
				OUTC('0');
    1230:	9b02      	ldr	r3, [sp, #8]
    1232:	4659      	mov	r1, fp
    1234:	2030      	movs	r0, #48	; 0x30
    1236:	4798      	blx	r3
    1238:	2800      	cmp	r0, #0
    123a:	dbde      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    123c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    123e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1242:	06db      	lsls	r3, r3, #27
    1244:	d507      	bpl.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
				OUTC(conv->specifier);
    1246:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    124a:	9b02      	ldr	r3, [sp, #8]
    124c:	4659      	mov	r1, fp
    124e:	4798      	blx	r3
    1250:	2800      	cmp	r0, #0
    1252:	dbd2      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1254:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1256:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1258:	442e      	add	r6, r5
    125a:	1b73      	subs	r3, r6, r5
    125c:	2b00      	cmp	r3, #0
    125e:	dc16      	bgt.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
			OUTS(bps, bpe);
    1260:	9802      	ldr	r0, [sp, #8]
    1262:	4643      	mov	r3, r8
    1264:	4652      	mov	r2, sl
    1266:	4659      	mov	r1, fp
    1268:	f005 fb6f 	bl	694a <outs>
    126c:	2800      	cmp	r0, #0
    126e:	dbc4      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1270:	4405      	add	r5, r0
		while (width > 0) {
    1272:	44a9      	add	r9, r5
    1274:	eba9 0305 	sub.w	r3, r9, r5
    1278:	2b00      	cmp	r3, #0
    127a:	f77f ae79 	ble.w	f70 <z_cbvprintf_impl+0x458>
			OUTC(' ');
    127e:	9b02      	ldr	r3, [sp, #8]
    1280:	4659      	mov	r1, fp
    1282:	2020      	movs	r0, #32
    1284:	4798      	blx	r3
    1286:	2800      	cmp	r0, #0
    1288:	dbb7      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    128a:	3501      	adds	r5, #1
			--width;
    128c:	e7f2      	b.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
				OUTC('0');
    128e:	9b02      	ldr	r3, [sp, #8]
    1290:	4659      	mov	r1, fp
    1292:	2030      	movs	r0, #48	; 0x30
    1294:	4798      	blx	r3
    1296:	2800      	cmp	r0, #0
    1298:	dbaf      	blt.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    129a:	3501      	adds	r5, #1
    129c:	e7dd      	b.n	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
    129e:	bf00      	nop
    12a0:	000080c5 	.word	0x000080c5

000012a4 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    12a4:	b508      	push	{r3, lr}
    12a6:	f04f 0220 	mov.w	r2, #32
    12aa:	f3ef 8311 	mrs	r3, BASEPRI
    12ae:	f382 8812 	msr	BASEPRI_MAX, r2
    12b2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    12b6:	f001 fd41 	bl	2d3c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    12ba:	4803      	ldr	r0, [pc, #12]	; (12c8 <sys_reboot+0x24>)
    12bc:	f005 fa30 	bl	6720 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    12c0:	f000 ff04 	bl	20cc <arch_cpu_idle>
    12c4:	e7fc      	b.n	12c0 <sys_reboot+0x1c>
    12c6:	bf00      	nop
    12c8:	000080cb 	.word	0x000080cb

000012cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    12cc:	f002 bee0 	b.w	4090 <SystemInit>

000012d0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    12d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    12d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1330 <activate_foreach_backend+0x60>
{
    12d8:	4604      	mov	r4, r0
	while (mask_cpy) {
    12da:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    12dc:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    12e0:	b914      	cbnz	r4, 12e8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    12e2:	4638      	mov	r0, r7
    12e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    12e8:	fa94 f5a4 	rbit	r5, r4
    12ec:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    12f0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    12f4:	012e      	lsls	r6, r5, #4
    12f6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    12fa:	ea6f 0a03 	mvn.w	sl, r3
    12fe:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1302:	7b2b      	ldrb	r3, [r5, #12]
    1304:	2b00      	cmp	r3, #0
    1306:	d0eb      	beq.n	12e0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1308:	f858 3006 	ldr.w	r3, [r8, r6]
    130c:	691b      	ldr	r3, [r3, #16]
    130e:	b94b      	cbnz	r3, 1324 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1310:	4446      	add	r6, r8
			log_backend_enable(backend,
    1312:	2204      	movs	r2, #4
    1314:	6873      	ldr	r3, [r6, #4]
    1316:	4628      	mov	r0, r5
    1318:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    131a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    131e:	f000 fa43 	bl	17a8 <log_backend_enable>
    1322:	e7dd      	b.n	12e0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1324:	4628      	mov	r0, r5
    1326:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1328:	2800      	cmp	r0, #0
    132a:	d1d9      	bne.n	12e0 <activate_foreach_backend+0x10>
    132c:	e7f0      	b.n	1310 <activate_foreach_backend+0x40>
    132e:	bf00      	nop
    1330:	00007d0c 	.word	0x00007d0c

00001334 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1334:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1336:	4910      	ldr	r1, [pc, #64]	; (1378 <enable_logger+0x44>)
    1338:	4810      	ldr	r0, [pc, #64]	; (137c <enable_logger+0x48>)
{
    133a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    133c:	2200      	movs	r2, #0
    133e:	f006 fb46 	bl	79ce <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1342:	4d0f      	ldr	r5, [pc, #60]	; (1380 <enable_logger+0x4c>)
    1344:	490f      	ldr	r1, [pc, #60]	; (1384 <enable_logger+0x50>)
    1346:	2200      	movs	r2, #0
    1348:	2300      	movs	r3, #0
    134a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    134e:	2400      	movs	r4, #0
    1350:	230e      	movs	r3, #14
    1352:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1356:	e9cd 4401 	strd	r4, r4, [sp, #4]
    135a:	4b0b      	ldr	r3, [pc, #44]	; (1388 <enable_logger+0x54>)
    135c:	9400      	str	r4, [sp, #0]
    135e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1362:	4628      	mov	r0, r5
    1364:	f003 fee0 	bl	5128 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1368:	4908      	ldr	r1, [pc, #32]	; (138c <enable_logger+0x58>)
    136a:	4628      	mov	r0, r5
    136c:	f006 f98d 	bl	768a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1370:	4620      	mov	r0, r4
    1372:	b009      	add	sp, #36	; 0x24
    1374:	bd30      	pop	{r4, r5, pc}
    1376:	bf00      	nop
    1378:	00001391 	.word	0x00001391
    137c:	200005d0 	.word	0x200005d0
    1380:	20000608 	.word	0x20000608
    1384:	20001180 	.word	0x20001180
    1388:	00001641 	.word	0x00001641
    138c:	000080f4 	.word	0x000080f4

00001390 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1390:	4801      	ldr	r0, [pc, #4]	; (1398 <log_process_thread_timer_expiry_fn+0x8>)
    1392:	f004 b821 	b.w	53d8 <z_impl_k_sem_give>
    1396:	bf00      	nop
    1398:	200001bc 	.word	0x200001bc

0000139c <z_log_init>:
{
    139c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    13a0:	4b25      	ldr	r3, [pc, #148]	; (1438 <z_log_init+0x9c>)
    13a2:	f3bf 8f5b 	dmb	ish
    13a6:	4681      	mov	r9, r0
    13a8:	4688      	mov	r8, r1
    13aa:	e853 4f00 	ldrex	r4, [r3]
    13ae:	1c62      	adds	r2, r4, #1
    13b0:	e843 2100 	strex	r1, r2, [r3]
    13b4:	2900      	cmp	r1, #0
    13b6:	d1f8      	bne.n	13aa <z_log_init+0xe>
    13b8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    13bc:	b11c      	cbz	r4, 13c6 <z_log_init+0x2a>
		return 0;
    13be:	2400      	movs	r4, #0
}
    13c0:	4620      	mov	r0, r4
    13c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    13c6:	4d1d      	ldr	r5, [pc, #116]	; (143c <z_log_init+0xa0>)
    13c8:	4e1d      	ldr	r6, [pc, #116]	; (1440 <z_log_init+0xa4>)
    13ca:	1b76      	subs	r6, r6, r5
    13cc:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    13ce:	4627      	mov	r7, r4
				mask |= BIT(i);
    13d0:	f04f 0a01 	mov.w	sl, #1
	for (i = 0; i < log_backend_count_get(); i++) {
    13d4:	42b7      	cmp	r7, r6
    13d6:	db11      	blt.n	13fc <z_log_init+0x60>
	if (blocking) {
    13d8:	f1b9 0f00 	cmp.w	r9, #0
    13dc:	d0f0      	beq.n	13c0 <z_log_init+0x24>
		while (mask) {
    13de:	2c00      	cmp	r4, #0
    13e0:	d0ed      	beq.n	13be <z_log_init+0x22>
			mask = activate_foreach_backend(mask);
    13e2:	4620      	mov	r0, r4
    13e4:	f7ff ff74 	bl	12d0 <activate_foreach_backend>
    13e8:	4604      	mov	r4, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    13ea:	f1b8 0f00 	cmp.w	r8, #0
    13ee:	d0f6      	beq.n	13de <z_log_init+0x42>
	return z_impl_k_sleep(timeout);
    13f0:	2100      	movs	r1, #0
    13f2:	f44f 70a4 	mov.w	r0, #328	; 0x148
    13f6:	f004 fc91 	bl	5d1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    13fa:	e7f0      	b.n	13de <z_log_init+0x42>
		if (backend->autostart) {
    13fc:	7b2b      	ldrb	r3, [r5, #12]
    13fe:	b17b      	cbz	r3, 1420 <z_log_init+0x84>
	if (backend->api->init) {
    1400:	f8d5 b000 	ldr.w	fp, [r5]
    1404:	f8db 300c 	ldr.w	r3, [fp, #12]
    1408:	b10b      	cbz	r3, 140e <z_log_init+0x72>
		backend->api->init(backend);
    140a:	4628      	mov	r0, r5
    140c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    140e:	f8db 3010 	ldr.w	r3, [fp, #16]
    1412:	b943      	cbnz	r3, 1426 <z_log_init+0x8a>
				log_backend_enable(backend,
    1414:	686b      	ldr	r3, [r5, #4]
    1416:	2204      	movs	r2, #4
    1418:	6819      	ldr	r1, [r3, #0]
    141a:	4628      	mov	r0, r5
    141c:	f000 f9c4 	bl	17a8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1420:	3701      	adds	r7, #1
    1422:	3510      	adds	r5, #16
    1424:	e7d6      	b.n	13d4 <z_log_init+0x38>
		return backend->api->is_ready(backend);
    1426:	4628      	mov	r0, r5
    1428:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    142a:	2800      	cmp	r0, #0
    142c:	d0f2      	beq.n	1414 <z_log_init+0x78>
				mask |= BIT(i);
    142e:	fa0a f307 	lsl.w	r3, sl, r7
    1432:	431c      	orrs	r4, r3
    1434:	e7f4      	b.n	1420 <z_log_init+0x84>
    1436:	bf00      	nop
    1438:	20000888 	.word	0x20000888
    143c:	00007d0c 	.word	0x00007d0c
    1440:	00007d1c 	.word	0x00007d1c

00001444 <log_format_func_t_get>:
}
    1444:	4b01      	ldr	r3, [pc, #4]	; (144c <log_format_func_t_get+0x8>)
    1446:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    144a:	4770      	bx	lr
    144c:	00007d30 	.word	0x00007d30

00001450 <z_log_notify_backend_enabled>:
{
    1450:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1452:	4c04      	ldr	r4, [pc, #16]	; (1464 <z_log_notify_backend_enabled+0x14>)
    1454:	7823      	ldrb	r3, [r4, #0]
    1456:	b913      	cbnz	r3, 145e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1458:	4803      	ldr	r0, [pc, #12]	; (1468 <z_log_notify_backend_enabled+0x18>)
    145a:	f003 ffbd 	bl	53d8 <z_impl_k_sem_give>
	backend_attached = true;
    145e:	2301      	movs	r3, #1
    1460:	7023      	strb	r3, [r4, #0]
}
    1462:	bd10      	pop	{r4, pc}
    1464:	20001154 	.word	0x20001154
    1468:	200001bc 	.word	0x200001bc

0000146c <z_log_dropped>:
    146c:	4b0c      	ldr	r3, [pc, #48]	; (14a0 <z_log_dropped+0x34>)
    146e:	f3bf 8f5b 	dmb	ish
    1472:	e853 2f00 	ldrex	r2, [r3]
    1476:	3201      	adds	r2, #1
    1478:	e843 2100 	strex	r1, r2, [r3]
    147c:	2900      	cmp	r1, #0
    147e:	d1f8      	bne.n	1472 <z_log_dropped+0x6>
    1480:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1484:	b158      	cbz	r0, 149e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1486:	f3bf 8f5b 	dmb	ish
    148a:	4b06      	ldr	r3, [pc, #24]	; (14a4 <z_log_dropped+0x38>)
    148c:	e853 2f00 	ldrex	r2, [r3]
    1490:	3a01      	subs	r2, #1
    1492:	e843 2100 	strex	r1, r2, [r3]
    1496:	2900      	cmp	r1, #0
    1498:	d1f8      	bne.n	148c <z_log_dropped+0x20>
    149a:	f3bf 8f5b 	dmb	ish
}
    149e:	4770      	bx	lr
    14a0:	20000884 	.word	0x20000884
    14a4:	20000880 	.word	0x20000880

000014a8 <z_log_dropped_read_and_clear>:
}
    14a8:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    14aa:	4b06      	ldr	r3, [pc, #24]	; (14c4 <z_log_dropped_read_and_clear+0x1c>)
    14ac:	f3bf 8f5b 	dmb	ish
    14b0:	4602      	mov	r2, r0
    14b2:	e853 0f00 	ldrex	r0, [r3]
    14b6:	e843 2100 	strex	r1, r2, [r3]
    14ba:	2900      	cmp	r1, #0
    14bc:	d1f9      	bne.n	14b2 <z_log_dropped_read_and_clear+0xa>
    14be:	f3bf 8f5b 	dmb	ish
    14c2:	4770      	bx	lr
    14c4:	20000884 	.word	0x20000884

000014c8 <dropped_notify>:
{
    14c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    14ca:	f7ff ffed 	bl	14a8 <z_log_dropped_read_and_clear>
	return __log_backends_end - __log_backends_start;
    14ce:	4c0a      	ldr	r4, [pc, #40]	; (14f8 <dropped_notify+0x30>)
    14d0:	4d0a      	ldr	r5, [pc, #40]	; (14fc <dropped_notify+0x34>)
    14d2:	1b2d      	subs	r5, r5, r4
    14d4:	4607      	mov	r7, r0
    14d6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    14d8:	2600      	movs	r6, #0
    14da:	42ae      	cmp	r6, r5
    14dc:	db00      	blt.n	14e0 <dropped_notify+0x18>
}
    14de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    14e0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    14e2:	795b      	ldrb	r3, [r3, #5]
    14e4:	b12b      	cbz	r3, 14f2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    14e6:	6823      	ldr	r3, [r4, #0]
    14e8:	685b      	ldr	r3, [r3, #4]
    14ea:	b113      	cbz	r3, 14f2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    14ec:	4639      	mov	r1, r7
    14ee:	4620      	mov	r0, r4
    14f0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    14f2:	3601      	adds	r6, #1
    14f4:	3410      	adds	r4, #16
    14f6:	e7f0      	b.n	14da <dropped_notify+0x12>
    14f8:	00007d0c 	.word	0x00007d0c
    14fc:	00007d1c 	.word	0x00007d1c

00001500 <z_log_msg_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1500:	4901      	ldr	r1, [pc, #4]	; (1508 <z_log_msg_init+0x8>)
    1502:	4802      	ldr	r0, [pc, #8]	; (150c <z_log_msg_init+0xc>)
    1504:	f005 baec 	b.w	6ae0 <mpsc_pbuf_init>
    1508:	00007d3c 	.word	0x00007d3c
    150c:	2000088c 	.word	0x2000088c

00001510 <log_core_init>:
	panic_mode = false;
    1510:	4a08      	ldr	r2, [pc, #32]	; (1534 <log_core_init+0x24>)
{
    1512:	b508      	push	{r3, lr}
	panic_mode = false;
    1514:	2300      	movs	r3, #0
    1516:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1518:	4a07      	ldr	r2, [pc, #28]	; (1538 <log_core_init+0x28>)
    151a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    151c:	4b07      	ldr	r3, [pc, #28]	; (153c <log_core_init+0x2c>)
    151e:	4a08      	ldr	r2, [pc, #32]	; (1540 <log_core_init+0x30>)
    1520:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
    1522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1526:	f000 fb73 	bl	1c10 <log_output_timestamp_freq_set>
}
    152a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    152e:	f7ff bfe7 	b.w	1500 <z_log_msg_init>
    1532:	bf00      	nop
    1534:	20001155 	.word	0x20001155
    1538:	20000884 	.word	0x20000884
    153c:	20000004 	.word	0x20000004
    1540:	00006d93 	.word	0x00006d93

00001544 <z_log_msg_alloc>:
{
    1544:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1546:	2200      	movs	r2, #0
    1548:	4801      	ldr	r0, [pc, #4]	; (1550 <z_log_msg_alloc+0xc>)
    154a:	2300      	movs	r3, #0
    154c:	f005 bae9 	b.w	6b22 <mpsc_pbuf_alloc>
    1550:	2000088c 	.word	0x2000088c

00001554 <z_log_msg_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1554:	4801      	ldr	r0, [pc, #4]	; (155c <z_log_msg_claim+0x8>)
    1556:	f005 bb7d 	b.w	6c54 <mpsc_pbuf_claim>
    155a:	bf00      	nop
    155c:	2000088c 	.word	0x2000088c

00001560 <z_log_msg_free>:
{
    1560:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1562:	4801      	ldr	r0, [pc, #4]	; (1568 <z_log_msg_free+0x8>)
    1564:	f005 bbc2 	b.w	6cec <mpsc_pbuf_free>
    1568:	2000088c 	.word	0x2000088c

0000156c <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    156c:	4801      	ldr	r0, [pc, #4]	; (1574 <z_log_msg_pending+0x8>)
    156e:	f005 bbf1 	b.w	6d54 <mpsc_pbuf_is_pending>
    1572:	bf00      	nop
    1574:	2000088c 	.word	0x2000088c

00001578 <z_impl_log_process>:
{
    1578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!backend_attached) {
    157a:	4b19      	ldr	r3, [pc, #100]	; (15e0 <z_impl_log_process+0x68>)
    157c:	7818      	ldrb	r0, [r3, #0]
    157e:	b370      	cbz	r0, 15de <z_impl_log_process+0x66>
	msg = z_log_msg_claim();
    1580:	f7ff ffe8 	bl	1554 <z_log_msg_claim>
	if (msg) {
    1584:	4605      	mov	r5, r0
    1586:	b1a8      	cbz	r0, 15b4 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1588:	f3bf 8f5b 	dmb	ish
    158c:	4b15      	ldr	r3, [pc, #84]	; (15e4 <z_impl_log_process+0x6c>)
    158e:	e853 2f00 	ldrex	r2, [r3]
    1592:	3a01      	subs	r2, #1
    1594:	e843 2100 	strex	r1, r2, [r3]
    1598:	2900      	cmp	r1, #0
    159a:	d1f8      	bne.n	158e <z_impl_log_process+0x16>
    159c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    15a0:	4c11      	ldr	r4, [pc, #68]	; (15e8 <z_impl_log_process+0x70>)
    15a2:	4e12      	ldr	r6, [pc, #72]	; (15ec <z_impl_log_process+0x74>)
    15a4:	1b36      	subs	r6, r6, r4
    15a6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    15a8:	2700      	movs	r7, #0
    15aa:	42b7      	cmp	r7, r6
    15ac:	db0c      	blt.n	15c8 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
    15ae:	4628      	mov	r0, r5
    15b0:	f7ff ffd6 	bl	1560 <z_log_msg_free>
	return dropped_cnt > 0;
    15b4:	4b0e      	ldr	r3, [pc, #56]	; (15f0 <z_impl_log_process+0x78>)
	if (z_log_dropped_pending()) {
    15b6:	681b      	ldr	r3, [r3, #0]
    15b8:	2b00      	cmp	r3, #0
    15ba:	dd01      	ble.n	15c0 <z_impl_log_process+0x48>
		dropped_notify();
    15bc:	f7ff ff84 	bl	14c8 <dropped_notify>
}
    15c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return z_log_msg_pending();
    15c4:	f7ff bfd2 	b.w	156c <z_log_msg_pending>
	return backend->cb->active;
    15c8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    15ca:	795b      	ldrb	r3, [r3, #5]
    15cc:	b123      	cbz	r3, 15d8 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
    15ce:	6823      	ldr	r3, [r4, #0]
    15d0:	4629      	mov	r1, r5
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	4620      	mov	r0, r4
    15d6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    15d8:	3701      	adds	r7, #1
    15da:	3410      	adds	r4, #16
    15dc:	e7e5      	b.n	15aa <z_impl_log_process+0x32>
}
    15de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15e0:	20001154 	.word	0x20001154
    15e4:	20000880 	.word	0x20000880
    15e8:	00007d0c 	.word	0x00007d0c
    15ec:	00007d1c 	.word	0x00007d1c
    15f0:	20000884 	.word	0x20000884

000015f4 <z_impl_log_panic>:
{
    15f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    15f6:	4f0f      	ldr	r7, [pc, #60]	; (1634 <z_impl_log_panic+0x40>)
    15f8:	783d      	ldrb	r5, [r7, #0]
    15fa:	b97d      	cbnz	r5, 161c <z_impl_log_panic+0x28>
	return __log_backends_end - __log_backends_start;
    15fc:	4c0e      	ldr	r4, [pc, #56]	; (1638 <z_impl_log_panic+0x44>)
    15fe:	4e0f      	ldr	r6, [pc, #60]	; (163c <z_impl_log_panic+0x48>)
	(void)z_log_init(true, false);
    1600:	4629      	mov	r1, r5
    1602:	2001      	movs	r0, #1
    1604:	f7ff feca 	bl	139c <z_log_init>
    1608:	1b36      	subs	r6, r6, r4
    160a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    160c:	42b5      	cmp	r5, r6
    160e:	db06      	blt.n	161e <z_impl_log_panic+0x2a>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1610:	f7ff ffb2 	bl	1578 <z_impl_log_process>
		while (log_process() == true) {
    1614:	2800      	cmp	r0, #0
    1616:	d1fb      	bne.n	1610 <z_impl_log_panic+0x1c>
	panic_mode = true;
    1618:	2301      	movs	r3, #1
    161a:	703b      	strb	r3, [r7, #0]
}
    161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    161e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1620:	795b      	ldrb	r3, [r3, #5]
    1622:	b11b      	cbz	r3, 162c <z_impl_log_panic+0x38>
	backend->api->panic(backend);
    1624:	6823      	ldr	r3, [r4, #0]
    1626:	4620      	mov	r0, r4
    1628:	689b      	ldr	r3, [r3, #8]
    162a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    162c:	3501      	adds	r5, #1
    162e:	3410      	adds	r4, #16
    1630:	e7ec      	b.n	160c <z_impl_log_panic+0x18>
    1632:	bf00      	nop
    1634:	20001155 	.word	0x20001155
    1638:	00007d0c 	.word	0x00007d0c
    163c:	00007d1c 	.word	0x00007d1c

00001640 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1640:	2100      	movs	r1, #0
{
    1642:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1646:	4608      	mov	r0, r1
    1648:	f7ff fea8 	bl	139c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    164c:	4604      	mov	r4, r0
    164e:	b380      	cbz	r0, 16b2 <log_process_thread_func+0x72>
    1650:	f240 6867 	movw	r8, #1639	; 0x667
    1654:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1658:	f004 fb7a 	bl	5d50 <z_impl_z_current_get>
	proc_tid = process_tid;
    165c:	4b1d      	ldr	r3, [pc, #116]	; (16d4 <log_process_thread_func+0x94>)
    165e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1660:	b130      	cbz	r0, 1670 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1662:	4b1d      	ldr	r3, [pc, #116]	; (16d8 <log_process_thread_func+0x98>)
	    process_tid &&
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	2b09      	cmp	r3, #9
    1668:	dd02      	ble.n	1670 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    166a:	481c      	ldr	r0, [pc, #112]	; (16dc <log_process_thread_func+0x9c>)
    166c:	f003 feb4 	bl	53d8 <z_impl_k_sem_give>
	return __log_backends_end - __log_backends_start;
    1670:	4e1b      	ldr	r6, [pc, #108]	; (16e0 <log_process_thread_func+0xa0>)
    1672:	4b1c      	ldr	r3, [pc, #112]	; (16e4 <log_process_thread_func+0xa4>)
	return z_impl_k_sem_take(sem, timeout);
    1674:	f8df b064 	ldr.w	fp, [pc, #100]	; 16dc <log_process_thread_func+0x9c>
    1678:	1af6      	subs	r6, r6, r3
    167a:	1136      	asrs	r6, r6, #4
    167c:	2700      	movs	r7, #0
		if (activate_mask) {
    167e:	b144      	cbz	r4, 1692 <log_process_thread_func+0x52>
			activate_mask = activate_foreach_backend(activate_mask);
    1680:	4620      	mov	r0, r4
    1682:	f7ff fe25 	bl	12d0 <activate_foreach_backend>
			if (!activate_mask) {
    1686:	4604      	mov	r4, r0
    1688:	b918      	cbnz	r0, 1692 <log_process_thread_func+0x52>
				timeout = K_FOREVER;
    168a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    168e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1692:	f7ff ff71 	bl	1578 <z_impl_log_process>
		if (log_process() == false) {
    1696:	4605      	mov	r5, r0
    1698:	b948      	cbnz	r0, 16ae <log_process_thread_func+0x6e>
			if (processed_any) {
    169a:	b11f      	cbz	r7, 16a4 <log_process_thread_func+0x64>
    169c:	4f11      	ldr	r7, [pc, #68]	; (16e4 <log_process_thread_func+0xa4>)
	for (int i = 0; i < log_backend_count_get(); i++) {
    169e:	4682      	mov	sl, r0
    16a0:	45b2      	cmp	sl, r6
    16a2:	db0b      	blt.n	16bc <log_process_thread_func+0x7c>
    16a4:	4642      	mov	r2, r8
    16a6:	464b      	mov	r3, r9
    16a8:	4658      	mov	r0, fp
    16aa:	f003 feb5 	bl	5418 <z_impl_k_sem_take>
    16ae:	462f      	mov	r7, r5
    16b0:	e7e5      	b.n	167e <log_process_thread_func+0x3e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    16b2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    16b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    16ba:	e7cd      	b.n	1658 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    16bc:	683b      	ldr	r3, [r7, #0]
    16be:	699b      	ldr	r3, [r3, #24]
    16c0:	b11b      	cbz	r3, 16ca <log_process_thread_func+0x8a>
		backend->api->notify(backend, event, arg);
    16c2:	2200      	movs	r2, #0
    16c4:	4611      	mov	r1, r2
    16c6:	4638      	mov	r0, r7
    16c8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    16ca:	f10a 0a01 	add.w	sl, sl, #1
    16ce:	3710      	adds	r7, #16
    16d0:	e7e6      	b.n	16a0 <log_process_thread_func+0x60>
    16d2:	bf00      	nop
    16d4:	200008c4 	.word	0x200008c4
    16d8:	20000880 	.word	0x20000880
    16dc:	200001bc 	.word	0x200001bc
    16e0:	00007d1c 	.word	0x00007d1c
    16e4:	00007d0c 	.word	0x00007d0c

000016e8 <z_log_msg_commit>:
	msg->hdr.timestamp = timestamp_func();
    16e8:	4b21      	ldr	r3, [pc, #132]	; (1770 <z_log_msg_commit+0x88>)
{
    16ea:	b513      	push	{r0, r1, r4, lr}
	msg->hdr.timestamp = timestamp_func();
    16ec:	681b      	ldr	r3, [r3, #0]
{
    16ee:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    16f0:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    16f2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    16f4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, &m->buf);
    16f6:	481f      	ldr	r0, [pc, #124]	; (1774 <z_log_msg_commit+0x8c>)
    16f8:	f005 fa8c 	bl	6c14 <mpsc_pbuf_commit>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    16fc:	f3bf 8f5b 	dmb	ish
    1700:	4b1d      	ldr	r3, [pc, #116]	; (1778 <z_log_msg_commit+0x90>)
    1702:	e853 2f00 	ldrex	r2, [r3]
    1706:	1c51      	adds	r1, r2, #1
    1708:	e843 1000 	strex	r0, r1, [r3]
    170c:	2800      	cmp	r0, #0
    170e:	d1f8      	bne.n	1702 <z_log_msg_commit+0x1a>
    1710:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1714:	4b19      	ldr	r3, [pc, #100]	; (177c <z_log_msg_commit+0x94>)
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	b17b      	cbz	r3, 173a <z_log_msg_commit+0x52>
    171a:	f04f 0320 	mov.w	r3, #32
    171e:	f3ef 8411 	mrs	r4, BASEPRI
    1722:	f383 8812 	msr	BASEPRI_MAX, r3
    1726:	f3bf 8f6f 	isb	sy
    172a:	f7ff ff25 	bl	1578 <z_impl_log_process>
	__asm__ volatile(
    172e:	f384 8811 	msr	BASEPRI, r4
    1732:	f3bf 8f6f 	isb	sy
}
    1736:	b002      	add	sp, #8
    1738:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    173a:	4b11      	ldr	r3, [pc, #68]	; (1780 <z_log_msg_commit+0x98>)
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	2b00      	cmp	r3, #0
    1740:	d0f9      	beq.n	1736 <z_log_msg_commit+0x4e>
		if (cnt == 0) {
    1742:	b952      	cbnz	r2, 175a <z_log_msg_commit+0x72>
	z_impl_k_timer_start(timer, duration, period);
    1744:	2200      	movs	r2, #0
    1746:	2300      	movs	r3, #0
    1748:	e9cd 2300 	strd	r2, r3, [sp]
    174c:	480d      	ldr	r0, [pc, #52]	; (1784 <z_log_msg_commit+0x9c>)
    174e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1752:	2300      	movs	r3, #0
    1754:	f004 fd32 	bl	61bc <z_impl_k_timer_start>
    1758:	e7ed      	b.n	1736 <z_log_msg_commit+0x4e>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    175a:	2a0a      	cmp	r2, #10
    175c:	d1eb      	bne.n	1736 <z_log_msg_commit+0x4e>
	z_impl_k_timer_stop(timer);
    175e:	4809      	ldr	r0, [pc, #36]	; (1784 <z_log_msg_commit+0x9c>)
    1760:	f006 f941 	bl	79e6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1764:	4808      	ldr	r0, [pc, #32]	; (1788 <z_log_msg_commit+0xa0>)
}
    1766:	b002      	add	sp, #8
    1768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    176c:	f003 be34 	b.w	53d8 <z_impl_k_sem_give>
    1770:	20000004 	.word	0x20000004
    1774:	2000088c 	.word	0x2000088c
    1778:	20000880 	.word	0x20000880
    177c:	20001155 	.word	0x20001155
    1780:	200008c4 	.word	0x200008c4
    1784:	200005d0 	.word	0x200005d0
    1788:	200001bc 	.word	0x200001bc

0000178c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    178c:	4a04      	ldr	r2, [pc, #16]	; (17a0 <log_source_name_get+0x14>)
    178e:	4b05      	ldr	r3, [pc, #20]	; (17a4 <log_source_name_get+0x18>)
    1790:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1792:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1796:	bf34      	ite	cc
    1798:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    179c:	2000      	movcs	r0, #0
}
    179e:	4770      	bx	lr
    17a0:	00007cac 	.word	0x00007cac
    17a4:	00007d0c 	.word	0x00007d0c

000017a8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    17a8:	4a05      	ldr	r2, [pc, #20]	; (17c0 <log_backend_enable+0x18>)
	backend->cb->id = id;
    17aa:	6843      	ldr	r3, [r0, #4]
    17ac:	1a80      	subs	r0, r0, r2
    17ae:	1100      	asrs	r0, r0, #4
    17b0:	3001      	adds	r0, #1
	backend->cb->active = true;
    17b2:	2201      	movs	r2, #1

	log_backend_id_set(backend, id);
    17b4:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    17b6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    17b8:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    17ba:	f7ff be49 	b.w	1450 <z_log_notify_backend_enabled>
    17be:	bf00      	nop
    17c0:	00007d0c 	.word	0x00007d0c

000017c4 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    17c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    17c8:	f3c1 45cb 	ubfx	r5, r1, #19, #12
    17cc:	f3c1 2649 	ubfx	r6, r1, #9, #10
    17d0:	b08d      	sub	sp, #52	; 0x34
    17d2:	4681      	mov	r9, r0
    17d4:	460c      	mov	r4, r1
    17d6:	4690      	mov	r8, r2
    17d8:	469a      	mov	sl, r3
    17da:	3517      	adds	r5, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    17dc:	2e00      	cmp	r6, #0
    17de:	d03b      	beq.n	1858 <z_impl_z_log_msg_static_create+0x94>
	return cbprintf_package_convert(in_packaged, in_len,
    17e0:	2302      	movs	r3, #2
    17e2:	a809      	add	r0, sp, #36	; 0x24
    17e4:	f04f 0b04 	mov.w	fp, #4
    17e8:	af07      	add	r7, sp, #28
	struct z_cbprintf_buf_desc buf_desc = {
    17ea:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    17ec:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
    17ee:	9300      	str	r3, [sp, #0]
    17f0:	f8cd b008 	str.w	fp, [sp, #8]
    17f4:	4603      	mov	r3, r0
    17f6:	9701      	str	r7, [sp, #4]
    17f8:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
    17fa:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
    17fe:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    1800:	9605      	str	r6, [sp, #20]
    1802:	f7fe ff11 	bl	628 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    1806:	f3c0 0309 	ubfx	r3, r0, #0, #10
    180a:	1958      	adds	r0, r3, r5
    180c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1810:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    1812:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1814:	f363 2452 	bfi	r4, r3, #9, #10
    1818:	9304      	str	r3, [sp, #16]
    181a:	f7ff fe93 	bl	1544 <z_log_msg_alloc>
		if (msg) {
    181e:	4605      	mov	r5, r0
    1820:	b178      	cbz	r0, 1842 <z_impl_z_log_msg_static_create+0x7e>
	struct z_cbprintf_buf_desc buf_desc = {
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	930a      	str	r3, [sp, #40]	; 0x28
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    1826:	3010      	adds	r0, #16
    1828:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    182a:	2302      	movs	r3, #2
	struct z_cbprintf_buf_desc buf_desc = {
    182c:	9009      	str	r0, [sp, #36]	; 0x24
    182e:	920b      	str	r2, [sp, #44]	; 0x2c
	return cbprintf_package_convert(in_packaged, in_len,
    1830:	9300      	str	r3, [sp, #0]
    1832:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    1836:	4a0c      	ldr	r2, [pc, #48]	; (1868 <z_impl_z_log_msg_static_create+0xa4>)
    1838:	9905      	ldr	r1, [sp, #20]
    183a:	ab09      	add	r3, sp, #36	; 0x24
    183c:	4640      	mov	r0, r8
    183e:	f7fe fef3 	bl	628 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    1842:	f366 2452 	bfi	r4, r6, #9, #10
    1846:	4653      	mov	r3, sl
    1848:	4622      	mov	r2, r4
    184a:	4649      	mov	r1, r9
    184c:	4628      	mov	r0, r5
}
    184e:	b00d      	add	sp, #52	; 0x34
    1850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    1854:	f005 babb 	b.w	6dce <z_log_msg_finalize>
    1858:	f025 0007 	bic.w	r0, r5, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    185c:	0880      	lsrs	r0, r0, #2
    185e:	f7ff fe71 	bl	1544 <z_log_msg_alloc>
    1862:	4605      	mov	r5, r0
    1864:	e7ed      	b.n	1842 <z_impl_z_log_msg_static_create+0x7e>
    1866:	bf00      	nop
    1868:	00006da1 	.word	0x00006da1

0000186c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    186c:	b40e      	push	{r1, r2, r3}
    186e:	b503      	push	{r0, r1, lr}
    1870:	ab03      	add	r3, sp, #12
    1872:	4601      	mov	r1, r0
    1874:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1878:	4804      	ldr	r0, [pc, #16]	; (188c <print_formatted+0x20>)
	va_start(args, fmt);
    187a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    187c:	f005 facf 	bl	6e1e <cbvprintf>
	va_end(args);

	return length;
}
    1880:	b002      	add	sp, #8
    1882:	f85d eb04 	ldr.w	lr, [sp], #4
    1886:	b003      	add	sp, #12
    1888:	4770      	bx	lr
    188a:	bf00      	nop
    188c:	00006e47 	.word	0x00006e47

00001890 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1894:	b089      	sub	sp, #36	; 0x24
    1896:	469a      	mov	sl, r3
    1898:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    189c:	9304      	str	r3, [sp, #16]
    189e:	e9dd 8313 	ldrd	r8, r3, [sp, #76]	; 0x4c
    18a2:	9306      	str	r3, [sp, #24]
    18a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    18a6:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    18a8:	9b04      	ldr	r3, [sp, #16]
{
    18aa:	9e16      	ldr	r6, [sp, #88]	; 0x58
    18ac:	4604      	mov	r4, r0
    18ae:	460f      	mov	r7, r1
    18b0:	4693      	mov	fp, r2
	if (!raw_string) {
    18b2:	2b00      	cmp	r3, #0
    18b4:	f000 8112 	beq.w	1adc <log_output_process+0x24c>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    18b8:	f006 0308 	and.w	r3, r6, #8
    18bc:	9307      	str	r3, [sp, #28]
	const char *tag = z_log_get_tag();
    18be:	f005 fa6d 	bl	6d9c <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    18c2:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
    18c6:	4602      	mov	r2, r0
    18c8:	2800      	cmp	r0, #0
    18ca:	f000 80b1 	beq.w	1a30 <log_output_process+0x1a0>
		length += print_formatted(output, "%s ", tag);
    18ce:	4989      	ldr	r1, [pc, #548]	; (1af4 <log_output_process+0x264>)
    18d0:	4620      	mov	r0, r4
    18d2:	f7ff ffcb 	bl	186c <print_formatted>
    18d6:	4681      	mov	r9, r0
	if (stamp) {
    18d8:	b14d      	cbz	r5, 18ee <log_output_process+0x5e>
	if (!format) {
    18da:	f016 0f44 	tst.w	r6, #68	; 0x44
    18de:	f040 80a9 	bne.w	1a34 <log_output_process+0x1a4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    18e2:	4985      	ldr	r1, [pc, #532]	; (1af8 <log_output_process+0x268>)
    18e4:	463a      	mov	r2, r7
    18e6:	4620      	mov	r0, r4
    18e8:	f7ff ffc0 	bl	186c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    18ec:	4481      	add	r9, r0
	if (color) {
    18ee:	f006 0301 	and.w	r3, r6, #1
    18f2:	b15b      	cbz	r3, 190c <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    18f4:	4b81      	ldr	r3, [pc, #516]	; (1afc <log_output_process+0x26c>)
    18f6:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    18f8:	4981      	ldr	r1, [pc, #516]	; (1b00 <log_output_process+0x270>)
		const char *log_color = start && (colors[level] != NULL) ?
    18fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    18fe:	4b81      	ldr	r3, [pc, #516]	; (1b04 <log_output_process+0x274>)
    1900:	4620      	mov	r0, r4
    1902:	2a00      	cmp	r2, #0
    1904:	bf08      	it	eq
    1906:	461a      	moveq	r2, r3
    1908:	f7ff ffb0 	bl	186c <print_formatted>
	if (level_on) {
    190c:	f006 0308 	and.w	r3, r6, #8
    1910:	2b00      	cmp	r3, #0
    1912:	f000 80bb 	beq.w	1a8c <log_output_process+0x1fc>
		total += print_formatted(output, "<%s> ", severity[level]);
    1916:	4b7c      	ldr	r3, [pc, #496]	; (1b08 <log_output_process+0x278>)
    1918:	9a04      	ldr	r2, [sp, #16]
    191a:	497c      	ldr	r1, [pc, #496]	; (1b0c <log_output_process+0x27c>)
    191c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1920:	4620      	mov	r0, r4
    1922:	f7ff ffa3 	bl	186c <print_formatted>
    1926:	4605      	mov	r5, r0
	if (domain) {
    1928:	f1bb 0f00 	cmp.w	fp, #0
    192c:	d005      	beq.n	193a <log_output_process+0xaa>
		total += print_formatted(output, "%s/", domain);
    192e:	4978      	ldr	r1, [pc, #480]	; (1b10 <log_output_process+0x280>)
    1930:	465a      	mov	r2, fp
    1932:	4620      	mov	r0, r4
    1934:	f7ff ff9a 	bl	186c <print_formatted>
    1938:	4405      	add	r5, r0
	if (source) {
    193a:	f1ba 0f00 	cmp.w	sl, #0
    193e:	d005      	beq.n	194c <log_output_process+0xbc>
		total += print_formatted(output,
    1940:	4974      	ldr	r1, [pc, #464]	; (1b14 <log_output_process+0x284>)
    1942:	4652      	mov	r2, sl
    1944:	4620      	mov	r0, r4
    1946:	f7ff ff91 	bl	186c <print_formatted>
    194a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    194c:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
    194e:	f1b8 0f00 	cmp.w	r8, #0
    1952:	f000 80cb 	beq.w	1aec <log_output_process+0x25c>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1956:	4870      	ldr	r0, [pc, #448]	; (1b18 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1958:	4970      	ldr	r1, [pc, #448]	; (1b1c <log_output_process+0x28c>)
    195a:	4643      	mov	r3, r8
    195c:	4622      	mov	r2, r4
    195e:	f004 fe7f 	bl	6660 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1962:	9b05      	ldr	r3, [sp, #20]
    1964:	2b00      	cmp	r3, #0
    1966:	d04b      	beq.n	1a00 <log_output_process+0x170>
		print_formatted(output, " ");
    1968:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 1b20 <log_output_process+0x290>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    196c:	9f05      	ldr	r7, [sp, #20]
    196e:	2f10      	cmp	r7, #16
    1970:	bf28      	it	cs
    1972:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1974:	06f3      	lsls	r3, r6, #27
    1976:	d406      	bmi.n	1986 <log_output_process+0xf6>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1978:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
    197a:	bf4c      	ite	mi
    197c:	4969      	ldrmi	r1, [pc, #420]	; (1b24 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
    197e:	496a      	ldrpl	r1, [pc, #424]	; (1b28 <log_output_process+0x298>)
    1980:	4620      	mov	r0, r4
    1982:	f7ff ff73 	bl	186c <print_formatted>
		prefix_offset = 0;
    1986:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
    198a:	4555      	cmp	r5, sl
    198c:	f300 8084 	bgt.w	1a98 <log_output_process+0x208>
			print_formatted(output, "   ");
    1990:	f8df a198 	ldr.w	sl, [pc, #408]	; 1b2c <log_output_process+0x29c>
			print_formatted(output, "%02x ", data[i]);
    1994:	f8df b198 	ldr.w	fp, [pc, #408]	; 1b30 <log_output_process+0x2a0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1998:	f04f 0900 	mov.w	r9, #0
		if (i < length) {
    199c:	45b9      	cmp	r9, r7
    199e:	f080 808b 	bcs.w	1ab8 <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    19a2:	9b06      	ldr	r3, [sp, #24]
    19a4:	4659      	mov	r1, fp
    19a6:	f813 2009 	ldrb.w	r2, [r3, r9]
    19aa:	4620      	mov	r0, r4
    19ac:	f7ff ff5e 	bl	186c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19b0:	f109 0901 	add.w	r9, r9, #1
    19b4:	f1b9 0f10 	cmp.w	r9, #16
    19b8:	d175      	bne.n	1aa6 <log_output_process+0x216>
	print_formatted(output, "|");
    19ba:	495e      	ldr	r1, [pc, #376]	; (1b34 <log_output_process+0x2a4>)
			print_formatted(output, "%c",
    19bc:	f8df a178 	ldr.w	sl, [pc, #376]	; 1b38 <log_output_process+0x2a8>
	print_formatted(output, "|");
    19c0:	4620      	mov	r0, r4
    19c2:	f7ff ff53 	bl	186c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19c6:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
    19ca:	455f      	cmp	r7, fp
    19cc:	f240 8081 	bls.w	1ad2 <log_output_process+0x242>
			char c = (char)data[i];
    19d0:	9b06      	ldr	r3, [sp, #24]
    19d2:	f813 200b 	ldrb.w	r2, [r3, fp]
	return (int)((((unsigned)c) >= ' ') &&
    19d6:	f1a2 0320 	sub.w	r3, r2, #32
    19da:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    19dc:	bf28      	it	cs
    19de:	222e      	movcs	r2, #46	; 0x2e
    19e0:	4651      	mov	r1, sl
    19e2:	4620      	mov	r0, r4
    19e4:	f7ff ff42 	bl	186c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    19e8:	f10b 0b01 	add.w	fp, fp, #1
    19ec:	f1bb 0f10 	cmp.w	fp, #16
    19f0:	d167      	bne.n	1ac2 <log_output_process+0x232>
		data += length;
    19f2:	9b06      	ldr	r3, [sp, #24]
    19f4:	443b      	add	r3, r7
    19f6:	9306      	str	r3, [sp, #24]
	} while (len);
    19f8:	9b05      	ldr	r3, [sp, #20]
    19fa:	1bdb      	subs	r3, r3, r7
    19fc:	9305      	str	r3, [sp, #20]
    19fe:	d1b5      	bne.n	196c <log_output_process+0xdc>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1a00:	9b04      	ldr	r3, [sp, #16]
    1a02:	b17b      	cbz	r3, 1a24 <log_output_process+0x194>
	if (color) {
    1a04:	07f1      	lsls	r1, r6, #31
    1a06:	d504      	bpl.n	1a12 <log_output_process+0x182>
		print_formatted(output, "%s", log_color);
    1a08:	4a3e      	ldr	r2, [pc, #248]	; (1b04 <log_output_process+0x274>)
    1a0a:	493d      	ldr	r1, [pc, #244]	; (1b00 <log_output_process+0x270>)
    1a0c:	4620      	mov	r0, r4
    1a0e:	f7ff ff2d 	bl	186c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a12:	06f2      	lsls	r2, r6, #27
    1a14:	d406      	bmi.n	1a24 <log_output_process+0x194>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a16:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\n");
    1a18:	bf4c      	ite	mi
    1a1a:	4942      	ldrmi	r1, [pc, #264]	; (1b24 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
    1a1c:	4942      	ldrpl	r1, [pc, #264]	; (1b28 <log_output_process+0x298>)
    1a1e:	4620      	mov	r0, r4
    1a20:	f7ff ff24 	bl	186c <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1a24:	4620      	mov	r0, r4
}
    1a26:	b009      	add	sp, #36	; 0x24
    1a28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1a2c:	f005 b9fe 	b.w	6e2c <log_output_flush>
	uint32_t length = 0U;
    1a30:	4681      	mov	r9, r0
    1a32:	e751      	b.n	18d8 <log_output_process+0x48>
	} else if (freq != 0U) {
    1a34:	4b41      	ldr	r3, [pc, #260]	; (1b3c <log_output_process+0x2ac>)
    1a36:	6818      	ldr	r0, [r3, #0]
    1a38:	2800      	cmp	r0, #0
    1a3a:	f43f af57 	beq.w	18ec <log_output_process+0x5c>
		timestamp /= timestamp_div;
    1a3e:	4b40      	ldr	r3, [pc, #256]	; (1b40 <log_output_process+0x2b0>)
		ms = (remainder * 1000U) / freq;
    1a40:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1a44:	6819      	ldr	r1, [r3, #0]
    1a46:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
    1a4a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    1a4e:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
    1a52:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
    1a56:	fb0e f707 	mul.w	r7, lr, r7
    1a5a:	fbb1 f2f5 	udiv	r2, r1, r5
    1a5e:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
    1a62:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a64:	fbb7 fcf0 	udiv	ip, r7, r0
		mins = seconds / 60U;
    1a68:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a6c:	fb00 771c 	mls	r7, r0, ip, r7
				length = print_formatted(output,
    1a70:	fb01 5113 	mls	r1, r1, r3, r5
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a74:	fb0e f707 	mul.w	r7, lr, r7
				length = print_formatted(output,
    1a78:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a7a:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
    1a7e:	4931      	ldr	r1, [pc, #196]	; (1b44 <log_output_process+0x2b4>)
    1a80:	e9cd c701 	strd	ip, r7, [sp, #4]
    1a84:	4620      	mov	r0, r4
    1a86:	f7ff fef1 	bl	186c <print_formatted>
    1a8a:	e72f      	b.n	18ec <log_output_process+0x5c>
	int total = 0;
    1a8c:	f006 0508 	and.w	r5, r6, #8
    1a90:	e74a      	b.n	1928 <log_output_process+0x98>
		prefix_offset = 0;
    1a92:	9d04      	ldr	r5, [sp, #16]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1a94:	482c      	ldr	r0, [pc, #176]	; (1b48 <log_output_process+0x2b8>)
    1a96:	e75f      	b.n	1958 <log_output_process+0xc8>
		print_formatted(output, " ");
    1a98:	4641      	mov	r1, r8
    1a9a:	4620      	mov	r0, r4
    1a9c:	f7ff fee6 	bl	186c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1aa0:	f10a 0a01 	add.w	sl, sl, #1
    1aa4:	e771      	b.n	198a <log_output_process+0xfa>
		if (i > 0 && !(i % 8)) {
    1aa6:	f019 0f07 	tst.w	r9, #7
    1aaa:	f47f af77 	bne.w	199c <log_output_process+0x10c>
			print_formatted(output, " ");
    1aae:	4641      	mov	r1, r8
    1ab0:	4620      	mov	r0, r4
    1ab2:	f7ff fedb 	bl	186c <print_formatted>
    1ab6:	e771      	b.n	199c <log_output_process+0x10c>
			print_formatted(output, "   ");
    1ab8:	4651      	mov	r1, sl
    1aba:	4620      	mov	r0, r4
    1abc:	f7ff fed6 	bl	186c <print_formatted>
    1ac0:	e776      	b.n	19b0 <log_output_process+0x120>
		if (i > 0 && !(i % 8)) {
    1ac2:	f01b 0f07 	tst.w	fp, #7
    1ac6:	d180      	bne.n	19ca <log_output_process+0x13a>
			print_formatted(output, " ");
    1ac8:	4641      	mov	r1, r8
    1aca:	4620      	mov	r0, r4
    1acc:	f7ff fece 	bl	186c <print_formatted>
    1ad0:	e77b      	b.n	19ca <log_output_process+0x13a>
			print_formatted(output, " ");
    1ad2:	4641      	mov	r1, r8
    1ad4:	4620      	mov	r0, r4
    1ad6:	f7ff fec9 	bl	186c <print_formatted>
    1ada:	e785      	b.n	19e8 <log_output_process+0x158>
	if (package) {
    1adc:	f1b8 0f00 	cmp.w	r8, #0
    1ae0:	d1d7      	bne.n	1a92 <log_output_process+0x202>
	if (data_len) {
    1ae2:	9b05      	ldr	r3, [sp, #20]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d09d      	beq.n	1a24 <log_output_process+0x194>
		prefix_offset = 0;
    1ae8:	9d04      	ldr	r5, [sp, #16]
    1aea:	e73d      	b.n	1968 <log_output_process+0xd8>
	if (data_len) {
    1aec:	9b05      	ldr	r3, [sp, #20]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d088      	beq.n	1a04 <log_output_process+0x174>
    1af2:	e739      	b.n	1968 <log_output_process+0xd8>
    1af4:	00008105 	.word	0x00008105
    1af8:	00008109 	.word	0x00008109
    1afc:	00007d50 	.word	0x00007d50
    1b00:	0000812e 	.word	0x0000812e
    1b04:	00008100 	.word	0x00008100
    1b08:	00007d64 	.word	0x00007d64
    1b0c:	00008131 	.word	0x00008131
    1b10:	00008137 	.word	0x00008137
    1b14:	0000813b 	.word	0x0000813b
    1b18:	00006e47 	.word	0x00006e47
    1b1c:	00006e1f 	.word	0x00006e1f
    1b20:	0000814b 	.word	0x0000814b
    1b24:	00008141 	.word	0x00008141
    1b28:	00008140 	.word	0x00008140
    1b2c:	00008149 	.word	0x00008149
    1b30:	00008143 	.word	0x00008143
    1b34:	0000814d 	.word	0x0000814d
    1b38:	0000814f 	.word	0x0000814f
    1b3c:	200008c8 	.word	0x200008c8
    1b40:	200008cc 	.word	0x200008cc
    1b44:	00008112 	.word	0x00008112
    1b48:	00006e7d 	.word	0x00006e7d

00001b4c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    1b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    1b50:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
    1b52:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    1b54:	688e      	ldr	r6, [r1, #8]
    1b56:	b086      	sub	sp, #24
    1b58:	4605      	mov	r5, r0
    1b5a:	460c      	mov	r4, r1
    1b5c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    1b5e:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
    1b62:	b15b      	cbz	r3, 1b7c <log_output_msg_process+0x30>
    1b64:	4913      	ldr	r1, [pc, #76]	; (1bb4 <log_output_msg_process+0x68>)
    1b66:	1a5b      	subs	r3, r3, r1
    1b68:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1b6c:	2900      	cmp	r1, #0
    1b6e:	db1f      	blt.n	1bb0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    1b70:	7820      	ldrb	r0, [r4, #0]
    1b72:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1b76:	f7ff fe09 	bl	178c <log_source_name_get>
    1b7a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    1b7c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    1b7e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    1b80:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    1b84:	9700      	str	r7, [sp, #0]
    1b86:	f3c2 2249 	ubfx	r2, r2, #9, #10
    1b8a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    1b8c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    1b90:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    1b94:	bf08      	it	eq
    1b96:	2100      	moveq	r1, #0
    1b98:	e9cd 0803 	strd	r0, r8, [sp, #12]
    1b9c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1ba0:	2200      	movs	r2, #0
    1ba2:	4631      	mov	r1, r6
    1ba4:	4628      	mov	r0, r5
    1ba6:	f7ff fe73 	bl	1890 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    1baa:	b006      	add	sp, #24
    1bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1bb0:	2300      	movs	r3, #0
    1bb2:	e7e3      	b.n	1b7c <log_output_msg_process+0x30>
    1bb4:	00007cac 	.word	0x00007cac

00001bb8 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bba:	f242 730f 	movw	r3, #9999	; 0x270f
    1bbe:	428b      	cmp	r3, r1
    1bc0:	bf28      	it	cs
    1bc2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1bc4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bc6:	4a0f      	ldr	r2, [pc, #60]	; (1c04 <log_output_dropped_process+0x4c>)
{
    1bc8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bca:	2105      	movs	r1, #5
    1bcc:	4668      	mov	r0, sp
    1bce:	f004 fdb4 	bl	673a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1bd2:	6863      	ldr	r3, [r4, #4]
    1bd4:	490c      	ldr	r1, [pc, #48]	; (1c08 <log_output_dropped_process+0x50>)
    1bd6:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bd8:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1bda:	220b      	movs	r2, #11
    1bdc:	4628      	mov	r0, r5
    1bde:	f005 f911 	bl	6e04 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1be2:	6863      	ldr	r3, [r4, #4]
    1be4:	4632      	mov	r2, r6
    1be6:	4669      	mov	r1, sp
    1be8:	4628      	mov	r0, r5
    1bea:	685b      	ldr	r3, [r3, #4]
    1bec:	f005 f90a 	bl	6e04 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1bf0:	6863      	ldr	r3, [r4, #4]
    1bf2:	4906      	ldr	r1, [pc, #24]	; (1c0c <log_output_dropped_process+0x54>)
    1bf4:	685b      	ldr	r3, [r3, #4]
    1bf6:	221b      	movs	r2, #27
    1bf8:	4628      	mov	r0, r5
    1bfa:	f005 f903 	bl	6e04 <buffer_write>
		     output->control_block->ctx);
}
    1bfe:	b002      	add	sp, #8
    1c00:	bd70      	pop	{r4, r5, r6, pc}
    1c02:	bf00      	nop
    1c04:	0000882e 	.word	0x0000882e
    1c08:	0000818e 	.word	0x0000818e
    1c0c:	00008172 	.word	0x00008172

00001c10 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1c10:	4a08      	ldr	r2, [pc, #32]	; (1c34 <log_output_timestamp_freq_set+0x24>)
{
    1c12:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1c14:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1c16:	4c08      	ldr	r4, [pc, #32]	; (1c38 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1c18:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1c1a:	2100      	movs	r1, #0
    1c1c:	42a0      	cmp	r0, r4
    1c1e:	d804      	bhi.n	1c2a <log_output_timestamp_freq_set+0x1a>
    1c20:	b101      	cbz	r1, 1c24 <log_output_timestamp_freq_set+0x14>
    1c22:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1c24:	4b05      	ldr	r3, [pc, #20]	; (1c3c <log_output_timestamp_freq_set+0x2c>)
    1c26:	6018      	str	r0, [r3, #0]
}
    1c28:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1c2a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c2c:	005b      	lsls	r3, r3, #1
    1c2e:	2101      	movs	r1, #1
    1c30:	e7f4      	b.n	1c1c <log_output_timestamp_freq_set+0xc>
    1c32:	bf00      	nop
    1c34:	200008cc 	.word	0x200008cc
    1c38:	000f4240 	.word	0x000f4240
    1c3c:	200008c8 	.word	0x200008c8

00001c40 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    1c42:	4f07      	ldr	r7, [pc, #28]	; (1c60 <char_out+0x20>)
{
    1c44:	460d      	mov	r5, r1
    1c46:	4604      	mov	r4, r0
    1c48:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    1c4a:	42b4      	cmp	r4, r6
    1c4c:	d101      	bne.n	1c52 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1c4e:	4628      	mov	r0, r5
    1c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    1c52:	6838      	ldr	r0, [r7, #0]
    1c54:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1c58:	6883      	ldr	r3, [r0, #8]
    1c5a:	685b      	ldr	r3, [r3, #4]
    1c5c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1c5e:	e7f4      	b.n	1c4a <char_out+0xa>
    1c60:	200008e8 	.word	0x200008e8

00001c64 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1c64:	4b01      	ldr	r3, [pc, #4]	; (1c6c <format_set+0x8>)
	return 0;
}
    1c66:	2000      	movs	r0, #0
	log_format_current = log_type;
    1c68:	6019      	str	r1, [r3, #0]
}
    1c6a:	4770      	bx	lr
    1c6c:	200008d8 	.word	0x200008d8

00001c70 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1c70:	4b01      	ldr	r3, [pc, #4]	; (1c78 <log_backend_uart_init+0x8>)
    1c72:	4a02      	ldr	r2, [pc, #8]	; (1c7c <log_backend_uart_init+0xc>)
    1c74:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1c76:	4770      	bx	lr
    1c78:	200008e8 	.word	0x200008e8
    1c7c:	00007af4 	.word	0x00007af4

00001c80 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    1c80:	4b02      	ldr	r3, [pc, #8]	; (1c8c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1c82:	4803      	ldr	r0, [pc, #12]	; (1c90 <panic+0x10>)
    1c84:	2201      	movs	r2, #1
    1c86:	701a      	strb	r2, [r3, #0]
    1c88:	f005 b8d0 	b.w	6e2c <log_output_flush>
    1c8c:	20001156 	.word	0x20001156
    1c90:	00007d94 	.word	0x00007d94

00001c94 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1c94:	4801      	ldr	r0, [pc, #4]	; (1c9c <dropped+0x8>)
    1c96:	f7ff bf8f 	b.w	1bb8 <log_output_dropped_process>
    1c9a:	bf00      	nop
    1c9c:	00007d94 	.word	0x00007d94

00001ca0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ca0:	4b06      	ldr	r3, [pc, #24]	; (1cbc <process+0x1c>)
{
    1ca2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ca4:	6818      	ldr	r0, [r3, #0]
{
    1ca6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ca8:	f7ff fbcc 	bl	1444 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1cac:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cae:	4603      	mov	r3, r0
}
    1cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1cb4:	4802      	ldr	r0, [pc, #8]	; (1cc0 <process+0x20>)
    1cb6:	220f      	movs	r2, #15
    1cb8:	4718      	bx	r3
    1cba:	bf00      	nop
    1cbc:	200008d8 	.word	0x200008d8
    1cc0:	00007d94 	.word	0x00007d94

00001cc4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc8:	4605      	mov	r5, r0
	__asm__ volatile(
    1cca:	f04f 0320 	mov.w	r3, #32
    1cce:	f3ef 8611 	mrs	r6, BASEPRI
    1cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    1cd6:	f3bf 8f6f 	isb	sy
	return list->head;
    1cda:	4b0e      	ldr	r3, [pc, #56]	; (1d14 <pm_state_notify+0x50>)
    1cdc:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1cde:	b19c      	cbz	r4, 1d08 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1ce0:	4f0d      	ldr	r7, [pc, #52]	; (1d18 <pm_state_notify+0x54>)
    1ce2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1d1c <pm_state_notify+0x58>
    1ce6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1cea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1cee:	2d00      	cmp	r5, #0
    1cf0:	bf08      	it	eq
    1cf2:	4613      	moveq	r3, r2
		if (callback) {
    1cf4:	b12b      	cbz	r3, 1d02 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1cf6:	f898 2014 	ldrb.w	r2, [r8, #20]
    1cfa:	fb09 f202 	mul.w	r2, r9, r2
    1cfe:	5cb8      	ldrb	r0, [r7, r2]
    1d00:	4798      	blx	r3
	return node->next;
    1d02:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1d04:	2c00      	cmp	r4, #0
    1d06:	d1f0      	bne.n	1cea <pm_state_notify+0x26>
	__asm__ volatile(
    1d08:	f386 8811 	msr	BASEPRI, r6
    1d0c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d14:	200008ec 	.word	0x200008ec
    1d18:	20000900 	.word	0x20000900
    1d1c:	20000f3c 	.word	0x20000f3c

00001d20 <pm_system_resume>:

void pm_system_resume(void)
{
    1d20:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    1d22:	4b1a      	ldr	r3, [pc, #104]	; (1d8c <pm_system_resume+0x6c>)
    1d24:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d26:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1d2a:	f004 031f 	and.w	r3, r4, #31
    1d2e:	2201      	movs	r2, #1
    1d30:	409a      	lsls	r2, r3
    1d32:	4b17      	ldr	r3, [pc, #92]	; (1d90 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1d34:	0961      	lsrs	r1, r4, #5
    1d36:	43d0      	mvns	r0, r2
    1d38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1d3c:	e853 1f00 	ldrex	r1, [r3]
    1d40:	ea01 0500 	and.w	r5, r1, r0
    1d44:	e843 5c00 	strex	ip, r5, [r3]
    1d48:	f1bc 0f00 	cmp.w	ip, #0
    1d4c:	d1f6      	bne.n	1d3c <pm_system_resume+0x1c>
    1d4e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1d52:	4211      	tst	r1, r2
    1d54:	d013      	beq.n	1d7e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1d56:	4b0f      	ldr	r3, [pc, #60]	; (1d94 <pm_system_resume+0x74>)
    1d58:	4d0f      	ldr	r5, [pc, #60]	; (1d98 <pm_system_resume+0x78>)
    1d5a:	b18b      	cbz	r3, 1d80 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1d5c:	230c      	movs	r3, #12
    1d5e:	4363      	muls	r3, r4
    1d60:	18ea      	adds	r2, r5, r3
    1d62:	5ce8      	ldrb	r0, [r5, r3]
    1d64:	7851      	ldrb	r1, [r2, #1]
    1d66:	f005 f8df 	bl	6f28 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1d6a:	2000      	movs	r0, #0
    1d6c:	f7ff ffaa 	bl	1cc4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1d70:	230c      	movs	r3, #12
    1d72:	435c      	muls	r4, r3
    1d74:	192a      	adds	r2, r5, r4
    1d76:	2300      	movs	r3, #0
    1d78:	512b      	str	r3, [r5, r4]
    1d7a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1d7e:	bd38      	pop	{r3, r4, r5, pc}
    1d80:	f383 8811 	msr	BASEPRI, r3
    1d84:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1d88:	e7ef      	b.n	1d6a <pm_system_resume+0x4a>
    1d8a:	bf00      	nop
    1d8c:	20000f3c 	.word	0x20000f3c
    1d90:	2000090c 	.word	0x2000090c
    1d94:	00006f29 	.word	0x00006f29
    1d98:	20000900 	.word	0x20000900

00001d9c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1da0:	4b33      	ldr	r3, [pc, #204]	; (1e70 <pm_system_suspend+0xd4>)
{
    1da2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1da4:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    1da6:	f04f 0320 	mov.w	r3, #32
    1daa:	f3ef 8811 	mrs	r8, BASEPRI
    1dae:	f383 8812 	msr	BASEPRI_MAX, r3
    1db2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1db6:	240c      	movs	r4, #12
    1db8:	4b2e      	ldr	r3, [pc, #184]	; (1e74 <pm_system_suspend+0xd8>)
    1dba:	4e2f      	ldr	r6, [pc, #188]	; (1e78 <pm_system_suspend+0xdc>)
    1dbc:	436c      	muls	r4, r5
    1dbe:	191a      	adds	r2, r3, r4
    1dc0:	5d19      	ldrb	r1, [r3, r4]
    1dc2:	2900      	cmp	r1, #0
    1dc4:	d049      	beq.n	1e5a <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1dc6:	ca07      	ldmia	r2, {r0, r1, r2}
    1dc8:	eb06 0c04 	add.w	ip, r6, r4
    1dcc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1dd0:	2200      	movs	r2, #0
    1dd2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1dd4:	f388 8811 	msr	BASEPRI, r8
    1dd8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1ddc:	230c      	movs	r3, #12
    1dde:	436b      	muls	r3, r5
    1de0:	18f2      	adds	r2, r6, r3
    1de2:	5cf0      	ldrb	r0, [r6, r3]
    1de4:	b3b8      	cbz	r0, 1e56 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1de6:	1c7b      	adds	r3, r7, #1
    1de8:	d00f      	beq.n	1e0a <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1dea:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1dee:	4823      	ldr	r0, [pc, #140]	; (1e7c <pm_system_suspend+0xe0>)
    1df0:	4a23      	ldr	r2, [pc, #140]	; (1e80 <pm_system_suspend+0xe4>)
    1df2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1df6:	2100      	movs	r1, #0
    1df8:	2300      	movs	r3, #0
    1dfa:	fbec 0104 	umlal	r0, r1, ip, r4
    1dfe:	f7fe f97f 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1e02:	2101      	movs	r1, #1
    1e04:	1a38      	subs	r0, r7, r0
    1e06:	f005 fdbe 	bl	7986 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1e0a:	f003 fd07 	bl	581c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1e0e:	2001      	movs	r0, #1
    1e10:	f7ff ff58 	bl	1cc4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e14:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e18:	f005 021f 	and.w	r2, r5, #31
    1e1c:	2101      	movs	r1, #1
    1e1e:	4091      	lsls	r1, r2
    1e20:	4a18      	ldr	r2, [pc, #96]	; (1e84 <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1e22:	096b      	lsrs	r3, r5, #5
    1e24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e28:	e853 2f00 	ldrex	r2, [r3]
    1e2c:	430a      	orrs	r2, r1
    1e2e:	e843 2000 	strex	r0, r2, [r3]
    1e32:	2800      	cmp	r0, #0
    1e34:	d1f8      	bne.n	1e28 <pm_system_suspend+0x8c>
    1e36:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1e3a:	4b13      	ldr	r3, [pc, #76]	; (1e88 <pm_system_suspend+0xec>)
    1e3c:	b133      	cbz	r3, 1e4c <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    1e3e:	200c      	movs	r0, #12
    1e40:	4368      	muls	r0, r5
    1e42:	1833      	adds	r3, r6, r0
    1e44:	5c30      	ldrb	r0, [r6, r0]
    1e46:	7859      	ldrb	r1, [r3, #1]
    1e48:	f005 f862 	bl	6f10 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1e4c:	f7ff ff68 	bl	1d20 <pm_system_resume>
	k_sched_unlock();
    1e50:	f003 feb4 	bl	5bbc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1e54:	2001      	movs	r0, #1
}
    1e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1e5a:	4601      	mov	r1, r0
    1e5c:	4628      	mov	r0, r5
    1e5e:	f000 f815 	bl	1e8c <pm_policy_next_state>
		if (info != NULL) {
    1e62:	2800      	cmp	r0, #0
    1e64:	d0b6      	beq.n	1dd4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1e66:	c807      	ldmia	r0, {r0, r1, r2}
    1e68:	4434      	add	r4, r6
    1e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1e6e:	e7b1      	b.n	1dd4 <pm_system_suspend+0x38>
    1e70:	20000f3c 	.word	0x20000f3c
    1e74:	200008f4 	.word	0x200008f4
    1e78:	20000900 	.word	0x20000900
    1e7c:	000f423f 	.word	0x000f423f
    1e80:	000f4240 	.word	0x000f4240
    1e84:	2000090c 	.word	0x2000090c
    1e88:	00006f11 	.word	0x00006f11

00001e8c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e90:	b085      	sub	sp, #20
    1e92:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1e94:	a903      	add	r1, sp, #12
    1e96:	f000 f841 	bl	1f1c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    1e9a:	9b03      	ldr	r3, [sp, #12]
    1e9c:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1e9e:	4b1c      	ldr	r3, [pc, #112]	; (1f10 <pm_policy_next_state+0x84>)
    1ea0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1f14 <pm_policy_next_state+0x88>
    1ea4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1ea8:	1e44      	subs	r4, r0, #1
    1eaa:	b224      	sxth	r4, r4
    1eac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1eb0:	f04f 0b00 	mov.w	fp, #0
    1eb4:	1c63      	adds	r3, r4, #1
    1eb6:	d104      	bne.n	1ec2 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1eb8:	2500      	movs	r5, #0
}
    1eba:	4628      	mov	r0, r5
    1ebc:	b005      	add	sp, #20
    1ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1ec2:	9b01      	ldr	r3, [sp, #4]
    1ec4:	4a14      	ldr	r2, [pc, #80]	; (1f18 <pm_policy_next_state+0x8c>)
    1ec6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    1eca:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    1ece:	46c4      	mov	ip, r8
    1ed0:	6868      	ldr	r0, [r5, #4]
    1ed2:	4659      	mov	r1, fp
    1ed4:	fbe0 c107 	umlal	ip, r1, r0, r7
    1ed8:	2300      	movs	r3, #0
    1eda:	4660      	mov	r0, ip
    1edc:	f7fe f910 	bl	100 <__aeabi_uldivmod>
    1ee0:	4681      	mov	r9, r0
    1ee2:	68a8      	ldr	r0, [r5, #8]
    1ee4:	4a0c      	ldr	r2, [pc, #48]	; (1f18 <pm_policy_next_state+0x8c>)
    1ee6:	46c4      	mov	ip, r8
    1ee8:	4659      	mov	r1, fp
    1eea:	fbe0 c107 	umlal	ip, r1, r0, r7
    1eee:	2300      	movs	r3, #0
    1ef0:	4660      	mov	r0, ip
    1ef2:	f7fe f905 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1ef6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    1efa:	d001      	beq.n	1f00 <pm_policy_next_state+0x74>
    1efc:	4582      	cmp	sl, r0
    1efe:	d904      	bls.n	1f0a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1f00:	1c72      	adds	r2, r6, #1
    1f02:	d0da      	beq.n	1eba <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    1f04:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    1f06:	42b0      	cmp	r0, r6
    1f08:	d9d7      	bls.n	1eba <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1f0a:	3c01      	subs	r4, #1
    1f0c:	b224      	sxth	r4, r4
    1f0e:	e7d1      	b.n	1eb4 <pm_policy_next_state+0x28>
    1f10:	20000008 	.word	0x20000008
    1f14:	000f423f 	.word	0x000f423f
    1f18:	000f4240 	.word	0x000f4240

00001f1c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1f1c:	b908      	cbnz	r0, 1f22 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1f1e:	4b02      	ldr	r3, [pc, #8]	; (1f28 <pm_state_cpu_get_all+0xc>)
    1f20:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1f22:	2000      	movs	r0, #0
    1f24:	4770      	bx	lr
    1f26:	bf00      	nop
    1f28:	00007da4 	.word	0x00007da4

00001f2c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1f2c:	4801      	ldr	r0, [pc, #4]	; (1f34 <nrf_cc3xx_platform_abort_init+0x8>)
    1f2e:	f004 ba05 	b.w	633c <nrf_cc3xx_platform_set_abort>
    1f32:	bf00      	nop
    1f34:	00007da4 	.word	0x00007da4

00001f38 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f38:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1f3a:	4604      	mov	r4, r0
    1f3c:	b918      	cbnz	r0, 1f46 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1f3e:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <mutex_free_platform+0x3c>)
    1f40:	480d      	ldr	r0, [pc, #52]	; (1f78 <mutex_free_platform+0x40>)
    1f42:	685b      	ldr	r3, [r3, #4]
    1f44:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1f46:	6861      	ldr	r1, [r4, #4]
    1f48:	2908      	cmp	r1, #8
    1f4a:	d00d      	beq.n	1f68 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f4c:	f031 0304 	bics.w	r3, r1, #4
    1f50:	d00a      	beq.n	1f68 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1f52:	f011 0102 	ands.w	r1, r1, #2
    1f56:	d008      	beq.n	1f6a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1f58:	4808      	ldr	r0, [pc, #32]	; (1f7c <mutex_free_platform+0x44>)
    1f5a:	4621      	mov	r1, r4
    1f5c:	f005 fb66 	bl	762c <k_mem_slab_free>
        mutex->mutex = NULL;
    1f60:	2300      	movs	r3, #0
    1f62:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1f64:	2300      	movs	r3, #0
    1f66:	6063      	str	r3, [r4, #4]
}
    1f68:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f6a:	6820      	ldr	r0, [r4, #0]
    1f6c:	2214      	movs	r2, #20
    1f6e:	f004 ffc3 	bl	6ef8 <memset>
    1f72:	e7f7      	b.n	1f64 <mutex_free_platform+0x2c>
    1f74:	200000f4 	.word	0x200000f4
    1f78:	000081b7 	.word	0x000081b7
    1f7c:	20000910 	.word	0x20000910

00001f80 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f80:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f82:	b308      	cbz	r0, 1fc8 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1f84:	6843      	ldr	r3, [r0, #4]
    1f86:	2b04      	cmp	r3, #4
    1f88:	d110      	bne.n	1fac <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f8a:	2201      	movs	r2, #1
    1f8c:	6803      	ldr	r3, [r0, #0]
    1f8e:	f3bf 8f5b 	dmb	ish
    1f92:	e853 1f00 	ldrex	r1, [r3]
    1f96:	2900      	cmp	r1, #0
    1f98:	d103      	bne.n	1fa2 <mutex_lock_platform+0x22>
    1f9a:	e843 2000 	strex	r0, r2, [r3]
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d1f7      	bne.n	1f92 <mutex_lock_platform+0x12>
    1fa2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fa6:	d10b      	bne.n	1fc0 <mutex_lock_platform+0x40>
    1fa8:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1faa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fac:	b153      	cbz	r3, 1fc4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1fae:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fb8:	f003 f95a 	bl	5270 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1fbc:	2800      	cmp	r0, #0
    1fbe:	d0f3      	beq.n	1fa8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fc0:	4803      	ldr	r0, [pc, #12]	; (1fd0 <mutex_lock_platform+0x50>)
    1fc2:	e7f2      	b.n	1faa <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1fc4:	4803      	ldr	r0, [pc, #12]	; (1fd4 <mutex_lock_platform+0x54>)
    1fc6:	e7f0      	b.n	1faa <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1fc8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1fcc:	e7ed      	b.n	1faa <mutex_lock_platform+0x2a>
    1fce:	bf00      	nop
    1fd0:	ffff8fe9 	.word	0xffff8fe9
    1fd4:	ffff8fea 	.word	0xffff8fea

00001fd8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fd8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1fda:	b1d0      	cbz	r0, 2012 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1fdc:	6843      	ldr	r3, [r0, #4]
    1fde:	2b04      	cmp	r3, #4
    1fe0:	d111      	bne.n	2006 <mutex_unlock_platform+0x2e>
    1fe2:	2200      	movs	r2, #0
    1fe4:	6803      	ldr	r3, [r0, #0]
    1fe6:	f3bf 8f5b 	dmb	ish
    1fea:	e853 1f00 	ldrex	r1, [r3]
    1fee:	2901      	cmp	r1, #1
    1ff0:	d103      	bne.n	1ffa <mutex_unlock_platform+0x22>
    1ff2:	e843 2000 	strex	r0, r2, [r3]
    1ff6:	2800      	cmp	r0, #0
    1ff8:	d1f7      	bne.n	1fea <mutex_unlock_platform+0x12>
    1ffa:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1ffe:	4807      	ldr	r0, [pc, #28]	; (201c <mutex_unlock_platform+0x44>)
    2000:	bf08      	it	eq
    2002:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2004:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2006:	b13b      	cbz	r3, 2018 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2008:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    200a:	f003 f9a9 	bl	5360 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    200e:	2000      	movs	r0, #0
    2010:	e7f8      	b.n	2004 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2012:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2016:	e7f5      	b.n	2004 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2018:	4801      	ldr	r0, [pc, #4]	; (2020 <mutex_unlock_platform+0x48>)
    201a:	e7f3      	b.n	2004 <mutex_unlock_platform+0x2c>
    201c:	ffff8fe9 	.word	0xffff8fe9
    2020:	ffff8fea 	.word	0xffff8fea

00002024 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2024:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2026:	4604      	mov	r4, r0
    2028:	b918      	cbnz	r0, 2032 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    202a:	4b16      	ldr	r3, [pc, #88]	; (2084 <mutex_init_platform+0x60>)
    202c:	4816      	ldr	r0, [pc, #88]	; (2088 <mutex_init_platform+0x64>)
    202e:	685b      	ldr	r3, [r3, #4]
    2030:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2032:	6863      	ldr	r3, [r4, #4]
    2034:	2b04      	cmp	r3, #4
    2036:	d023      	beq.n	2080 <mutex_init_platform+0x5c>
    2038:	2b08      	cmp	r3, #8
    203a:	d021      	beq.n	2080 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    203c:	b9cb      	cbnz	r3, 2072 <mutex_init_platform+0x4e>
    203e:	6823      	ldr	r3, [r4, #0]
    2040:	b9bb      	cbnz	r3, 2072 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2042:	4812      	ldr	r0, [pc, #72]	; (208c <mutex_init_platform+0x68>)
    2044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    204c:	4621      	mov	r1, r4
    204e:	f003 f80b 	bl	5068 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2052:	b908      	cbnz	r0, 2058 <mutex_init_platform+0x34>
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	b91b      	cbnz	r3, 2060 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2058:	4b0a      	ldr	r3, [pc, #40]	; (2084 <mutex_init_platform+0x60>)
    205a:	480d      	ldr	r0, [pc, #52]	; (2090 <mutex_init_platform+0x6c>)
    205c:	685b      	ldr	r3, [r3, #4]
    205e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2060:	6820      	ldr	r0, [r4, #0]
    2062:	2214      	movs	r2, #20
    2064:	2100      	movs	r1, #0
    2066:	f004 ff47 	bl	6ef8 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    206a:	6863      	ldr	r3, [r4, #4]
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2072:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2074:	f005 fb1f 	bl	76b6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2078:	6863      	ldr	r3, [r4, #4]
    207a:	f043 0301 	orr.w	r3, r3, #1
    207e:	6063      	str	r3, [r4, #4]
}
    2080:	bd10      	pop	{r4, pc}
    2082:	bf00      	nop
    2084:	200000f4 	.word	0x200000f4
    2088:	000081b7 	.word	0x000081b7
    208c:	20000910 	.word	0x20000910
    2090:	000081dd 	.word	0x000081dd

00002094 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2094:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2096:	4906      	ldr	r1, [pc, #24]	; (20b0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2098:	4806      	ldr	r0, [pc, #24]	; (20b4 <nrf_cc3xx_platform_mutex_init+0x20>)
    209a:	2340      	movs	r3, #64	; 0x40
    209c:	2214      	movs	r2, #20
    209e:	f005 faaa 	bl	75f6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    20a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    20a6:	4904      	ldr	r1, [pc, #16]	; (20b8 <nrf_cc3xx_platform_mutex_init+0x24>)
    20a8:	4804      	ldr	r0, [pc, #16]	; (20bc <nrf_cc3xx_platform_mutex_init+0x28>)
    20aa:	f004 b9a7 	b.w	63fc <nrf_cc3xx_platform_set_mutexes>
    20ae:	bf00      	nop
    20b0:	2000092c 	.word	0x2000092c
    20b4:	20000910 	.word	0x20000910
    20b8:	00007dbc 	.word	0x00007dbc
    20bc:	00007dac 	.word	0x00007dac

000020c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    20c0:	4901      	ldr	r1, [pc, #4]	; (20c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    20c2:	2210      	movs	r2, #16
	str	r2, [r1]
    20c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    20c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    20c8:	e000ed10 	.word	0xe000ed10

000020cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    20cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    20ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    20d0:	f380 8811 	msr	BASEPRI, r0
	isb
    20d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    20d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    20dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    20de:	b662      	cpsie	i
	isb
    20e0:	f3bf 8f6f 	isb	sy

	bx	lr
    20e4:	4770      	bx	lr
    20e6:	bf00      	nop

000020e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    20e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    20ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    20ec:	f381 8811 	msr	BASEPRI, r1

	wfe
    20f0:	bf20      	wfe

	msr	BASEPRI, r0
    20f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    20f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    20f8:	4770      	bx	lr
    20fa:	bf00      	nop

000020fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    20fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2100:	4681      	mov	r9, r0
    2102:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2104:	460c      	mov	r4, r1
    2106:	2900      	cmp	r1, #0
    2108:	d04c      	beq.n	21a4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    210a:	466e      	mov	r6, sp
    210c:	b08a      	sub	sp, #40	; 0x28
    210e:	e9d1 1200 	ldrd	r1, r2, [r1]
    2112:	68a3      	ldr	r3, [r4, #8]
    2114:	466d      	mov	r5, sp
    2116:	4827      	ldr	r0, [pc, #156]	; (21b4 <z_arm_fatal_error+0xb8>)
    2118:	46a8      	mov	r8, r5
    211a:	f04f 0a05 	mov.w	sl, #5
    211e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2122:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2126:	f848 af10 	str.w	sl, [r8, #16]!
    212a:	4823      	ldr	r0, [pc, #140]	; (21b8 <z_arm_fatal_error+0xbc>)
    212c:	4642      	mov	r2, r8
    212e:	2300      	movs	r3, #0
    2130:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2134:	f7ff fb46 	bl	17c4 <z_impl_z_log_msg_static_create>
    2138:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    213a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    213e:	6963      	ldr	r3, [r4, #20]
    2140:	46ad      	mov	sp, r5
    2142:	481e      	ldr	r0, [pc, #120]	; (21bc <z_arm_fatal_error+0xc0>)
    2144:	f8c5 a010 	str.w	sl, [r5, #16]
    2148:	e9c5 0105 	strd	r0, r1, [r5, #20]
    214c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2150:	4819      	ldr	r0, [pc, #100]	; (21b8 <z_arm_fatal_error+0xbc>)
    2152:	2300      	movs	r3, #0
    2154:	4642      	mov	r2, r8
    2156:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    215a:	f7ff fb33 	bl	17c4 <z_impl_z_log_msg_static_create>
    215e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2160:	b088      	sub	sp, #32
    2162:	69e3      	ldr	r3, [r4, #28]
    2164:	466d      	mov	r5, sp
    2166:	4a16      	ldr	r2, [pc, #88]	; (21c0 <z_arm_fatal_error+0xc4>)
    2168:	46a8      	mov	r8, r5
    216a:	f04f 0a03 	mov.w	sl, #3
    216e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2172:	f848 af10 	str.w	sl, [r8, #16]!
    2176:	4810      	ldr	r0, [pc, #64]	; (21b8 <z_arm_fatal_error+0xbc>)
    2178:	2300      	movs	r3, #0
    217a:	4642      	mov	r2, r8
    217c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2180:	f7ff fb20 	bl	17c4 <z_impl_z_log_msg_static_create>
    2184:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2186:	69a3      	ldr	r3, [r4, #24]
    2188:	46ad      	mov	sp, r5
    218a:	4a0e      	ldr	r2, [pc, #56]	; (21c4 <z_arm_fatal_error+0xc8>)
    218c:	f8c5 a010 	str.w	sl, [r5, #16]
    2190:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2194:	4808      	ldr	r0, [pc, #32]	; (21b8 <z_arm_fatal_error+0xbc>)
    2196:	2300      	movs	r3, #0
    2198:	4642      	mov	r2, r8
    219a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    219e:	f7ff fb11 	bl	17c4 <z_impl_z_log_msg_static_create>
    21a2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    21a4:	4621      	mov	r1, r4
    21a6:	4648      	mov	r0, r9
    21a8:	f002 fdf4 	bl	4d94 <z_fatal_error>
}
    21ac:	46bd      	mov	sp, r7
    21ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21b2:	bf00      	nop
    21b4:	0000820a 	.word	0x0000820a
    21b8:	00007cec 	.word	0x00007cec
    21bc:	00008239 	.word	0x00008239
    21c0:	00008268 	.word	0x00008268
    21c4:	00008277 	.word	0x00008277

000021c8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    21c8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    21ca:	2b00      	cmp	r3, #0
    21cc:	db08      	blt.n	21e0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ce:	2201      	movs	r2, #1
    21d0:	f000 001f 	and.w	r0, r0, #31
    21d4:	fa02 f000 	lsl.w	r0, r2, r0
    21d8:	095b      	lsrs	r3, r3, #5
    21da:	4a02      	ldr	r2, [pc, #8]	; (21e4 <arch_irq_enable+0x1c>)
    21dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    21e0:	4770      	bx	lr
    21e2:	bf00      	nop
    21e4:	e000e100 	.word	0xe000e100

000021e8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    21e8:	4b05      	ldr	r3, [pc, #20]	; (2200 <arch_irq_is_enabled+0x18>)
    21ea:	0942      	lsrs	r2, r0, #5
    21ec:	f000 001f 	and.w	r0, r0, #31
    21f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21f4:	2301      	movs	r3, #1
    21f6:	fa03 f000 	lsl.w	r0, r3, r0
}
    21fa:	4010      	ands	r0, r2
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop
    2200:	e000e100 	.word	0xe000e100

00002204 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2204:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2206:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2208:	bfa8      	it	ge
    220a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    220e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2212:	bfb8      	it	lt
    2214:	4b06      	ldrlt	r3, [pc, #24]	; (2230 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2216:	ea4f 1141 	mov.w	r1, r1, lsl #5
    221a:	bfac      	ite	ge
    221c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2220:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2224:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2226:	bfb4      	ite	lt
    2228:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    222a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    222e:	4770      	bx	lr
    2230:	e000ed14 	.word	0xe000ed14

00002234 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2234:	bf30      	wfi
    b z_SysNmiOnReset
    2236:	f7ff bffd 	b.w	2234 <z_SysNmiOnReset>
    223a:	bf00      	nop

0000223c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    223c:	4a0b      	ldr	r2, [pc, #44]	; (226c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    223e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2240:	4b0b      	ldr	r3, [pc, #44]	; (2270 <z_arm_prep_c+0x34>)
    2242:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2246:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2248:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    224c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2250:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2254:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    225c:	f002 fe32 	bl	4ec4 <z_bss_zero>
	z_data_copy();
    2260:	f003 fdee 	bl	5e40 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2264:	f000 fbbc 	bl	29e0 <z_arm_interrupt_init>
	z_cstart();
    2268:	f002 fe70 	bl	4f4c <z_cstart>
    226c:	00000000 	.word	0x00000000
    2270:	e000ed00 	.word	0xe000ed00

00002274 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2274:	4a09      	ldr	r2, [pc, #36]	; (229c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2276:	490a      	ldr	r1, [pc, #40]	; (22a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2278:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    227a:	6809      	ldr	r1, [r1, #0]
    227c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    227e:	4909      	ldr	r1, [pc, #36]	; (22a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2280:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2282:	684b      	ldr	r3, [r1, #4]
    2284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2288:	604b      	str	r3, [r1, #4]
    228a:	2300      	movs	r3, #0
    228c:	f383 8811 	msr	BASEPRI, r3
    2290:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2294:	6893      	ldr	r3, [r2, #8]
}
    2296:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2298:	4770      	bx	lr
    229a:	bf00      	nop
    229c:	20000f3c 	.word	0x20000f3c
    22a0:	00007f48 	.word	0x00007f48
    22a4:	e000ed00 	.word	0xe000ed00

000022a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    22a8:	4912      	ldr	r1, [pc, #72]	; (22f4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    22aa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    22ac:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    22b0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    22b2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    22b6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    22ba:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    22bc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    22c0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    22c4:	4f0c      	ldr	r7, [pc, #48]	; (22f8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    22c6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    22ca:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    22cc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    22ce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    22d0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    22d2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    22d4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    22d6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    22da:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    22dc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    22de:	f000 fc1b 	bl	2b18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    22e2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    22e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    22ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    22ee:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    22f2:	4770      	bx	lr
    ldr r1, =_kernel
    22f4:	20000f3c 	.word	0x20000f3c
    ldr v4, =_SCS_ICSR
    22f8:	e000ed04 	.word	0xe000ed04

000022fc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    22fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2300:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2302:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2306:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    230a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    230c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2310:	2902      	cmp	r1, #2
    beq _oops
    2312:	d0ff      	beq.n	2314 <_oops>

00002314 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2314:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2316:	f004 fdc2 	bl	6e9e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    231a:	bd01      	pop	{r0, pc}

0000231c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    231c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2320:	9b00      	ldr	r3, [sp, #0]
    2322:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2326:	490a      	ldr	r1, [pc, #40]	; (2350 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2328:	9b01      	ldr	r3, [sp, #4]
    232a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    232e:	9b02      	ldr	r3, [sp, #8]
    2330:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2334:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    233c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2340:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2344:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2346:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2348:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    234a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    234c:	4770      	bx	lr
    234e:	bf00      	nop
    2350:	000068ab 	.word	0x000068ab

00002354 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2354:	4a09      	ldr	r2, [pc, #36]	; (237c <z_check_thread_stack_fail+0x28>)
{
    2356:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2358:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    235a:	b170      	cbz	r0, 237a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    235c:	f113 0f16 	cmn.w	r3, #22
    2360:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2362:	d005      	beq.n	2370 <z_check_thread_stack_fail+0x1c>
    2364:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2368:	429a      	cmp	r2, r3
    236a:	d805      	bhi.n	2378 <z_check_thread_stack_fail+0x24>
    236c:	4283      	cmp	r3, r0
    236e:	d203      	bcs.n	2378 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2370:	4281      	cmp	r1, r0
    2372:	bf28      	it	cs
    2374:	2000      	movcs	r0, #0
    2376:	4770      	bx	lr
    2378:	2000      	movs	r0, #0
}
    237a:	4770      	bx	lr
    237c:	20000f3c 	.word	0x20000f3c

00002380 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2380:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2382:	4b09      	ldr	r3, [pc, #36]	; (23a8 <arch_switch_to_main_thread+0x28>)
    2384:	6098      	str	r0, [r3, #8]
{
    2386:	460d      	mov	r5, r1
    2388:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    238a:	f000 fbc5 	bl	2b18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    238e:	4620      	mov	r0, r4
    2390:	f385 8809 	msr	PSP, r5
    2394:	2100      	movs	r1, #0
    2396:	b663      	cpsie	if
    2398:	f381 8811 	msr	BASEPRI, r1
    239c:	f3bf 8f6f 	isb	sy
    23a0:	2200      	movs	r2, #0
    23a2:	2300      	movs	r3, #0
    23a4:	f004 fa81 	bl	68aa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    23a8:	20000f3c 	.word	0x20000f3c

000023ac <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    23ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    23ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    23b0:	4a0b      	ldr	r2, [pc, #44]	; (23e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    23b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    23b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    23b6:	bf1e      	ittt	ne
	movne	r1, #0
    23b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    23ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    23bc:	f005 f96c 	blne	7698 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    23c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    23c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    23c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    23ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    23ce:	4905      	ldr	r1, [pc, #20]	; (23e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    23d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    23d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    23d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    23d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    23da:	4903      	ldr	r1, [pc, #12]	; (23e8 <_isr_wrapper+0x3c>)
	bx r1
    23dc:	4708      	bx	r1
    23de:	0000      	.short	0x0000
	ldr r2, =_kernel
    23e0:	20000f3c 	.word	0x20000f3c
	ldr r1, =_sw_isr_table
    23e4:	00007b0c 	.word	0x00007b0c
	ldr r1, =z_arm_int_exit
    23e8:	000023ed 	.word	0x000023ed

000023ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    23ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    23f0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    23f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    23f4:	d003      	beq.n	23fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    23f6:	4903      	ldr	r1, [pc, #12]	; (2404 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    23f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    23fc:	600a      	str	r2, [r1, #0]

000023fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    23fe:	4770      	bx	lr
	ldr r3, =_kernel
    2400:	20000f3c 	.word	0x20000f3c
	ldr r1, =_SCS_ICSR
    2404:	e000ed04 	.word	0xe000ed04

00002408 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    240c:	b086      	sub	sp, #24
    240e:	4606      	mov	r6, r0
    2410:	af00      	add	r7, sp, #0
    2412:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2414:	4b3e      	ldr	r3, [pc, #248]	; (2510 <bus_fault.constprop.0+0x108>)
    2416:	483f      	ldr	r0, [pc, #252]	; (2514 <bus_fault.constprop.0+0x10c>)
    2418:	617b      	str	r3, [r7, #20]
    241a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    241e:	2402      	movs	r4, #2
    2420:	f107 0210 	add.w	r2, r7, #16
    2424:	613c      	str	r4, [r7, #16]
    2426:	f004 fd49 	bl	6ebc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    242a:	4b3b      	ldr	r3, [pc, #236]	; (2518 <bus_fault.constprop.0+0x110>)
    242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    242e:	04d9      	lsls	r1, r3, #19
    2430:	d509      	bpl.n	2446 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2432:	4b3a      	ldr	r3, [pc, #232]	; (251c <bus_fault.constprop.0+0x114>)
    2434:	4837      	ldr	r0, [pc, #220]	; (2514 <bus_fault.constprop.0+0x10c>)
    2436:	f107 0210 	add.w	r2, r7, #16
    243a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    243e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2442:	f004 fd3b 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2446:	4b34      	ldr	r3, [pc, #208]	; (2518 <bus_fault.constprop.0+0x110>)
    2448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    244a:	051a      	lsls	r2, r3, #20
    244c:	d50a      	bpl.n	2464 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    244e:	4b34      	ldr	r3, [pc, #208]	; (2520 <bus_fault.constprop.0+0x118>)
    2450:	617b      	str	r3, [r7, #20]
    2452:	4830      	ldr	r0, [pc, #192]	; (2514 <bus_fault.constprop.0+0x10c>)
    2454:	2302      	movs	r3, #2
    2456:	f107 0210 	add.w	r2, r7, #16
    245a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    245e:	613b      	str	r3, [r7, #16]
    2460:	f004 fd2c 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2464:	4c2c      	ldr	r4, [pc, #176]	; (2518 <bus_fault.constprop.0+0x110>)
    2466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2468:	059b      	lsls	r3, r3, #22
    246a:	d522      	bpl.n	24b2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    246c:	46e8      	mov	r8, sp
    246e:	4b2d      	ldr	r3, [pc, #180]	; (2524 <bus_fault.constprop.0+0x11c>)
    2470:	4828      	ldr	r0, [pc, #160]	; (2514 <bus_fault.constprop.0+0x10c>)
    2472:	617b      	str	r3, [r7, #20]
    2474:	f107 0210 	add.w	r2, r7, #16
    2478:	2302      	movs	r3, #2
    247a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    247e:	613b      	str	r3, [r7, #16]
    2480:	f004 fd1c 	bl	6ebc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2484:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2488:	0410      	lsls	r0, r2, #16
    248a:	d512      	bpl.n	24b2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    248c:	b088      	sub	sp, #32
    248e:	466a      	mov	r2, sp
    2490:	4925      	ldr	r1, [pc, #148]	; (2528 <bus_fault.constprop.0+0x120>)
    2492:	4820      	ldr	r0, [pc, #128]	; (2514 <bus_fault.constprop.0+0x10c>)
    2494:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2498:	2303      	movs	r3, #3
    249a:	f842 3f10 	str.w	r3, [r2, #16]!
    249e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    24a2:	f004 fd0b 	bl	6ebc <z_log_msg_static_create.constprop.0>
    24a6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    24a8:	b11e      	cbz	r6, 24b2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    24aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    24ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    24b0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    24b2:	4b19      	ldr	r3, [pc, #100]	; (2518 <bus_fault.constprop.0+0x110>)
    24b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24b6:	0559      	lsls	r1, r3, #21
    24b8:	d50a      	bpl.n	24d0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    24ba:	4b1c      	ldr	r3, [pc, #112]	; (252c <bus_fault.constprop.0+0x124>)
    24bc:	617b      	str	r3, [r7, #20]
    24be:	4815      	ldr	r0, [pc, #84]	; (2514 <bus_fault.constprop.0+0x10c>)
    24c0:	2302      	movs	r3, #2
    24c2:	f107 0210 	add.w	r2, r7, #16
    24c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24ca:	613b      	str	r3, [r7, #16]
    24cc:	f004 fcf6 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    24d0:	4b11      	ldr	r3, [pc, #68]	; (2518 <bus_fault.constprop.0+0x110>)
    24d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24d4:	05d2      	lsls	r2, r2, #23
    24d6:	d515      	bpl.n	2504 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    24d8:	4b15      	ldr	r3, [pc, #84]	; (2530 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    24da:	617b      	str	r3, [r7, #20]
    24dc:	480d      	ldr	r0, [pc, #52]	; (2514 <bus_fault.constprop.0+0x10c>)
    24de:	2302      	movs	r3, #2
    24e0:	f107 0210 	add.w	r2, r7, #16
    24e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24e8:	613b      	str	r3, [r7, #16]
    24ea:	f004 fce7 	bl	6ebc <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24ee:	4a0a      	ldr	r2, [pc, #40]	; (2518 <bus_fault.constprop.0+0x110>)
    24f0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    24f2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24f4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    24f8:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    24fa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    24fc:	7028      	strb	r0, [r5, #0]
}
    24fe:	46bd      	mov	sp, r7
    2500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2506:	049b      	lsls	r3, r3, #18
    2508:	d5f1      	bpl.n	24ee <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    250a:	4b0a      	ldr	r3, [pc, #40]	; (2534 <bus_fault.constprop.0+0x12c>)
    250c:	e7e5      	b.n	24da <bus_fault.constprop.0+0xd2>
    250e:	bf00      	nop
    2510:	000082a5 	.word	0x000082a5
    2514:	00007cec 	.word	0x00007cec
    2518:	e000ed00 	.word	0xe000ed00
    251c:	000082bb 	.word	0x000082bb
    2520:	000082cc 	.word	0x000082cc
    2524:	000082df 	.word	0x000082df
    2528:	000082f8 	.word	0x000082f8
    252c:	0000830d 	.word	0x0000830d
    2530:	00008328 	.word	0x00008328
    2534:	00008340 	.word	0x00008340

00002538 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2538:	b510      	push	{r4, lr}
    253a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    253c:	4b33      	ldr	r3, [pc, #204]	; (260c <usage_fault.constprop.0+0xd4>)
    253e:	4834      	ldr	r0, [pc, #208]	; (2610 <usage_fault.constprop.0+0xd8>)
    2540:	9305      	str	r3, [sp, #20]
    2542:	2402      	movs	r4, #2
    2544:	aa04      	add	r2, sp, #16
    2546:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    254a:	9404      	str	r4, [sp, #16]
    254c:	f004 fcb6 	bl	6ebc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2550:	4b30      	ldr	r3, [pc, #192]	; (2614 <usage_fault.constprop.0+0xdc>)
    2552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2554:	019b      	lsls	r3, r3, #6
    2556:	d508      	bpl.n	256a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2558:	4b2f      	ldr	r3, [pc, #188]	; (2618 <usage_fault.constprop.0+0xe0>)
    255a:	482d      	ldr	r0, [pc, #180]	; (2610 <usage_fault.constprop.0+0xd8>)
    255c:	aa04      	add	r2, sp, #16
    255e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2562:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2566:	f004 fca9 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    256a:	4b2a      	ldr	r3, [pc, #168]	; (2614 <usage_fault.constprop.0+0xdc>)
    256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    256e:	01dc      	lsls	r4, r3, #7
    2570:	d509      	bpl.n	2586 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2572:	4b2a      	ldr	r3, [pc, #168]	; (261c <usage_fault.constprop.0+0xe4>)
    2574:	9305      	str	r3, [sp, #20]
    2576:	4826      	ldr	r0, [pc, #152]	; (2610 <usage_fault.constprop.0+0xd8>)
    2578:	2302      	movs	r3, #2
    257a:	aa04      	add	r2, sp, #16
    257c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2580:	9304      	str	r3, [sp, #16]
    2582:	f004 fc9b 	bl	6ebc <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2586:	4b23      	ldr	r3, [pc, #140]	; (2614 <usage_fault.constprop.0+0xdc>)
    2588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    258a:	0318      	lsls	r0, r3, #12
    258c:	d509      	bpl.n	25a2 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    258e:	4b24      	ldr	r3, [pc, #144]	; (2620 <usage_fault.constprop.0+0xe8>)
    2590:	9305      	str	r3, [sp, #20]
    2592:	481f      	ldr	r0, [pc, #124]	; (2610 <usage_fault.constprop.0+0xd8>)
    2594:	2302      	movs	r3, #2
    2596:	aa04      	add	r2, sp, #16
    2598:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    259c:	9304      	str	r3, [sp, #16]
    259e:	f004 fc8d 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25a2:	4b1c      	ldr	r3, [pc, #112]	; (2614 <usage_fault.constprop.0+0xdc>)
    25a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25a6:	0359      	lsls	r1, r3, #13
    25a8:	d509      	bpl.n	25be <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    25aa:	4b1e      	ldr	r3, [pc, #120]	; (2624 <usage_fault.constprop.0+0xec>)
    25ac:	9305      	str	r3, [sp, #20]
    25ae:	4818      	ldr	r0, [pc, #96]	; (2610 <usage_fault.constprop.0+0xd8>)
    25b0:	2302      	movs	r3, #2
    25b2:	aa04      	add	r2, sp, #16
    25b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25b8:	9304      	str	r3, [sp, #16]
    25ba:	f004 fc7f 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    25be:	4b15      	ldr	r3, [pc, #84]	; (2614 <usage_fault.constprop.0+0xdc>)
    25c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25c2:	039a      	lsls	r2, r3, #14
    25c4:	d509      	bpl.n	25da <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    25c6:	4b18      	ldr	r3, [pc, #96]	; (2628 <usage_fault.constprop.0+0xf0>)
    25c8:	9305      	str	r3, [sp, #20]
    25ca:	4811      	ldr	r0, [pc, #68]	; (2610 <usage_fault.constprop.0+0xd8>)
    25cc:	2302      	movs	r3, #2
    25ce:	aa04      	add	r2, sp, #16
    25d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25d4:	9304      	str	r3, [sp, #16]
    25d6:	f004 fc71 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    25da:	4b0e      	ldr	r3, [pc, #56]	; (2614 <usage_fault.constprop.0+0xdc>)
    25dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25de:	03db      	lsls	r3, r3, #15
    25e0:	d509      	bpl.n	25f6 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    25e2:	4b12      	ldr	r3, [pc, #72]	; (262c <usage_fault.constprop.0+0xf4>)
    25e4:	9305      	str	r3, [sp, #20]
    25e6:	480a      	ldr	r0, [pc, #40]	; (2610 <usage_fault.constprop.0+0xd8>)
    25e8:	2302      	movs	r3, #2
    25ea:	aa04      	add	r2, sp, #16
    25ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25f0:	9304      	str	r3, [sp, #16]
    25f2:	f004 fc63 	bl	6ebc <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    25f6:	4a07      	ldr	r2, [pc, #28]	; (2614 <usage_fault.constprop.0+0xdc>)
    25f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25fa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    25fe:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2602:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2604:	6293      	str	r3, [r2, #40]	; 0x28
}
    2606:	b006      	add	sp, #24
    2608:	bd10      	pop	{r4, pc}
    260a:	bf00      	nop
    260c:	0000836f 	.word	0x0000836f
    2610:	00007cec 	.word	0x00007cec
    2614:	e000ed00 	.word	0xe000ed00
    2618:	00008387 	.word	0x00008387
    261c:	0000839a 	.word	0x0000839a
    2620:	000083b4 	.word	0x000083b4
    2624:	000083d2 	.word	0x000083d2
    2628:	000083f7 	.word	0x000083f7
    262c:	00008411 	.word	0x00008411

00002630 <mem_manage_fault>:
{
    2630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2634:	b086      	sub	sp, #24
    2636:	4606      	mov	r6, r0
    2638:	af00      	add	r7, sp, #0
    263a:	4688      	mov	r8, r1
    263c:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    263e:	4b4f      	ldr	r3, [pc, #316]	; (277c <mem_manage_fault+0x14c>)
    2640:	484f      	ldr	r0, [pc, #316]	; (2780 <mem_manage_fault+0x150>)
    2642:	617b      	str	r3, [r7, #20]
    2644:	2502      	movs	r5, #2
    2646:	f107 0210 	add.w	r2, r7, #16
    264a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    264e:	613d      	str	r5, [r7, #16]
    2650:	f004 fc34 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2654:	4b4b      	ldr	r3, [pc, #300]	; (2784 <mem_manage_fault+0x154>)
    2656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2658:	06d8      	lsls	r0, r3, #27
    265a:	d509      	bpl.n	2670 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    265c:	4b4a      	ldr	r3, [pc, #296]	; (2788 <mem_manage_fault+0x158>)
    265e:	4848      	ldr	r0, [pc, #288]	; (2780 <mem_manage_fault+0x150>)
    2660:	f107 0210 	add.w	r2, r7, #16
    2664:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2668:	e9c7 5304 	strd	r5, r3, [r7, #16]
    266c:	f004 fc26 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2670:	4b44      	ldr	r3, [pc, #272]	; (2784 <mem_manage_fault+0x154>)
    2672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2674:	0719      	lsls	r1, r3, #28
    2676:	d50a      	bpl.n	268e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    2678:	4b44      	ldr	r3, [pc, #272]	; (278c <mem_manage_fault+0x15c>)
    267a:	617b      	str	r3, [r7, #20]
    267c:	4840      	ldr	r0, [pc, #256]	; (2780 <mem_manage_fault+0x150>)
    267e:	2302      	movs	r3, #2
    2680:	f107 0210 	add.w	r2, r7, #16
    2684:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2688:	613b      	str	r3, [r7, #16]
    268a:	f004 fc17 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    268e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2784 <mem_manage_fault+0x154>
    2692:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2696:	079a      	lsls	r2, r3, #30
    2698:	d439      	bmi.n	270e <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    269a:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    269e:	4b39      	ldr	r3, [pc, #228]	; (2784 <mem_manage_fault+0x154>)
    26a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26a2:	07d8      	lsls	r0, r3, #31
    26a4:	d50a      	bpl.n	26bc <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    26a6:	4b3a      	ldr	r3, [pc, #232]	; (2790 <mem_manage_fault+0x160>)
    26a8:	617b      	str	r3, [r7, #20]
    26aa:	4835      	ldr	r0, [pc, #212]	; (2780 <mem_manage_fault+0x150>)
    26ac:	2302      	movs	r3, #2
    26ae:	f107 0210 	add.w	r2, r7, #16
    26b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26b6:	613b      	str	r3, [r7, #16]
    26b8:	f004 fc00 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    26bc:	4b31      	ldr	r3, [pc, #196]	; (2784 <mem_manage_fault+0x154>)
    26be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c0:	0699      	lsls	r1, r3, #26
    26c2:	d50a      	bpl.n	26da <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    26c4:	4b33      	ldr	r3, [pc, #204]	; (2794 <mem_manage_fault+0x164>)
    26c6:	617b      	str	r3, [r7, #20]
    26c8:	482d      	ldr	r0, [pc, #180]	; (2780 <mem_manage_fault+0x150>)
    26ca:	2302      	movs	r3, #2
    26cc:	f107 0210 	add.w	r2, r7, #16
    26d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26d4:	613b      	str	r3, [r7, #16]
    26d6:	f004 fbf1 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    26da:	4b2a      	ldr	r3, [pc, #168]	; (2784 <mem_manage_fault+0x154>)
    26dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26de:	06d2      	lsls	r2, r2, #27
    26e0:	d43f      	bmi.n	2762 <mem_manage_fault+0x132>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    26e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    26e4:	0790      	lsls	r0, r2, #30
    26e6:	d43c      	bmi.n	2762 <mem_manage_fault+0x132>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    26e8:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    26ea:	4b26      	ldr	r3, [pc, #152]	; (2784 <mem_manage_fault+0x154>)
    26ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26ee:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    26f0:	bf42      	ittt	mi
    26f2:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    26f4:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    26f8:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    26fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    26fc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2700:	629a      	str	r2, [r3, #40]	; 0x28
}
    2702:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2704:	2300      	movs	r3, #0
    2706:	7023      	strb	r3, [r4, #0]
}
    2708:	46bd      	mov	sp, r7
    270a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    270e:	46e9      	mov	r9, sp
    2710:	4b21      	ldr	r3, [pc, #132]	; (2798 <mem_manage_fault+0x168>)
    2712:	617b      	str	r3, [r7, #20]
    2714:	481a      	ldr	r0, [pc, #104]	; (2780 <mem_manage_fault+0x150>)
    2716:	2302      	movs	r3, #2
    2718:	f107 0210 	add.w	r2, r7, #16
    271c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2720:	613b      	str	r3, [r7, #16]
    2722:	f004 fbcb 	bl	6ebc <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2726:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    272a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    272e:	061b      	lsls	r3, r3, #24
    2730:	d5b3      	bpl.n	269a <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2732:	b088      	sub	sp, #32
    2734:	466a      	mov	r2, sp
    2736:	4b19      	ldr	r3, [pc, #100]	; (279c <mem_manage_fault+0x16c>)
    2738:	4811      	ldr	r0, [pc, #68]	; (2780 <mem_manage_fault+0x150>)
    273a:	e9c2 3505 	strd	r3, r5, [r2, #20]
    273e:	2303      	movs	r3, #3
    2740:	f842 3f10 	str.w	r3, [r2, #16]!
    2744:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2748:	f004 fbb8 	bl	6ebc <z_log_msg_static_create.constprop.0>
    274c:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    274e:	f1b8 0f00 	cmp.w	r8, #0
    2752:	d0a4      	beq.n	269e <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2754:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    275c:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2760:	e79d      	b.n	269e <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2762:	685b      	ldr	r3, [r3, #4]
    2764:	0519      	lsls	r1, r3, #20
    2766:	d5bf      	bpl.n	26e8 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2768:	4631      	mov	r1, r6
    276a:	4628      	mov	r0, r5
    276c:	f7ff fdf2 	bl	2354 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2770:	2800      	cmp	r0, #0
    2772:	d0b9      	beq.n	26e8 <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2774:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2778:	2002      	movs	r0, #2
    277a:	e7b6      	b.n	26ea <mem_manage_fault+0xba>
    277c:	0000843c 	.word	0x0000843c
    2780:	00007cec 	.word	0x00007cec
    2784:	e000ed00 	.word	0xe000ed00
    2788:	00008452 	.word	0x00008452
    278c:	000082cc 	.word	0x000082cc
    2790:	000084b3 	.word	0x000084b3
    2794:	00008340 	.word	0x00008340
    2798:	00008485 	.word	0x00008485
    279c:	0000849d 	.word	0x0000849d

000027a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    27a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27a4:	4b78      	ldr	r3, [pc, #480]	; (2988 <z_arm_fault+0x1e8>)
{
    27a6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27a8:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    27ac:	af00      	add	r7, sp, #0
    27ae:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    27b0:	f3c8 0408 	ubfx	r4, r8, #0, #9
    27b4:	2600      	movs	r6, #0
    27b6:	f386 8811 	msr	BASEPRI, r6
    27ba:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    27be:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    27c2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    27c6:	d10e      	bne.n	27e6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    27c8:	f002 030c 	and.w	r3, r2, #12
    27cc:	2b08      	cmp	r3, #8
    27ce:	d10c      	bne.n	27ea <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    27d0:	4b6e      	ldr	r3, [pc, #440]	; (298c <z_arm_fault+0x1ec>)
    27d2:	61fb      	str	r3, [r7, #28]
    27d4:	486e      	ldr	r0, [pc, #440]	; (2990 <z_arm_fault+0x1f0>)
    27d6:	2302      	movs	r3, #2
    27d8:	f107 0218 	add.w	r2, r7, #24
    27dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27e0:	61bb      	str	r3, [r7, #24]
    27e2:	f004 fb6b 	bl	6ebc <z_log_msg_static_create.constprop.0>
		return NULL;
    27e6:	4635      	mov	r5, r6
    27e8:	e003      	b.n	27f2 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    27ea:	0712      	lsls	r2, r2, #28
    27ec:	d401      	bmi.n	27f2 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    27ee:	4605      	mov	r5, r0
			*nested_exc = true;
    27f0:	2601      	movs	r6, #1
	*recoverable = false;
    27f2:	2300      	movs	r3, #0
    27f4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    27f6:	1ee3      	subs	r3, r4, #3
    27f8:	2b09      	cmp	r3, #9
    27fa:	f200 80a5 	bhi.w	2948 <z_arm_fault+0x1a8>
    27fe:	e8df f003 	tbb	[pc, r3]
    2802:	9805      	.short	0x9805
    2804:	a3a3959b 	.word	0xa3a3959b
    2808:	9ea3a3a3 	.word	0x9ea3a3a3
	PR_FAULT_INFO("***** HARD FAULT *****");
    280c:	46e9      	mov	r9, sp
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    280e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 2988 <z_arm_fault+0x1e8>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2812:	4b60      	ldr	r3, [pc, #384]	; (2994 <z_arm_fault+0x1f4>)
    2814:	485e      	ldr	r0, [pc, #376]	; (2990 <z_arm_fault+0x1f0>)
    2816:	61fb      	str	r3, [r7, #28]
    2818:	f04f 0a02 	mov.w	sl, #2
    281c:	f107 0218 	add.w	r2, r7, #24
    2820:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2824:	f8c7 a018 	str.w	sl, [r7, #24]
    2828:	f004 fb48 	bl	6ebc <z_log_msg_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    282c:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2830:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2834:	ea14 040a 	ands.w	r4, r4, sl
	*recoverable = false;
    2838:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    283c:	d00b      	beq.n	2856 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    283e:	4b56      	ldr	r3, [pc, #344]	; (2998 <z_arm_fault+0x1f8>)
    2840:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2844:	4852      	ldr	r0, [pc, #328]	; (2990 <z_arm_fault+0x1f0>)
    2846:	f107 0218 	add.w	r2, r7, #24
    284a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    284e:	f004 fb35 	bl	6ebc <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2852:	2400      	movs	r4, #0
}
    2854:	e00d      	b.n	2872 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2856:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    285a:	2b00      	cmp	r3, #0
    285c:	da25      	bge.n	28aa <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    285e:	4b4f      	ldr	r3, [pc, #316]	; (299c <z_arm_fault+0x1fc>)
    2860:	484b      	ldr	r0, [pc, #300]	; (2990 <z_arm_fault+0x1f0>)
    2862:	f107 0218 	add.w	r2, r7, #24
    2866:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    286a:	e9c7 a306 	strd	sl, r3, [r7, #24]
    286e:	f004 fb25 	bl	6ebc <z_log_msg_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2872:	79fb      	ldrb	r3, [r7, #7]
    2874:	b9ab      	cbnz	r3, 28a2 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2876:	2220      	movs	r2, #32
    2878:	4629      	mov	r1, r5
    287a:	f107 0008 	add.w	r0, r7, #8
    287e:	f004 fb30 	bl	6ee2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2884:	2e00      	cmp	r6, #0
    2886:	d07a      	beq.n	297e <z_arm_fault+0x1de>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2888:	f3c3 0208 	ubfx	r2, r3, #0, #9
    288c:	b922      	cbnz	r2, 2898 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    288e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2892:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2896:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2898:	f107 0108 	add.w	r1, r7, #8
    289c:	4620      	mov	r0, r4
    289e:	f7ff fc2d 	bl	20fc <z_arm_fatal_error>
}
    28a2:	372c      	adds	r7, #44	; 0x2c
    28a4:	46bd      	mov	sp, r7
    28a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    28aa:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    28ae:	005b      	lsls	r3, r3, #1
    28b0:	d5df      	bpl.n	2872 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    28b2:	4b3b      	ldr	r3, [pc, #236]	; (29a0 <z_arm_fault+0x200>)
    28b4:	4836      	ldr	r0, [pc, #216]	; (2990 <z_arm_fault+0x1f0>)
    28b6:	f107 0218 	add.w	r2, r7, #24
    28ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28be:	e9c7 a306 	strd	sl, r3, [r7, #24]
    28c2:	f004 fafb 	bl	6ebc <z_log_msg_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    28c6:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    28c8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    28cc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    28d0:	429a      	cmp	r2, r3
    28d2:	d00a      	beq.n	28ea <z_arm_fault+0x14a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    28d4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    28d8:	b2db      	uxtb	r3, r3
    28da:	b1bb      	cbz	r3, 290c <z_arm_fault+0x16c>
			reason = mem_manage_fault(esf, 1, recoverable);
    28dc:	1dfa      	adds	r2, r7, #7
    28de:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    28e0:	4628      	mov	r0, r5
    28e2:	f7ff fea5 	bl	2630 <mem_manage_fault>
    28e6:	4604      	mov	r4, r0
		break;
    28e8:	e7c3      	b.n	2872 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    28ea:	b088      	sub	sp, #32
    28ec:	682b      	ldr	r3, [r5, #0]
    28ee:	466a      	mov	r2, sp
    28f0:	492c      	ldr	r1, [pc, #176]	; (29a4 <z_arm_fault+0x204>)
    28f2:	4827      	ldr	r0, [pc, #156]	; (2990 <z_arm_fault+0x1f0>)
    28f4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    28f8:	2303      	movs	r3, #3
    28fa:	f842 3f10 	str.w	r3, [r2, #16]!
    28fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2902:	f004 fadb 	bl	6ebc <z_log_msg_static_create.constprop.0>
    2906:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    2908:	682c      	ldr	r4, [r5, #0]
    290a:	e7b2      	b.n	2872 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    290c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2910:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2914:	d004      	beq.n	2920 <z_arm_fault+0x180>
			reason = bus_fault(esf, 1, recoverable);
    2916:	1df9      	adds	r1, r7, #7
    2918:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    291a:	f7ff fd75 	bl	2408 <bus_fault.constprop.0>
    291e:	e7e2      	b.n	28e6 <z_arm_fault+0x146>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2920:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    2924:	0c1b      	lsrs	r3, r3, #16
    2926:	041b      	lsls	r3, r3, #16
    2928:	2b00      	cmp	r3, #0
    292a:	d0a2      	beq.n	2872 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    292c:	f7ff fe04 	bl	2538 <usage_fault.constprop.0>
    2930:	e7d9      	b.n	28e6 <z_arm_fault+0x146>
		reason = mem_manage_fault(esf, 0, recoverable);
    2932:	1dfa      	adds	r2, r7, #7
    2934:	2100      	movs	r1, #0
    2936:	e7d3      	b.n	28e0 <z_arm_fault+0x140>
		reason = bus_fault(esf, 0, recoverable);
    2938:	1df9      	adds	r1, r7, #7
    293a:	2000      	movs	r0, #0
    293c:	e7ed      	b.n	291a <z_arm_fault+0x17a>
	PR_FAULT_INFO(
    293e:	4b1a      	ldr	r3, [pc, #104]	; (29a8 <z_arm_fault+0x208>)
    2940:	61fb      	str	r3, [r7, #28]
    2942:	2302      	movs	r3, #2
    2944:	61bb      	str	r3, [r7, #24]
    2946:	e77d      	b.n	2844 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2948:	4a18      	ldr	r2, [pc, #96]	; (29ac <z_arm_fault+0x20c>)
    294a:	4b19      	ldr	r3, [pc, #100]	; (29b0 <z_arm_fault+0x210>)
    294c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2950:	46e8      	mov	r8, sp
    2952:	b08a      	sub	sp, #40	; 0x28
    2954:	bf18      	it	ne
    2956:	4613      	movne	r3, r2
    2958:	466a      	mov	r2, sp
    295a:	4916      	ldr	r1, [pc, #88]	; (29b4 <z_arm_fault+0x214>)
    295c:	480c      	ldr	r0, [pc, #48]	; (2990 <z_arm_fault+0x1f0>)
    295e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2962:	2302      	movs	r3, #2
    2964:	f882 3020 	strb.w	r3, [r2, #32]
    2968:	3c10      	subs	r4, #16
    296a:	4b13      	ldr	r3, [pc, #76]	; (29b8 <z_arm_fault+0x218>)
    296c:	61d4      	str	r4, [r2, #28]
    296e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2972:	f842 3f10 	str.w	r3, [r2, #16]!
    2976:	f004 faa1 	bl	6ebc <z_log_msg_static_create.constprop.0>
    297a:	46c5      	mov	sp, r8
    297c:	e769      	b.n	2852 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    297e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2982:	f023 0301 	bic.w	r3, r3, #1
    2986:	e786      	b.n	2896 <z_arm_fault+0xf6>
    2988:	e000ed00 	.word	0xe000ed00
    298c:	00008500 	.word	0x00008500
    2990:	00007cec 	.word	0x00007cec
    2994:	0000852b 	.word	0x0000852b
    2998:	00008542 	.word	0x00008542
    299c:	00008563 	.word	0x00008563
    29a0:	00008571 	.word	0x00008571
    29a4:	00008590 	.word	0x00008590
    29a8:	000085ac 	.word	0x000085ac
    29ac:	000084e7 	.word	0x000084e7
    29b0:	000084d2 	.word	0x000084d2
    29b4:	000085d0 	.word	0x000085d0
    29b8:	01000004 	.word	0x01000004

000029bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    29bc:	4a02      	ldr	r2, [pc, #8]	; (29c8 <z_arm_fault_init+0xc>)
    29be:	6953      	ldr	r3, [r2, #20]
    29c0:	f043 0310 	orr.w	r3, r3, #16
    29c4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    29c6:	4770      	bx	lr
    29c8:	e000ed00 	.word	0xe000ed00

000029cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    29cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    29d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    29d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    29d6:	4672      	mov	r2, lr
	bl z_arm_fault
    29d8:	f7ff fee2 	bl	27a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    29dc:	bd01      	pop	{r0, pc}
    29de:	bf00      	nop

000029e0 <z_arm_interrupt_init>:
    29e0:	4804      	ldr	r0, [pc, #16]	; (29f4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    29e2:	2300      	movs	r3, #0
    29e4:	2120      	movs	r1, #32
    29e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    29e8:	3301      	adds	r3, #1
    29ea:	2b30      	cmp	r3, #48	; 0x30
    29ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    29f0:	d1f9      	bne.n	29e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    29f2:	4770      	bx	lr
    29f4:	e000e100 	.word	0xe000e100

000029f8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    29f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    29fa:	f380 8814 	msr	CONTROL, r0
    isb
    29fe:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2a02:	f7fe fc63 	bl	12cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2a06:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2a08:	490d      	ldr	r1, [pc, #52]	; (2a40 <__start+0x48>)
    str r0, [r1]
    2a0a:	6008      	str	r0, [r1, #0]
    dsb
    2a0c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a10:	480c      	ldr	r0, [pc, #48]	; (2a44 <__start+0x4c>)
    msr msp, r0
    2a12:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2a16:	f000 f82b 	bl	2a70 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2a1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2a1c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2a20:	4809      	ldr	r0, [pc, #36]	; (2a48 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2a22:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2a26:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2a28:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2a2c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2a30:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2a32:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2a34:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2a38:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2a3c:	f7ff fbfe 	bl	223c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2a40:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a44:	200018c0 	.word	0x200018c0
    ldr r0, =z_interrupt_stacks
    2a48:	20001a80 	.word	0x20001a80

00002a4c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2a4c:	4907      	ldr	r1, [pc, #28]	; (2a6c <z_arm_clear_arm_mpu_config+0x20>)
    2a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2a52:	2300      	movs	r3, #0
	int num_regions =
    2a54:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2a58:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2a5a:	4293      	cmp	r3, r2
    2a5c:	d100      	bne.n	2a60 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2a5e:	4770      	bx	lr
  MPU->RNR = rnr;
    2a60:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2a64:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2a68:	3301      	adds	r3, #1
    2a6a:	e7f6      	b.n	2a5a <z_arm_clear_arm_mpu_config+0xe>
    2a6c:	e000ed00 	.word	0xe000ed00

00002a70 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2a70:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2a72:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2a74:	2300      	movs	r3, #0
    2a76:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2a7a:	f7ff ffe7 	bl	2a4c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2a7e:	4b14      	ldr	r3, [pc, #80]	; (2ad0 <z_arm_init_arch_hw_at_boot+0x60>)
    2a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2a94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2a9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2aa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2aa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2aa8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2aac:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2ab0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2ab4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2ab8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2abc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2ac0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2ac4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2aca:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2ace:	bd08      	pop	{r3, pc}
    2ad0:	e000e100 	.word	0xe000e100

00002ad4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2ad4:	4b08      	ldr	r3, [pc, #32]	; (2af8 <z_impl_k_thread_abort+0x24>)
    2ad6:	689b      	ldr	r3, [r3, #8]
    2ad8:	4283      	cmp	r3, r0
    2ada:	d10b      	bne.n	2af4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2adc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2ae0:	b143      	cbz	r3, 2af4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ae2:	4b06      	ldr	r3, [pc, #24]	; (2afc <z_impl_k_thread_abort+0x28>)
    2ae4:	685a      	ldr	r2, [r3, #4]
    2ae6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2aea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2af2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2af4:	f003 b932 	b.w	5d5c <z_thread_abort>
    2af8:	20000f3c 	.word	0x20000f3c
    2afc:	e000ed00 	.word	0xe000ed00

00002b00 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2b00:	4b02      	ldr	r3, [pc, #8]	; (2b0c <z_arm_configure_static_mpu_regions+0xc>)
    2b02:	4a03      	ldr	r2, [pc, #12]	; (2b10 <z_arm_configure_static_mpu_regions+0x10>)
    2b04:	4803      	ldr	r0, [pc, #12]	; (2b14 <z_arm_configure_static_mpu_regions+0x14>)
    2b06:	2101      	movs	r1, #1
    2b08:	f000 b890 	b.w	2c2c <arm_core_mpu_configure_static_mpu_regions>
    2b0c:	20040000 	.word	0x20040000
    2b10:	20000000 	.word	0x20000000
    2b14:	00007dd0 	.word	0x00007dd0

00002b18 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2b18:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2b1a:	4b05      	ldr	r3, [pc, #20]	; (2b30 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2b1c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    2b1e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2b20:	4a04      	ldr	r2, [pc, #16]	; (2b34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2b22:	2140      	movs	r1, #64	; 0x40
    2b24:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2b28:	4618      	mov	r0, r3
    2b2a:	2101      	movs	r1, #1
    2b2c:	f000 b888 	b.w	2c40 <arm_core_mpu_configure_dynamic_mpu_regions>
    2b30:	20000e2c 	.word	0x20000e2c
    2b34:	150b0000 	.word	0x150b0000

00002b38 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2b3a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2bf0 <mpu_configure_regions+0xb8>
    2b3e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2b40:	2500      	movs	r5, #0
    2b42:	428d      	cmp	r5, r1
    2b44:	da1a      	bge.n	2b7c <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2b46:	6844      	ldr	r4, [r0, #4]
    2b48:	2c00      	cmp	r4, #0
    2b4a:	d04d      	beq.n	2be8 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2b4c:	b1fb      	cbz	r3, 2b8e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2b4e:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2b52:	ea14 0f0e 	tst.w	r4, lr
    2b56:	d014      	beq.n	2b82 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2b58:	466c      	mov	r4, sp
    2b5a:	b088      	sub	sp, #32
    2b5c:	466a      	mov	r2, sp
    2b5e:	4b25      	ldr	r3, [pc, #148]	; (2bf4 <mpu_configure_regions+0xbc>)
    2b60:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2b64:	2303      	movs	r3, #3
    2b66:	f842 3f10 	str.w	r3, [r2, #16]!
    2b6a:	4823      	ldr	r0, [pc, #140]	; (2bf8 <mpu_configure_regions+0xc0>)
    2b6c:	2300      	movs	r3, #0
    2b6e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2b72:	f7fe fe27 	bl	17c4 <z_impl_z_log_msg_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2b76:	f06f 0215 	mvn.w	r2, #21
    2b7a:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2b7c:	4610      	mov	r0, r2
    2b7e:	46bd      	mov	sp, r7
    2b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2b82:	2c1f      	cmp	r4, #31
    2b84:	d9e8      	bls.n	2b58 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2b86:	6806      	ldr	r6, [r0, #0]
		&&
    2b88:	ea1e 0f06 	tst.w	lr, r6
    2b8c:	d1e4      	bne.n	2b58 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2b8e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2b90:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2b92:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2b96:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2b98:	d914      	bls.n	2bc4 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2b9a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2b9e:	d813      	bhi.n	2bc8 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2ba0:	3c01      	subs	r4, #1
    2ba2:	fab4 f484 	clz	r4, r4
    2ba6:	f1c4 041f 	rsb	r4, r4, #31
    2baa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2bac:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2bae:	ea4e 0404 	orr.w	r4, lr, r4
    2bb2:	d90b      	bls.n	2bcc <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2bb4:	466c      	mov	r4, sp
    2bb6:	b088      	sub	sp, #32
    2bb8:	466b      	mov	r3, sp
    2bba:	4910      	ldr	r1, [pc, #64]	; (2bfc <mpu_configure_regions+0xc4>)
    2bbc:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2bc0:	461a      	mov	r2, r3
    2bc2:	e7cf      	b.n	2b64 <mpu_configure_regions+0x2c>
		return REGION_32B;
    2bc4:	2408      	movs	r4, #8
    2bc6:	e7f1      	b.n	2bac <mpu_configure_regions+0x74>
		return REGION_4G;
    2bc8:	243e      	movs	r4, #62	; 0x3e
    2bca:	e7ef      	b.n	2bac <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bcc:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2bd0:	4316      	orrs	r6, r2
    2bd2:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2bd6:	f044 0401 	orr.w	r4, r4, #1
    2bda:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bde:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2be2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2be4:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2be8:	3501      	adds	r5, #1
    2bea:	300c      	adds	r0, #12
    2bec:	e7a9      	b.n	2b42 <mpu_configure_regions+0xa>
    2bee:	bf00      	nop
    2bf0:	e000ed00 	.word	0xe000ed00
    2bf4:	000085e7 	.word	0x000085e7
    2bf8:	00007cdc 	.word	0x00007cdc
    2bfc:	0000860a 	.word	0x0000860a

00002c00 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2c00:	4b04      	ldr	r3, [pc, #16]	; (2c14 <arm_core_mpu_enable+0x14>)
    2c02:	2205      	movs	r2, #5
    2c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2c08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c0c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	e000ed00 	.word	0xe000ed00

00002c18 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2c18:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2c1c:	4b02      	ldr	r3, [pc, #8]	; (2c28 <arm_core_mpu_disable+0x10>)
    2c1e:	2200      	movs	r2, #0
    2c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2c24:	4770      	bx	lr
    2c26:	bf00      	nop
    2c28:	e000ed00 	.word	0xe000ed00

00002c2c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2c2c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2c2e:	4c03      	ldr	r4, [pc, #12]	; (2c3c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2c30:	2301      	movs	r3, #1
    2c32:	7822      	ldrb	r2, [r4, #0]
    2c34:	f7ff ff80 	bl	2b38 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2c38:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2c3a:	bd10      	pop	{r4, pc}
    2c3c:	20001158 	.word	0x20001158

00002c40 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2c40:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2c42:	4a09      	ldr	r2, [pc, #36]	; (2c68 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2c44:	2300      	movs	r3, #0
    2c46:	7812      	ldrb	r2, [r2, #0]
    2c48:	f7ff ff76 	bl	2b38 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2c4c:	f110 0f16 	cmn.w	r0, #22
    2c50:	d003      	beq.n	2c5a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2c52:	4b06      	ldr	r3, [pc, #24]	; (2c6c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2c54:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2c56:	2807      	cmp	r0, #7
    2c58:	dd00      	ble.n	2c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2c5a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2c5c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2c60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2c64:	3001      	adds	r0, #1
    2c66:	e7f6      	b.n	2c56 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2c68:	20001158 	.word	0x20001158
    2c6c:	e000ed00 	.word	0xe000ed00

00002c70 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2c70:	4914      	ldr	r1, [pc, #80]	; (2cc4 <z_arm_mpu_init+0x54>)
    2c72:	6808      	ldr	r0, [r1, #0]
    2c74:	2808      	cmp	r0, #8
{
    2c76:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2c78:	d821      	bhi.n	2cbe <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2c7a:	f7ff ffcd 	bl	2c18 <arm_core_mpu_disable>
    2c7e:	4c12      	ldr	r4, [pc, #72]	; (2cc8 <z_arm_mpu_init+0x58>)
    2c80:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2c82:	2200      	movs	r2, #0
    2c84:	4290      	cmp	r0, r2
    2c86:	f101 010c 	add.w	r1, r1, #12
    2c8a:	d105      	bne.n	2c98 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2c8c:	4b0f      	ldr	r3, [pc, #60]	; (2ccc <z_arm_mpu_init+0x5c>)
    2c8e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2c90:	f7ff ffb6 	bl	2c00 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2c94:	2000      	movs	r0, #0
}
    2c96:	bd10      	pop	{r4, pc}
    2c98:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c9c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2ca0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2ca4:	4313      	orrs	r3, r2
    2ca6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2caa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2cb2:	f043 0301 	orr.w	r3, r3, #1
    2cb6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2cba:	3201      	adds	r2, #1
    2cbc:	e7e2      	b.n	2c84 <z_arm_mpu_init+0x14>
		return -1;
    2cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cc2:	e7e8      	b.n	2c96 <z_arm_mpu_init+0x26>
    2cc4:	00007ddc 	.word	0x00007ddc
    2cc8:	e000ed00 	.word	0xe000ed00
    2ccc:	20001158 	.word	0x20001158

00002cd0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <__stdout_hook_install+0x8>)
    2cd2:	6018      	str	r0, [r3, #0]
}
    2cd4:	4770      	bx	lr
    2cd6:	bf00      	nop
    2cd8:	2000002c 	.word	0x2000002c

00002cdc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2cdc:	b510      	push	{r4, lr}
	__asm__ volatile(
    2cde:	f04f 0320 	mov.w	r3, #32
    2ce2:	f3ef 8011 	mrs	r0, BASEPRI
    2ce6:	f383 8812 	msr	BASEPRI_MAX, r3
    2cea:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2cee:	4a11      	ldr	r2, [pc, #68]	; (2d34 <nordicsemi_nrf52_init+0x58>)
    2cf0:	2301      	movs	r3, #1
    2cf2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2cfa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2cfe:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2d02:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2d06:	2c08      	cmp	r4, #8
    2d08:	d108      	bne.n	2d1c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d0a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    2d0e:	2905      	cmp	r1, #5
    2d10:	d804      	bhi.n	2d1c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2d12:	4c09      	ldr	r4, [pc, #36]	; (2d38 <nordicsemi_nrf52_init+0x5c>)
    2d14:	5c61      	ldrb	r1, [r4, r1]
    2d16:	b109      	cbz	r1, 2d1c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2d18:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d20:	2201      	movs	r2, #1
    2d22:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2d26:	f380 8811 	msr	BASEPRI, r0
    2d2a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2d2e:	2000      	movs	r0, #0
    2d30:	bd10      	pop	{r4, pc}
    2d32:	bf00      	nop
    2d34:	4001e000 	.word	0x4001e000
    2d38:	00008643 	.word	0x00008643

00002d3c <sys_arch_reboot>:
    *p_gpregret = val;
    2d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d40:	b2c0      	uxtb	r0, r0
    2d42:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2d46:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2d4a:	4905      	ldr	r1, [pc, #20]	; (2d60 <sys_arch_reboot+0x24>)
    2d4c:	4b05      	ldr	r3, [pc, #20]	; (2d64 <sys_arch_reboot+0x28>)
    2d4e:	68ca      	ldr	r2, [r1, #12]
    2d50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2d54:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2d56:	60cb      	str	r3, [r1, #12]
    2d58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2d5c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2d5e:	e7fd      	b.n	2d5c <sys_arch_reboot+0x20>
    2d60:	e000ed00 	.word	0xe000ed00
    2d64:	05fa0004 	.word	0x05fa0004

00002d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2d68:	b120      	cbz	r0, 2d74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2d6a:	4b03      	ldr	r3, [pc, #12]	; (2d78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2d6c:	0180      	lsls	r0, r0, #6
    2d6e:	f043 0301 	orr.w	r3, r3, #1
    2d72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2d74:	4770      	bx	lr
    2d76:	bf00      	nop
    2d78:	00007d20 	.word	0x00007d20

00002d7c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2d7c:	4b08      	ldr	r3, [pc, #32]	; (2da0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2d7e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2d80:	1ac3      	subs	r3, r0, r3
{
    2d82:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2d84:	4907      	ldr	r1, [pc, #28]	; (2da4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2d86:	109b      	asrs	r3, r3, #2
{
    2d88:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2d8a:	4359      	muls	r1, r3
    2d8c:	4806      	ldr	r0, [pc, #24]	; (2da8 <onoff_stop+0x2c>)
    2d8e:	2240      	movs	r2, #64	; 0x40
    2d90:	f004 f8ec 	bl	6f6c <stop>
	notify(mgr, res);
    2d94:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2d96:	4601      	mov	r1, r0
	notify(mgr, res);
    2d98:	4620      	mov	r0, r4
}
    2d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2d9e:	4718      	bx	r3
    2da0:	20000e48 	.word	0x20000e48
    2da4:	b6db6db7 	.word	0xb6db6db7
    2da8:	00007a94 	.word	0x00007a94

00002dac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2dae:	4c0c      	ldr	r4, [pc, #48]	; (2de0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2db0:	4a0c      	ldr	r2, [pc, #48]	; (2de4 <onoff_start+0x38>)
    2db2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2db4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2db6:	9300      	str	r3, [sp, #0]
{
    2db8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2dba:	460b      	mov	r3, r1
    2dbc:	490a      	ldr	r1, [pc, #40]	; (2de8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2dbe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2dc0:	4361      	muls	r1, r4
{
    2dc2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2dc4:	4809      	ldr	r0, [pc, #36]	; (2dec <onoff_start+0x40>)
    2dc6:	f004 f8fe 	bl	6fc6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2dca:	1e01      	subs	r1, r0, #0
    2dcc:	da05      	bge.n	2dda <onoff_start+0x2e>
		notify(mgr, err);
    2dce:	4630      	mov	r0, r6
    2dd0:	462b      	mov	r3, r5
	}
}
    2dd2:	b002      	add	sp, #8
    2dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2dd8:	4718      	bx	r3
}
    2dda:	b002      	add	sp, #8
    2ddc:	bd70      	pop	{r4, r5, r6, pc}
    2dde:	bf00      	nop
    2de0:	20000e48 	.word	0x20000e48
    2de4:	00007035 	.word	0x00007035
    2de8:	b6db6db7 	.word	0xb6db6db7
    2dec:	00007a94 	.word	0x00007a94

00002df0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2df0:	2200      	movs	r2, #0
{
    2df2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2df4:	2101      	movs	r1, #1
{
    2df6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2df8:	4610      	mov	r0, r2
    2dfa:	f7ff fa03 	bl	2204 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2dfe:	480f      	ldr	r0, [pc, #60]	; (2e3c <clk_init+0x4c>)
    2e00:	f001 facc 	bl	439c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2e04:	4b0e      	ldr	r3, [pc, #56]	; (2e40 <clk_init+0x50>)
    2e06:	4298      	cmp	r0, r3
    2e08:	d115      	bne.n	2e36 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2e0a:	f004 fb13 	bl	7434 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2e0e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2e10:	490c      	ldr	r1, [pc, #48]	; (2e44 <clk_init+0x54>)
    2e12:	4630      	mov	r0, r6
    2e14:	f003 fced 	bl	67f2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2e18:	2800      	cmp	r0, #0
    2e1a:	db0b      	blt.n	2e34 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2e1c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2e1e:	4909      	ldr	r1, [pc, #36]	; (2e44 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2e20:	2501      	movs	r5, #1
    2e22:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2e24:	f104 001c 	add.w	r0, r4, #28
    2e28:	f003 fce3 	bl	67f2 <onoff_manager_init>
		if (err < 0) {
    2e2c:	2800      	cmp	r0, #0
    2e2e:	db01      	blt.n	2e34 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2e30:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2e32:	2000      	movs	r0, #0
}
    2e34:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2e36:	f06f 0004 	mvn.w	r0, #4
    2e3a:	e7fb      	b.n	2e34 <clk_init+0x44>
    2e3c:	00002e7d 	.word	0x00002e7d
    2e40:	0bad0000 	.word	0x0bad0000
    2e44:	00007e30 	.word	0x00007e30

00002e48 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2e48:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2e4a:	230c      	movs	r3, #12
    2e4c:	4809      	ldr	r0, [pc, #36]	; (2e74 <clkstarted_handle.constprop.0+0x2c>)
    2e4e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2e50:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2e52:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2e54:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2e58:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2e5a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2e5c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2e5e:	4418      	add	r0, r3
    2e60:	f004 f871 	bl	6f46 <set_on_state>
	if (callback) {
    2e64:	b12d      	cbz	r5, 2e72 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2e66:	4632      	mov	r2, r6
    2e68:	462b      	mov	r3, r5
    2e6a:	4803      	ldr	r0, [pc, #12]	; (2e78 <clkstarted_handle.constprop.0+0x30>)
}
    2e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2e70:	4718      	bx	r3
}
    2e72:	bd70      	pop	{r4, r5, r6, pc}
    2e74:	20000e48 	.word	0x20000e48
    2e78:	00007a94 	.word	0x00007a94

00002e7c <clock_event_handler>:
	switch (event) {
    2e7c:	b110      	cbz	r0, 2e84 <clock_event_handler+0x8>
    2e7e:	2801      	cmp	r0, #1
    2e80:	d004      	beq.n	2e8c <clock_event_handler+0x10>
    2e82:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2e84:	4b03      	ldr	r3, [pc, #12]	; (2e94 <clock_event_handler+0x18>)
    2e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2e88:	075b      	lsls	r3, r3, #29
    2e8a:	d101      	bne.n	2e90 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2e8c:	f7ff bfdc 	b.w	2e48 <clkstarted_handle.constprop.0>
}
    2e90:	4770      	bx	lr
    2e92:	bf00      	nop
    2e94:	20000e48 	.word	0x20000e48

00002e98 <generic_hfclk_start>:
{
    2e98:	b508      	push	{r3, lr}
	__asm__ volatile(
    2e9a:	f04f 0320 	mov.w	r3, #32
    2e9e:	f3ef 8111 	mrs	r1, BASEPRI
    2ea2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ea6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2eaa:	4a12      	ldr	r2, [pc, #72]	; (2ef4 <generic_hfclk_start+0x5c>)
    2eac:	6813      	ldr	r3, [r2, #0]
    2eae:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2eb2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2eb6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2eb8:	d00c      	beq.n	2ed4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ebe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ec2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2ec6:	f013 0301 	ands.w	r3, r3, #1
    2eca:	d003      	beq.n	2ed4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2ecc:	480a      	ldr	r0, [pc, #40]	; (2ef8 <generic_hfclk_start+0x60>)
    2ece:	f004 f83a 	bl	6f46 <set_on_state>
			already_started = true;
    2ed2:	2301      	movs	r3, #1
	__asm__ volatile(
    2ed4:	f381 8811 	msr	BASEPRI, r1
    2ed8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2edc:	b123      	cbz	r3, 2ee8 <generic_hfclk_start+0x50>
}
    2ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2ee2:	2000      	movs	r0, #0
    2ee4:	f7ff bfb0 	b.w	2e48 <clkstarted_handle.constprop.0>
}
    2ee8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2eec:	2001      	movs	r0, #1
    2eee:	f004 baae 	b.w	744e <nrfx_clock_start>
    2ef2:	bf00      	nop
    2ef4:	20000e98 	.word	0x20000e98
    2ef8:	20000e88 	.word	0x20000e88

00002efc <api_blocking_start>:
{
    2efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2efe:	2200      	movs	r2, #0
    2f00:	2301      	movs	r3, #1
    2f02:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2f06:	4a09      	ldr	r2, [pc, #36]	; (2f2c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2f08:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2f0c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2f0e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2f12:	f004 f888 	bl	7026 <api_start>
	if (err < 0) {
    2f16:	2800      	cmp	r0, #0
    2f18:	db05      	blt.n	2f26 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f1e:	2300      	movs	r3, #0
    2f20:	4668      	mov	r0, sp
    2f22:	f002 fa79 	bl	5418 <z_impl_k_sem_take>
}
    2f26:	b005      	add	sp, #20
    2f28:	f85d fb04 	ldr.w	pc, [sp], #4
    2f2c:	00007053 	.word	0x00007053

00002f30 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f30:	4b09      	ldr	r3, [pc, #36]	; (2f58 <generic_hfclk_stop+0x28>)
    2f32:	f3bf 8f5b 	dmb	ish
    2f36:	e853 2f00 	ldrex	r2, [r3]
    2f3a:	f022 0102 	bic.w	r1, r2, #2
    2f3e:	e843 1000 	strex	r0, r1, [r3]
    2f42:	2800      	cmp	r0, #0
    2f44:	d1f7      	bne.n	2f36 <generic_hfclk_stop+0x6>
    2f46:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2f4a:	07d3      	lsls	r3, r2, #31
    2f4c:	d402      	bmi.n	2f54 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2f4e:	2001      	movs	r0, #1
    2f50:	f004 baba 	b.w	74c8 <nrfx_clock_stop>
}
    2f54:	4770      	bx	lr
    2f56:	bf00      	nop
    2f58:	20000e98 	.word	0x20000e98

00002f5c <z_nrf_clock_control_lf_on>:
{
    2f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2f60:	4939      	ldr	r1, [pc, #228]	; (3048 <z_nrf_clock_control_lf_on+0xec>)
    2f62:	f3bf 8f5b 	dmb	ish
    2f66:	4607      	mov	r7, r0
    2f68:	2201      	movs	r2, #1
    2f6a:	e851 3f00 	ldrex	r3, [r1]
    2f6e:	e841 2000 	strex	r0, r2, [r1]
    2f72:	2800      	cmp	r0, #0
    2f74:	d1f9      	bne.n	2f6a <z_nrf_clock_control_lf_on+0xe>
    2f76:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2f7a:	b933      	cbnz	r3, 2f8a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2f7c:	4933      	ldr	r1, [pc, #204]	; (304c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2f7e:	4834      	ldr	r0, [pc, #208]	; (3050 <z_nrf_clock_control_lf_on+0xf4>)
    2f80:	604b      	str	r3, [r1, #4]
    2f82:	60cb      	str	r3, [r1, #12]
    2f84:	608a      	str	r2, [r1, #8]
    2f86:	f003 fc47 	bl	6818 <onoff_request>
	switch (start_mode) {
    2f8a:	1e7b      	subs	r3, r7, #1
    2f8c:	2b01      	cmp	r3, #1
    2f8e:	d82f      	bhi.n	2ff0 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2f90:	2f01      	cmp	r7, #1
    2f92:	d107      	bne.n	2fa4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f98:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2f9c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2fa0:	2b01      	cmp	r3, #1
    2fa2:	d025      	beq.n	2ff0 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2fa4:	f004 fb6b 	bl	767e <k_is_in_isr>
    2fa8:	4604      	mov	r4, r0
    2faa:	b918      	cbnz	r0, 2fb4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2fac:	4b29      	ldr	r3, [pc, #164]	; (3054 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d141      	bne.n	3038 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2fb4:	f04f 0320 	mov.w	r3, #32
    2fb8:	f3ef 8611 	mrs	r6, BASEPRI
    2fbc:	f383 8812 	msr	BASEPRI_MAX, r3
    2fc0:	f3bf 8f6f 	isb	sy
    2fc4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2fc6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3058 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2fca:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2fce:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2fd2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2fd6:	03d2      	lsls	r2, r2, #15
    2fd8:	d50c      	bpl.n	2ff4 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2fda:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2fde:	2b01      	cmp	r3, #1
    2fe0:	d001      	beq.n	2fe6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2fe2:	2f01      	cmp	r7, #1
    2fe4:	d106      	bne.n	2ff4 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2fe6:	b30c      	cbz	r4, 302c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2fe8:	f386 8811 	msr	BASEPRI, r6
    2fec:	f3bf 8f6f 	isb	sy
}
    2ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2ff4:	b1ac      	cbz	r4, 3022 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2ff6:	4630      	mov	r0, r6
    2ff8:	f7ff f876 	bl	20e8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2ffc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3000:	2b00      	cmp	r3, #0
    3002:	d1e4      	bne.n	2fce <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3004:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3008:	2a00      	cmp	r2, #0
    300a:	d0e0      	beq.n	2fce <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    300c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3010:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3014:	2301      	movs	r3, #1
    3016:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    301a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    301e:	60ab      	str	r3, [r5, #8]
}
    3020:	e7d5      	b.n	2fce <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    3022:	2100      	movs	r1, #0
    3024:	2021      	movs	r0, #33	; 0x21
    3026:	f002 fe79 	bl	5d1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    302a:	e7e7      	b.n	2ffc <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    302c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3030:	2202      	movs	r2, #2
    3032:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3036:	e7db      	b.n	2ff0 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    3038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    303c:	2202      	movs	r2, #2
    303e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3042:	4606      	mov	r6, r0
}
    3044:	e7bf      	b.n	2fc6 <z_nrf_clock_control_lf_on+0x6a>
    3046:	bf00      	nop
    3048:	20000e9c 	.word	0x20000e9c
    304c:	20000e38 	.word	0x20000e38
    3050:	20000e64 	.word	0x20000e64
    3054:	2000115e 	.word	0x2000115e
    3058:	e000e100 	.word	0xe000e100

0000305c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    305c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    305e:	4b08      	ldr	r3, [pc, #32]	; (3080 <uart_console_init+0x24>)
    3060:	4808      	ldr	r0, [pc, #32]	; (3084 <uart_console_init+0x28>)
    3062:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3064:	f004 fab9 	bl	75da <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3068:	b138      	cbz	r0, 307a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    306a:	4807      	ldr	r0, [pc, #28]	; (3088 <uart_console_init+0x2c>)
    306c:	f7ff fe30 	bl	2cd0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3070:	4805      	ldr	r0, [pc, #20]	; (3088 <uart_console_init+0x2c>)
    3072:	f7fd fc47 	bl	904 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3076:	2000      	movs	r0, #0
}
    3078:	bd08      	pop	{r3, pc}
		return -ENODEV;
    307a:	f06f 0012 	mvn.w	r0, #18
    307e:	e7fb      	b.n	3078 <uart_console_init+0x1c>
    3080:	20000ea0 	.word	0x20000ea0
    3084:	00007af4 	.word	0x00007af4
    3088:	0000308d 	.word	0x0000308d

0000308c <console_out>:
	if ('\n' == c) {
    308c:	280a      	cmp	r0, #10
{
    308e:	b538      	push	{r3, r4, r5, lr}
    3090:	4d07      	ldr	r5, [pc, #28]	; (30b0 <console_out+0x24>)
    3092:	4604      	mov	r4, r0
	if ('\n' == c) {
    3094:	d104      	bne.n	30a0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    3096:	6828      	ldr	r0, [r5, #0]
    3098:	6883      	ldr	r3, [r0, #8]
    309a:	210d      	movs	r1, #13
    309c:	685b      	ldr	r3, [r3, #4]
    309e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    30a0:	6828      	ldr	r0, [r5, #0]
    30a2:	6883      	ldr	r3, [r0, #8]
    30a4:	b2e1      	uxtb	r1, r4
    30a6:	685b      	ldr	r3, [r3, #4]
    30a8:	4798      	blx	r3
}
    30aa:	4620      	mov	r0, r4
    30ac:	bd38      	pop	{r3, r4, r5, pc}
    30ae:	bf00      	nop
    30b0:	20000ea0 	.word	0x20000ea0

000030b4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    30b4:	b530      	push	{r4, r5, lr}
	return port->config;
    30b6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    30b8:	7b04      	ldrb	r4, [r0, #12]
    30ba:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    30be:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    30c2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    30c6:	b085      	sub	sp, #20
    30c8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    30cc:	d105      	bne.n	30da <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    30ce:	4628      	mov	r0, r5
    30d0:	f001 fbe6 	bl	48a0 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    30d4:	2000      	movs	r0, #0
}
    30d6:	b005      	add	sp, #20
    30d8:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    30da:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    30de:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    30e2:	d134      	bne.n	314e <gpio_nrfx_pin_interrupt_configure+0x9a>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    30e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    30e8:	bf0c      	ite	eq
    30ea:	2304      	moveq	r3, #4
    30ec:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    30ee:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    30f2:	6883      	ldr	r3, [r0, #8]
    30f4:	fa23 f101 	lsr.w	r1, r3, r1
    30f8:	07c9      	lsls	r1, r1, #31
    30fa:	d41a      	bmi.n	3132 <gpio_nrfx_pin_interrupt_configure+0x7e>
    30fc:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3100:	d117      	bne.n	3132 <gpio_nrfx_pin_interrupt_configure+0x7e>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3102:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    3104:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3106:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    310a:	4a1c      	ldr	r2, [pc, #112]	; (317c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    310c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3110:	bf18      	it	ne
    3112:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    311a:	07db      	lsls	r3, r3, #31
    311c:	d409      	bmi.n	3132 <gpio_nrfx_pin_interrupt_configure+0x7e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    311e:	f10d 0407 	add.w	r4, sp, #7
    3122:	4621      	mov	r1, r4
    3124:	4628      	mov	r0, r5
    3126:	f001 fb1f 	bl	4768 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    312a:	4b15      	ldr	r3, [pc, #84]	; (3180 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    312c:	4298      	cmp	r0, r3
    312e:	d019      	beq.n	3164 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    3130:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3132:	2300      	movs	r3, #0
    3134:	4619      	mov	r1, r3
    3136:	aa02      	add	r2, sp, #8
    3138:	4628      	mov	r0, r5
    313a:	f001 f9ef 	bl	451c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    313e:	4b11      	ldr	r3, [pc, #68]	; (3184 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3140:	4298      	cmp	r0, r3
    3142:	d118      	bne.n	3176 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3144:	2101      	movs	r1, #1
    3146:	4628      	mov	r0, r5
    3148:	f001 fb62 	bl	4810 <nrfx_gpiote_trigger_enable>
    314c:	e7c2      	b.n	30d4 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    314e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3152:	d005      	beq.n	3160 <gpio_nrfx_pin_interrupt_configure+0xac>
    3154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3158:	bf0c      	ite	eq
    315a:	2302      	moveq	r3, #2
    315c:	2301      	movne	r3, #1
    315e:	e7c6      	b.n	30ee <gpio_nrfx_pin_interrupt_configure+0x3a>
    3160:	2303      	movs	r3, #3
    3162:	e7c4      	b.n	30ee <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    3164:	4620      	mov	r0, r4
    3166:	f001 fb4d 	bl	4804 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    316a:	4b06      	ldr	r3, [pc, #24]	; (3184 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    316c:	4298      	cmp	r0, r3
    316e:	d0df      	beq.n	3130 <gpio_nrfx_pin_interrupt_configure+0x7c>
				return -ENOMEM;
    3170:	f06f 000b 	mvn.w	r0, #11
    3174:	e7af      	b.n	30d6 <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    3176:	f06f 0015 	mvn.w	r0, #21
    317a:	e7ac      	b.n	30d6 <gpio_nrfx_pin_interrupt_configure+0x22>
    317c:	50000300 	.word	0x50000300
    3180:	0bad0004 	.word	0x0bad0004
    3184:	0bad0000 	.word	0x0bad0000

00003188 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3188:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    318a:	f001 fb2b 	bl	47e4 <nrfx_gpiote_is_init>
    318e:	4604      	mov	r4, r0
    3190:	b968      	cbnz	r0, 31ae <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3192:	f001 faff 	bl	4794 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3196:	4b08      	ldr	r3, [pc, #32]	; (31b8 <gpio_nrfx_init+0x30>)
    3198:	4298      	cmp	r0, r3
    319a:	d10a      	bne.n	31b2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    319c:	4807      	ldr	r0, [pc, #28]	; (31bc <gpio_nrfx_init+0x34>)
    319e:	4621      	mov	r1, r4
    31a0:	f001 fadc 	bl	475c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    31a4:	4622      	mov	r2, r4
    31a6:	2105      	movs	r1, #5
    31a8:	2006      	movs	r0, #6
    31aa:	f7ff f82b 	bl	2204 <z_arm_irq_priority_set>
		return 0;
    31ae:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    31b0:	bd10      	pop	{r4, pc}
		return -EIO;
    31b2:	f06f 0004 	mvn.w	r0, #4
    31b6:	e7fb      	b.n	31b0 <gpio_nrfx_init+0x28>
    31b8:	0bad0000 	.word	0x0bad0000
    31bc:	000031c1 	.word	0x000031c1

000031c0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    31c0:	0942      	lsrs	r2, r0, #5
{
    31c2:	b570      	push	{r4, r5, r6, lr}
    31c4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    31c6:	d002      	beq.n	31ce <nrfx_gpio_handler+0xe>
    31c8:	2a01      	cmp	r2, #1
    31ca:	d015      	beq.n	31f8 <nrfx_gpio_handler+0x38>
}
    31cc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    31ce:	4e0b      	ldr	r6, [pc, #44]	; (31fc <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    31d0:	6932      	ldr	r2, [r6, #16]
    31d2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    31d4:	2900      	cmp	r1, #0
    31d6:	d0f9      	beq.n	31cc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    31d8:	f003 031f 	and.w	r3, r3, #31
    31dc:	2501      	movs	r5, #1
    31de:	680c      	ldr	r4, [r1, #0]
    31e0:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    31e2:	688a      	ldr	r2, [r1, #8]
    31e4:	402a      	ands	r2, r5
    31e6:	d002      	beq.n	31ee <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    31e8:	684b      	ldr	r3, [r1, #4]
    31ea:	4630      	mov	r0, r6
    31ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    31ee:	2c00      	cmp	r4, #0
    31f0:	d0ec      	beq.n	31cc <nrfx_gpio_handler+0xc>
    31f2:	4621      	mov	r1, r4
    31f4:	6824      	ldr	r4, [r4, #0]
    31f6:	e7f4      	b.n	31e2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    31f8:	4e01      	ldr	r6, [pc, #4]	; (3200 <nrfx_gpio_handler+0x40>)
    31fa:	e7e9      	b.n	31d0 <nrfx_gpio_handler+0x10>
    31fc:	00007aac 	.word	0x00007aac
    3200:	00007ac4 	.word	0x00007ac4

00003204 <gpio_nrfx_pin_configure>:
{
    3204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3208:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    320c:	f898 300c 	ldrb.w	r3, [r8, #12]
    3210:	f001 061f 	and.w	r6, r1, #31
{
    3214:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3216:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    321a:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    321c:	4630      	mov	r0, r6
    321e:	f10d 0103 	add.w	r1, sp, #3
{
    3222:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3224:	f001 faa0 	bl	4768 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3228:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    322c:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    322e:	d10b      	bne.n	3248 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3230:	4630      	mov	r0, r6
    3232:	f001 fb5d 	bl	48f0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3236:	4b43      	ldr	r3, [pc, #268]	; (3344 <gpio_nrfx_pin_configure+0x140>)
    3238:	4599      	cmp	r9, r3
    323a:	d103      	bne.n	3244 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    323c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3240:	f001 fada 	bl	47f8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3244:	2000      	movs	r0, #0
    3246:	e057      	b.n	32f8 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3248:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    324a:	4619      	mov	r1, r3
    324c:	aa02      	add	r2, sp, #8
    324e:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3250:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3254:	f001 f962 	bl	451c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3258:	4b3a      	ldr	r3, [pc, #232]	; (3344 <gpio_nrfx_pin_configure+0x140>)
    325a:	4298      	cmp	r0, r3
    325c:	d002      	beq.n	3264 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    325e:	f06f 0015 	mvn.w	r0, #21
    3262:	e049      	b.n	32f8 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
    3264:	4581      	cmp	r9, r0
    3266:	d103      	bne.n	3270 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    3268:	f89d 0003 	ldrb.w	r0, [sp, #3]
    326c:	f001 fac4 	bl	47f8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3270:	03a5      	lsls	r5, r4, #14
    3272:	d554      	bpl.n	331e <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3274:	f240 3306 	movw	r3, #774	; 0x306
    3278:	4023      	ands	r3, r4
    327a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    327e:	d03e      	beq.n	32fe <gpio_nrfx_pin_configure+0xfa>
    3280:	d80c      	bhi.n	329c <gpio_nrfx_pin_configure+0x98>
    3282:	2b06      	cmp	r3, #6
    3284:	d015      	beq.n	32b2 <gpio_nrfx_pin_configure+0xae>
    3286:	d804      	bhi.n	3292 <gpio_nrfx_pin_configure+0x8e>
    3288:	b19b      	cbz	r3, 32b2 <gpio_nrfx_pin_configure+0xae>
    328a:	2b02      	cmp	r3, #2
    328c:	d1e7      	bne.n	325e <gpio_nrfx_pin_configure+0x5a>
    328e:	2304      	movs	r3, #4
    3290:	e00f      	b.n	32b2 <gpio_nrfx_pin_configure+0xae>
    3292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3296:	d1e2      	bne.n	325e <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    3298:	2301      	movs	r3, #1
    329a:	e00a      	b.n	32b2 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    329c:	f240 2202 	movw	r2, #514	; 0x202
    32a0:	4293      	cmp	r3, r2
    32a2:	d02e      	beq.n	3302 <gpio_nrfx_pin_configure+0xfe>
    32a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    32a8:	d02d      	beq.n	3306 <gpio_nrfx_pin_configure+0x102>
    32aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    32ae:	d1d6      	bne.n	325e <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    32b0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    32b2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    32b6:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    32ba:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    32be:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    32c0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    32c4:	bf54      	ite	pl
    32c6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    32ca:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    32cc:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    32ce:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    32d2:	d51a      	bpl.n	330a <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    32d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    32d8:	2101      	movs	r1, #1
    32da:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    32de:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    32e2:	2200      	movs	r2, #0
    32e4:	a901      	add	r1, sp, #4
    32e6:	4630      	mov	r0, r6
    32e8:	f001 f9c6 	bl	4678 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    32ec:	4b15      	ldr	r3, [pc, #84]	; (3344 <gpio_nrfx_pin_configure+0x140>)
    32ee:	4298      	cmp	r0, r3
    32f0:	bf14      	ite	ne
    32f2:	f06f 0015 	mvnne.w	r0, #21
    32f6:	2000      	moveq	r0, #0
}
    32f8:	b005      	add	sp, #20
    32fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    32fe:	2307      	movs	r3, #7
    3300:	e7d7      	b.n	32b2 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    3302:	2305      	movs	r3, #5
    3304:	e7d5      	b.n	32b2 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    3306:	2303      	movs	r3, #3
    3308:	e7d3      	b.n	32b2 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    330a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    330c:	bf41      	itttt	mi
    330e:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    3312:	2101      	movmi	r1, #1
    3314:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    3318:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
    331c:	e7e1      	b.n	32e2 <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
    331e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3320:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3324:	bf54      	ite	pl
    3326:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    332a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    332c:	461a      	mov	r2, r3
    332e:	a901      	add	r1, sp, #4
    3330:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
    3332:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3336:	f001 f8f1 	bl	451c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    333a:	4b02      	ldr	r3, [pc, #8]	; (3344 <gpio_nrfx_pin_configure+0x140>)
    333c:	4298      	cmp	r0, r3
    333e:	d081      	beq.n	3244 <gpio_nrfx_pin_configure+0x40>
    3340:	e78d      	b.n	325e <gpio_nrfx_pin_configure+0x5a>
    3342:	bf00      	nop
    3344:	0bad0000 	.word	0x0bad0000

00003348 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3348:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    334a:	794b      	ldrb	r3, [r1, #5]
    334c:	2b01      	cmp	r3, #1
    334e:	d026      	beq.n	339e <uarte_nrfx_configure+0x56>
    3350:	2b03      	cmp	r3, #3
    3352:	d121      	bne.n	3398 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3354:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3356:	798b      	ldrb	r3, [r1, #6]
    3358:	2b03      	cmp	r3, #3
    335a:	d11d      	bne.n	3398 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    335c:	79cc      	ldrb	r4, [r1, #7]
    335e:	b10c      	cbz	r4, 3364 <uarte_nrfx_configure+0x1c>
    3360:	2c01      	cmp	r4, #1
    3362:	d119      	bne.n	3398 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3364:	790a      	ldrb	r2, [r1, #4]
    3366:	b112      	cbz	r2, 336e <uarte_nrfx_configure+0x26>
    3368:	2a02      	cmp	r2, #2
    336a:	d115      	bne.n	3398 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    336c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    336e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3370:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3372:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3376:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3378:	d065      	beq.n	3446 <uarte_nrfx_configure+0xfe>
    337a:	d82d      	bhi.n	33d8 <uarte_nrfx_configure+0x90>
    337c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3380:	d064      	beq.n	344c <uarte_nrfx_configure+0x104>
    3382:	d816      	bhi.n	33b2 <uarte_nrfx_configure+0x6a>
    3384:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3388:	d062      	beq.n	3450 <uarte_nrfx_configure+0x108>
    338a:	d80a      	bhi.n	33a2 <uarte_nrfx_configure+0x5a>
    338c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3390:	d061      	beq.n	3456 <uarte_nrfx_configure+0x10e>
    3392:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3396:	d061      	beq.n	345c <uarte_nrfx_configure+0x114>
    3398:	f06f 0085 	mvn.w	r0, #133	; 0x85
    339c:	e052      	b.n	3444 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    339e:	2600      	movs	r6, #0
    33a0:	e7d9      	b.n	3356 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    33a2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    33a6:	d05c      	beq.n	3462 <uarte_nrfx_configure+0x11a>
    33a8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    33ac:	d1f4      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    33ae:	4b37      	ldr	r3, [pc, #220]	; (348c <uarte_nrfx_configure+0x144>)
    33b0:	e03c      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33b2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    33b6:	d057      	beq.n	3468 <uarte_nrfx_configure+0x120>
    33b8:	d807      	bhi.n	33ca <uarte_nrfx_configure+0x82>
    33ba:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    33be:	d055      	beq.n	346c <uarte_nrfx_configure+0x124>
    33c0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    33c4:	d1e8      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    33c6:	4b32      	ldr	r3, [pc, #200]	; (3490 <uarte_nrfx_configure+0x148>)
    33c8:	e030      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33ca:	f647 2712 	movw	r7, #31250	; 0x7a12
    33ce:	42bb      	cmp	r3, r7
    33d0:	d1e2      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    33d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    33d6:	e029      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33d8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    33dc:	d048      	beq.n	3470 <uarte_nrfx_configure+0x128>
    33de:	d813      	bhi.n	3408 <uarte_nrfx_configure+0xc0>
    33e0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    33e4:	d047      	beq.n	3476 <uarte_nrfx_configure+0x12e>
    33e6:	d809      	bhi.n	33fc <uarte_nrfx_configure+0xb4>
    33e8:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    33ec:	42bb      	cmp	r3, r7
    33ee:	d044      	beq.n	347a <uarte_nrfx_configure+0x132>
    33f0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    33f4:	d1d0      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    33f6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    33fa:	e017      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33fc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3400:	d1ca      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3402:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3406:	e011      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3408:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    340c:	d038      	beq.n	3480 <uarte_nrfx_configure+0x138>
    340e:	d808      	bhi.n	3422 <uarte_nrfx_configure+0xda>
    3410:	4f20      	ldr	r7, [pc, #128]	; (3494 <uarte_nrfx_configure+0x14c>)
    3412:	42bb      	cmp	r3, r7
    3414:	d037      	beq.n	3486 <uarte_nrfx_configure+0x13e>
    3416:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    341a:	d1bd      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    341c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3420:	e004      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3422:	4f1d      	ldr	r7, [pc, #116]	; (3498 <uarte_nrfx_configure+0x150>)
    3424:	42bb      	cmp	r3, r7
    3426:	d1b7      	bne.n	3398 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3428:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    342c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    342e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3432:	1d03      	adds	r3, r0, #4
    3434:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3436:	4334      	orrs	r4, r6
    3438:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    343a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    343e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3442:	2000      	movs	r0, #0
}
    3444:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3446:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    344a:	e7ef      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    344c:	4b13      	ldr	r3, [pc, #76]	; (349c <uarte_nrfx_configure+0x154>)
    344e:	e7ed      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3450:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3454:	e7ea      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3456:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    345a:	e7e7      	b.n	342c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    345c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3460:	e7e4      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3462:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3466:	e7e1      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3468:	4b0d      	ldr	r3, [pc, #52]	; (34a0 <uarte_nrfx_configure+0x158>)
    346a:	e7df      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    346c:	4b0d      	ldr	r3, [pc, #52]	; (34a4 <uarte_nrfx_configure+0x15c>)
    346e:	e7dd      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3470:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3474:	e7da      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3476:	4b0c      	ldr	r3, [pc, #48]	; (34a8 <uarte_nrfx_configure+0x160>)
    3478:	e7d8      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    347a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    347e:	e7d5      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3480:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3484:	e7d2      	b.n	342c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3486:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    348a:	e7cf      	b.n	342c <uarte_nrfx_configure+0xe4>
    348c:	0013b000 	.word	0x0013b000
    3490:	004ea000 	.word	0x004ea000
    3494:	0003d090 	.word	0x0003d090
    3498:	000f4240 	.word	0x000f4240
    349c:	00275000 	.word	0x00275000
    34a0:	0075c000 	.word	0x0075c000
    34a4:	003af000 	.word	0x003af000
    34a8:	013a9000 	.word	0x013a9000

000034ac <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    34ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    34b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    34b4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    34b6:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    34ba:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    34be:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    34c0:	2100      	movs	r1, #0
    34c2:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    34c6:	4607      	mov	r7, r0
	data->dev = dev;
    34c8:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    34ca:	466a      	mov	r2, sp
    34cc:	4648      	mov	r0, r9
    34ce:	f003 fea8 	bl	7222 <pinctrl_lookup_state>
	if (ret < 0) {
    34d2:	1e05      	subs	r5, r0, #0
    34d4:	db26      	blt.n	3524 <uarte_instance_init.constprop.0+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    34d6:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    34d8:	f8d9 2000 	ldr.w	r2, [r9]
    34dc:	7919      	ldrb	r1, [r3, #4]
    34de:	6818      	ldr	r0, [r3, #0]
    34e0:	f003 febc 	bl	725c <pinctrl_configure_pins>
	if (err < 0) {
    34e4:	1e05      	subs	r5, r0, #0
    34e6:	db1d      	blt.n	3524 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    34e8:	1d31      	adds	r1, r6, #4
    34ea:	4638      	mov	r0, r7
    34ec:	f7ff ff2c 	bl	3348 <uarte_nrfx_configure>
	if (err) {
    34f0:	4605      	mov	r5, r0
    34f2:	b9b8      	cbnz	r0, 3524 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    34f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    34f8:	0799      	lsls	r1, r3, #30
    34fa:	d52a      	bpl.n	3552 <uarte_instance_init.constprop.0+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    34fc:	f106 0018 	add.w	r0, r6, #24
    3500:	f001 faf0 	bl	4ae4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3504:	4b27      	ldr	r3, [pc, #156]	; (35a4 <uarte_instance_init.constprop.0+0xf8>)
    3506:	4298      	cmp	r0, r3
    3508:	d010      	beq.n	352c <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    350a:	4b27      	ldr	r3, [pc, #156]	; (35a8 <uarte_instance_init.constprop.0+0xfc>)
    350c:	9305      	str	r3, [sp, #20]
    350e:	2302      	movs	r3, #2
    3510:	9304      	str	r3, [sp, #16]
    3512:	4826      	ldr	r0, [pc, #152]	; (35ac <uarte_instance_init.constprop.0+0x100>)
    3514:	462b      	mov	r3, r5
    3516:	aa04      	add	r2, sp, #16
    3518:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    351c:	f06f 0504 	mvn.w	r5, #4
    3520:	f7fe f950 	bl	17c4 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3524:	4628      	mov	r0, r5
    3526:	b007      	add	sp, #28
    3528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    352c:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    352e:	00c3      	lsls	r3, r0, #3
    3530:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3534:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3538:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    353c:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3540:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3544:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3548:	4a19      	ldr	r2, [pc, #100]	; (35b0 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    354a:	2301      	movs	r3, #1
    354c:	4083      	lsls	r3, r0
    354e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3552:	2308      	movs	r3, #8
    3554:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3558:	f898 3008 	ldrb.w	r3, [r8, #8]
    355c:	b953      	cbnz	r3, 3574 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    355e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3562:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3566:	6973      	ldr	r3, [r6, #20]
    3568:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    356c:	2301      	movs	r3, #1
    356e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3572:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3574:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3578:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    357a:	bf5c      	itt	pl
    357c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3580:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3584:	06db      	lsls	r3, r3, #27
    3586:	bf44      	itt	mi
    3588:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    358c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3590:	6933      	ldr	r3, [r6, #16]
    3592:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3596:	2300      	movs	r3, #0
    3598:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    359c:	2301      	movs	r3, #1
    359e:	60a3      	str	r3, [r4, #8]
    35a0:	60e3      	str	r3, [r4, #12]
	return 0;
    35a2:	e7bf      	b.n	3524 <uarte_instance_init.constprop.0+0x78>
    35a4:	0bad0000 	.word	0x0bad0000
    35a8:	0000868e 	.word	0x0000868e
    35ac:	00007d04 	.word	0x00007d04
    35b0:	4001f000 	.word	0x4001f000

000035b4 <uarte_nrfx_poll_out>:
{
    35b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    35b6:	6907      	ldr	r7, [r0, #16]
{
    35b8:	4604      	mov	r4, r0
    35ba:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    35bc:	f004 f85f 	bl	767e <k_is_in_isr>
    35c0:	b910      	cbnz	r0, 35c8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    35c2:	4b2d      	ldr	r3, [pc, #180]	; (3678 <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	b98b      	cbnz	r3, 35ec <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    35c8:	f04f 0320 	mov.w	r3, #32
    35cc:	f3ef 8611 	mrs	r6, BASEPRI
    35d0:	f383 8812 	msr	BASEPRI_MAX, r3
    35d4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    35d8:	6860      	ldr	r0, [r4, #4]
    35da:	4631      	mov	r1, r6
    35dc:	f003 fdb5 	bl	714a <is_tx_ready.isra.0>
    35e0:	bb30      	cbnz	r0, 3630 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    35e2:	f386 8811 	msr	BASEPRI, r6
    35e6:	f3bf 8f6f 	isb	sy
}
    35ea:	e7ed      	b.n	35c8 <uarte_nrfx_poll_out+0x14>
{
    35ec:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    35ee:	6860      	ldr	r0, [r4, #4]
    35f0:	f003 fdab 	bl	714a <is_tx_ready.isra.0>
    35f4:	b970      	cbnz	r0, 3614 <uarte_nrfx_poll_out+0x60>
    35f6:	2001      	movs	r0, #1
    35f8:	f003 ff1a 	bl	7430 <nrfx_busy_wait>
    35fc:	3e01      	subs	r6, #1
    35fe:	d1f6      	bne.n	35ee <uarte_nrfx_poll_out+0x3a>
    3600:	2100      	movs	r1, #0
    3602:	2021      	movs	r0, #33	; 0x21
    3604:	f002 fb8a 	bl	5d1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3608:	e7f0      	b.n	35ec <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    360a:	f386 8811 	msr	BASEPRI, r6
    360e:	f3bf 8f6f 	isb	sy
}
    3612:	e7f5      	b.n	3600 <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
    3614:	f04f 0320 	mov.w	r3, #32
    3618:	f3ef 8611 	mrs	r6, BASEPRI
    361c:	f383 8812 	msr	BASEPRI_MAX, r3
    3620:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3624:	6860      	ldr	r0, [r4, #4]
    3626:	4631      	mov	r1, r6
    3628:	f003 fd8f 	bl	714a <is_tx_ready.isra.0>
    362c:	2800      	cmp	r0, #0
    362e:	d0ec      	beq.n	360a <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
    3630:	693b      	ldr	r3, [r7, #16]
    3632:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    3634:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3636:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    3638:	6813      	ldr	r3, [r2, #0]
    363a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    363e:	2001      	movs	r0, #1
    3640:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3644:	2000      	movs	r0, #0
    3646:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    364a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    364e:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3652:	6852      	ldr	r2, [r2, #4]
    3654:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3658:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    365a:	bf41      	itttt	mi
    365c:	2208      	movmi	r2, #8
    365e:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3662:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3666:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    366a:	2201      	movs	r2, #1
    366c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    366e:	f381 8811 	msr	BASEPRI, r1
    3672:	f3bf 8f6f 	isb	sy
}
    3676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3678:	2000115e 	.word	0x2000115e

0000367c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    367c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    367e:	2301      	movs	r3, #1
    3680:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3682:	4a11      	ldr	r2, [pc, #68]	; (36c8 <compare_int_lock+0x4c>)
    3684:	f3bf 8f5b 	dmb	ish
    3688:	43dc      	mvns	r4, r3
    368a:	e852 1f00 	ldrex	r1, [r2]
    368e:	ea01 0c04 	and.w	ip, r1, r4
    3692:	e842 ce00 	strex	lr, ip, [r2]
    3696:	f1be 0f00 	cmp.w	lr, #0
    369a:	d1f6      	bne.n	368a <compare_int_lock+0xe>
    369c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    36a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    36a4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    36a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    36b0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    36b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36b8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    36bc:	420b      	tst	r3, r1
}
    36be:	bf14      	ite	ne
    36c0:	2001      	movne	r0, #1
    36c2:	2000      	moveq	r0, #0
    36c4:	bd10      	pop	{r4, pc}
    36c6:	bf00      	nop
    36c8:	20000ec0 	.word	0x20000ec0

000036cc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    36cc:	4919      	ldr	r1, [pc, #100]	; (3734 <sys_clock_timeout_handler+0x68>)
{
    36ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36d0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    36d2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    36d6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    36d8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    36dc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    36e0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    36e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    36e6:	d222      	bcs.n	372e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    36e8:	4b13      	ldr	r3, [pc, #76]	; (3738 <sys_clock_timeout_handler+0x6c>)
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	0a1a      	lsrs	r2, r3, #8
    36ee:	061b      	lsls	r3, r3, #24
    36f0:	195e      	adds	r6, r3, r5
    36f2:	4b12      	ldr	r3, [pc, #72]	; (373c <sys_clock_timeout_handler+0x70>)
    36f4:	f142 0700 	adc.w	r7, r2, #0
    36f8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    36fc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    36fe:	f002 fc7d 	bl	5ffc <sys_clock_announce>
    return p_reg->CC[ch];
    3702:	00a3      	lsls	r3, r4, #2
    3704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3708:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    370c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3710:	42aa      	cmp	r2, r5
    3712:	d10b      	bne.n	372c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3714:	b91e      	cbnz	r6, 371e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3716:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    371a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    371e:	4b08      	ldr	r3, [pc, #32]	; (3740 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3720:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3724:	fa00 f404 	lsl.w	r4, r0, r4
    3728:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    372c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    372e:	2600      	movs	r6, #0
    3730:	e7e5      	b.n	36fe <sys_clock_timeout_handler+0x32>
    3732:	bf00      	nop
    3734:	200006a0 	.word	0x200006a0
    3738:	20000ec4 	.word	0x20000ec4
    373c:	20000688 	.word	0x20000688
    3740:	40011000 	.word	0x40011000

00003744 <compare_int_unlock>:
	if (key) {
    3744:	b319      	cbz	r1, 378e <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3746:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    374a:	2301      	movs	r3, #1
    374c:	4a10      	ldr	r2, [pc, #64]	; (3790 <compare_int_unlock+0x4c>)
    374e:	4083      	lsls	r3, r0
    3750:	e852 1f00 	ldrex	r1, [r2]
    3754:	4319      	orrs	r1, r3
    3756:	e842 1c00 	strex	ip, r1, [r2]
    375a:	f1bc 0f00 	cmp.w	ip, #0
    375e:	d1f7      	bne.n	3750 <compare_int_unlock+0xc>
    3760:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3764:	4a0b      	ldr	r2, [pc, #44]	; (3794 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    376a:	4083      	lsls	r3, r0
    376c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3770:	4b09      	ldr	r3, [pc, #36]	; (3798 <compare_int_unlock+0x54>)
    3772:	f3bf 8f5b 	dmb	ish
    3776:	681b      	ldr	r3, [r3, #0]
    3778:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    377c:	fa23 f000 	lsr.w	r0, r3, r0
    3780:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3782:	bf42      	ittt	mi
    3784:	4b05      	ldrmi	r3, [pc, #20]	; (379c <compare_int_unlock+0x58>)
    3786:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    378a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    378e:	4770      	bx	lr
    3790:	20000ec0 	.word	0x20000ec0
    3794:	40011000 	.word	0x40011000
    3798:	20000ebc 	.word	0x20000ebc
    379c:	e000e100 	.word	0xe000e100

000037a0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    37a0:	4b0d      	ldr	r3, [pc, #52]	; (37d8 <z_nrf_rtc_timer_read+0x38>)
    37a2:	6818      	ldr	r0, [r3, #0]
    37a4:	0a01      	lsrs	r1, r0, #8
    37a6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    37a8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    37ac:	4b0b      	ldr	r3, [pc, #44]	; (37dc <z_nrf_rtc_timer_read+0x3c>)
    37ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    37b2:	1818      	adds	r0, r3, r0
    37b4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    37b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    37bc:	d20a      	bcs.n	37d4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    37be:	4b08      	ldr	r3, [pc, #32]	; (37e0 <z_nrf_rtc_timer_read+0x40>)
    37c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    37c4:	4290      	cmp	r0, r2
    37c6:	eb71 0303 	sbcs.w	r3, r1, r3
    37ca:	d203      	bcs.n	37d4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    37cc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    37d0:	f141 0100 	adc.w	r1, r1, #0
}
    37d4:	4770      	bx	lr
    37d6:	bf00      	nop
    37d8:	20000ec4 	.word	0x20000ec4
    37dc:	40011000 	.word	0x40011000
    37e0:	20000688 	.word	0x20000688

000037e4 <compare_set>:
{
    37e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37e8:	b085      	sub	sp, #20
    37ea:	4616      	mov	r6, r2
    37ec:	4698      	mov	r8, r3
    37ee:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    37f0:	f7ff ff44 	bl	367c <compare_int_lock>
    37f4:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    37f6:	f7ff ffd3 	bl	37a0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    37fa:	42b0      	cmp	r0, r6
    37fc:	eb71 0308 	sbcs.w	r3, r1, r8
    3800:	d278      	bcs.n	38f4 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3802:	4b46      	ldr	r3, [pc, #280]	; (391c <compare_set+0x138>)
    3804:	1a30      	subs	r0, r6, r0
    3806:	eb68 0101 	sbc.w	r1, r8, r1
    380a:	4298      	cmp	r0, r3
    380c:	f171 0300 	sbcs.w	r3, r1, #0
    3810:	f080 8081 	bcs.w	3916 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3814:	4b42      	ldr	r3, [pc, #264]	; (3920 <compare_set+0x13c>)
    3816:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    381a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    381e:	45d8      	cmp	r8, fp
    3820:	bf08      	it	eq
    3822:	4556      	cmpeq	r6, sl
    3824:	d051      	beq.n	38ca <compare_set+0xe6>
    3826:	ea4f 0985 	mov.w	r9, r5, lsl #2
    382a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    382e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3832:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3836:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3838:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    383c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3840:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3842:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3846:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    384a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    384c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3850:	4b34      	ldr	r3, [pc, #208]	; (3924 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3852:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3856:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3858:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    385c:	1a40      	subs	r0, r0, r1
    385e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3862:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3866:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3868:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    386c:	d107      	bne.n	387e <compare_set+0x9a>
    386e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3872:	2013      	movs	r0, #19
    3874:	f004 f8a7 	bl	79c6 <z_impl_k_busy_wait>
    3878:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    387c:	4b29      	ldr	r3, [pc, #164]	; (3924 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    387e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3882:	eba4 000c 	sub.w	r0, r4, ip
    3886:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    388a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    388e:	bf88      	it	hi
    3890:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3892:	2000      	movs	r0, #0
    3894:	6038      	str	r0, [r7, #0]
    3896:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3898:	9801      	ldr	r0, [sp, #4]
    389a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    389e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    38a2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    38a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    38aa:	4281      	cmp	r1, r0
    38ac:	d006      	beq.n	38bc <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    38ae:	1a20      	subs	r0, r4, r0
    38b0:	3802      	subs	r0, #2
    38b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    38b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    38ba:	d819      	bhi.n	38f0 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    38bc:	1aa4      	subs	r4, r4, r2
    38be:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    38c2:	eb14 0a06 	adds.w	sl, r4, r6
    38c6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    38ca:	4915      	ldr	r1, [pc, #84]	; (3920 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    38cc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    38ce:	012b      	lsls	r3, r5, #4
    38d0:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    38d4:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    38d8:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    38da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38dc:	6053      	str	r3, [r2, #4]
	return ret;
    38de:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    38e0:	4628      	mov	r0, r5
    38e2:	9900      	ldr	r1, [sp, #0]
    38e4:	f7ff ff2e 	bl	3744 <compare_int_unlock>
}
    38e8:	4620      	mov	r0, r4
    38ea:	b005      	add	sp, #20
    38ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38f0:	4620      	mov	r0, r4
    38f2:	e7b1      	b.n	3858 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    38f4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38f6:	4a0c      	ldr	r2, [pc, #48]	; (3928 <compare_set+0x144>)
    38f8:	f3bf 8f5b 	dmb	ish
    38fc:	40ab      	lsls	r3, r5
    38fe:	e852 1f00 	ldrex	r1, [r2]
    3902:	4319      	orrs	r1, r3
    3904:	e842 1000 	strex	r0, r1, [r2]
    3908:	2800      	cmp	r0, #0
    390a:	d1f8      	bne.n	38fe <compare_set+0x11a>
    390c:	f3bf 8f5b 	dmb	ish
    3910:	46b2      	mov	sl, r6
    3912:	46c3      	mov	fp, r8
    3914:	e7d9      	b.n	38ca <compare_set+0xe6>
			return -EINVAL;
    3916:	f06f 0415 	mvn.w	r4, #21
    391a:	e7e1      	b.n	38e0 <compare_set+0xfc>
    391c:	01000001 	.word	0x01000001
    3920:	20000690 	.word	0x20000690
    3924:	40011000 	.word	0x40011000
    3928:	20000ebc 	.word	0x20000ebc

0000392c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    392c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    392e:	4b19      	ldr	r3, [pc, #100]	; (3994 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3930:	4d19      	ldr	r5, [pc, #100]	; (3998 <sys_clock_driver_init+0x6c>)
    3932:	2400      	movs	r4, #0
    3934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    393c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3940:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3948:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    394c:	4b13      	ldr	r3, [pc, #76]	; (399c <sys_clock_driver_init+0x70>)
    394e:	2602      	movs	r6, #2
    3950:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3954:	2101      	movs	r1, #1
    3956:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    395a:	2011      	movs	r0, #17
    395c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3960:	4622      	mov	r2, r4
    3962:	f7fe fc4f 	bl	2204 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3966:	2011      	movs	r0, #17
    3968:	f7fe fc2e 	bl	21c8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    396c:	4a0c      	ldr	r2, [pc, #48]	; (39a0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    396e:	2301      	movs	r3, #1
    3970:	60ab      	str	r3, [r5, #8]
    3972:	602b      	str	r3, [r5, #0]
    3974:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3976:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <sys_clock_driver_init+0x78>)
    3978:	4a0b      	ldr	r2, [pc, #44]	; (39a8 <sys_clock_driver_init+0x7c>)
    397a:	9300      	str	r3, [sp, #0]
    397c:	9401      	str	r4, [sp, #4]
    397e:	2300      	movs	r3, #0
    3980:	4620      	mov	r0, r4
    3982:	f7ff ff2f 	bl	37e4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3986:	4630      	mov	r0, r6
    3988:	f7ff fae8 	bl	2f5c <z_nrf_clock_control_lf_on>

	return 0;
}
    398c:	4620      	mov	r0, r4
    398e:	b002      	add	sp, #8
    3990:	bd70      	pop	{r4, r5, r6, pc}
    3992:	bf00      	nop
    3994:	20000690 	.word	0x20000690
    3998:	40011000 	.word	0x40011000
    399c:	e000e100 	.word	0xe000e100
    39a0:	20000ec0 	.word	0x20000ec0
    39a4:	000036cd 	.word	0x000036cd
    39a8:	007fffff 	.word	0x007fffff

000039ac <rtc_nrf_isr>:
{
    39ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    39b0:	4c35      	ldr	r4, [pc, #212]	; (3a88 <rtc_nrf_isr+0xdc>)
    39b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    39b6:	079a      	lsls	r2, r3, #30
    39b8:	d50b      	bpl.n	39d2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    39be:	b143      	cbz	r3, 39d2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    39c0:	4a32      	ldr	r2, [pc, #200]	; (3a8c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39c2:	2300      	movs	r3, #0
    39c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    39c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    39cc:	6813      	ldr	r3, [r2, #0]
    39ce:	3301      	adds	r3, #1
    39d0:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    39d2:	f04f 0320 	mov.w	r3, #32
    39d6:	f3ef 8211 	mrs	r2, BASEPRI
    39da:	f383 8812 	msr	BASEPRI_MAX, r3
    39de:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    39e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    39e6:	03db      	lsls	r3, r3, #15
    39e8:	d512      	bpl.n	3a10 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    39ea:	f3bf 8f5b 	dmb	ish
    39ee:	4b28      	ldr	r3, [pc, #160]	; (3a90 <rtc_nrf_isr+0xe4>)
    39f0:	e853 1f00 	ldrex	r1, [r3]
    39f4:	f021 0001 	bic.w	r0, r1, #1
    39f8:	e843 0600 	strex	r6, r0, [r3]
    39fc:	2e00      	cmp	r6, #0
    39fe:	d1f7      	bne.n	39f0 <rtc_nrf_isr+0x44>
    3a00:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3a04:	2900      	cmp	r1, #0
    3a06:	d136      	bne.n	3a76 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a08:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d132      	bne.n	3a76 <rtc_nrf_isr+0xca>
{
    3a10:	2300      	movs	r3, #0
	__asm__ volatile(
    3a12:	f382 8811 	msr	BASEPRI, r2
    3a16:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3a1a:	b34b      	cbz	r3, 3a70 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3a1c:	f7ff fec0 	bl	37a0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3a20:	f04f 0320 	mov.w	r3, #32
    3a24:	f3ef 8c11 	mrs	ip, BASEPRI
    3a28:	f383 8812 	msr	BASEPRI_MAX, r3
    3a2c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3a30:	4b18      	ldr	r3, [pc, #96]	; (3a94 <rtc_nrf_isr+0xe8>)
    3a32:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3a36:	42b0      	cmp	r0, r6
    3a38:	eb71 0207 	sbcs.w	r2, r1, r7
    3a3c:	f04f 0200 	mov.w	r2, #0
    3a40:	d320      	bcc.n	3a84 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3a42:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3a46:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    3a4a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3a4e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3a52:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a58:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3a5c:	f38c 8811 	msr	BASEPRI, ip
    3a60:	f3bf 8f6f 	isb	sy
		if (handler) {
    3a64:	b121      	cbz	r1, 3a70 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3a66:	9500      	str	r5, [sp, #0]
    3a68:	4632      	mov	r2, r6
    3a6a:	463b      	mov	r3, r7
    3a6c:	2000      	movs	r0, #0
    3a6e:	4788      	blx	r1
}
    3a70:	b003      	add	sp, #12
    3a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a76:	2300      	movs	r3, #0
    3a78:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3a7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3a80:	2301      	movs	r3, #1
}
    3a82:	e7c6      	b.n	3a12 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3a84:	4611      	mov	r1, r2
    3a86:	e7e9      	b.n	3a5c <rtc_nrf_isr+0xb0>
    3a88:	40011000 	.word	0x40011000
    3a8c:	20000ec4 	.word	0x20000ec4
    3a90:	20000ebc 	.word	0x20000ebc
    3a94:	20000690 	.word	0x20000690

00003a98 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3a98:	1c43      	adds	r3, r0, #1
{
    3a9a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3a9c:	d021      	beq.n	3ae2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3a9e:	2801      	cmp	r0, #1
    3aa0:	dd21      	ble.n	3ae6 <sys_clock_set_timeout+0x4e>
    3aa2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3aa6:	da20      	bge.n	3aea <sys_clock_set_timeout+0x52>
    3aa8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3aaa:	f7ff fe79 	bl	37a0 <z_nrf_rtc_timer_read>
    3aae:	4b10      	ldr	r3, [pc, #64]	; (3af0 <sys_clock_set_timeout+0x58>)
    3ab0:	e9d3 1300 	ldrd	r1, r3, [r3]
    3ab4:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3ab6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3aba:	bf28      	it	cs
    3abc:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3abe:	3001      	adds	r0, #1
    3ac0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3ac2:	480c      	ldr	r0, [pc, #48]	; (3af4 <sys_clock_set_timeout+0x5c>)
    3ac4:	4282      	cmp	r2, r0
    3ac6:	bf28      	it	cs
    3ac8:	4602      	movcs	r2, r0
    3aca:	1852      	adds	r2, r2, r1
    3acc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3ad0:	4909      	ldr	r1, [pc, #36]	; (3af8 <sys_clock_set_timeout+0x60>)
    3ad2:	9001      	str	r0, [sp, #4]
    3ad4:	9100      	str	r1, [sp, #0]
    3ad6:	f143 0300 	adc.w	r3, r3, #0
    3ada:	f7ff fe83 	bl	37e4 <compare_set>
}
    3ade:	b002      	add	sp, #8
    3ae0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3ae2:	4804      	ldr	r0, [pc, #16]	; (3af4 <sys_clock_set_timeout+0x5c>)
    3ae4:	e7e0      	b.n	3aa8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3ae6:	2400      	movs	r4, #0
    3ae8:	e7df      	b.n	3aaa <sys_clock_set_timeout+0x12>
    3aea:	4c02      	ldr	r4, [pc, #8]	; (3af4 <sys_clock_set_timeout+0x5c>)
    3aec:	e7dd      	b.n	3aaa <sys_clock_set_timeout+0x12>
    3aee:	bf00      	nop
    3af0:	200006a0 	.word	0x200006a0
    3af4:	007fffff 	.word	0x007fffff
    3af8:	000036cd 	.word	0x000036cd

00003afc <sys_clock_elapsed>:
{
    3afc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3afe:	f7ff fe4f 	bl	37a0 <z_nrf_rtc_timer_read>
    3b02:	4b02      	ldr	r3, [pc, #8]	; (3b0c <sys_clock_elapsed+0x10>)
    3b04:	681b      	ldr	r3, [r3, #0]
}
    3b06:	1ac0      	subs	r0, r0, r3
    3b08:	bd08      	pop	{r3, pc}
    3b0a:	bf00      	nop
    3b0c:	200006a0 	.word	0x200006a0

00003b10 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3b10:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3b14:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3b16:	2801      	cmp	r0, #1
    3b18:	4b04      	ldr	r3, [pc, #16]	; (3b2c <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3b1a:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3b1e:	bf18      	it	ne
    3b20:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3b24:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3b26:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    3b2a:	4770      	bx	lr
    3b2c:	50000300 	.word	0x50000300

00003b30 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    3b30:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3b32:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3b36:	2c00      	cmp	r4, #0
    3b38:	bf08      	it	eq
    3b3a:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3b3c:	ea4f 2303 	mov.w	r3, r3, lsl #8
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
    3b40:	f3c0 1281 	ubfx	r2, r0, #6, #2
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3b44:	bf1c      	itt	ne
    3b46:	2501      	movne	r5, #1
    3b48:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
    3b4a:	f000 041f 	and.w	r4, r0, #31
        case 1: return NRF_P1;
    3b4e:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b52:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
        case 1: return NRF_P1;
    3b56:	4806      	ldr	r0, [pc, #24]	; (3b70 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b58:	ea42 0201 	orr.w	r2, r2, r1
        case 1: return NRF_P1;
    3b5c:	bf08      	it	eq
    3b5e:	f04f 40a0 	moveq.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3b62:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b66:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3b6a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
		     NRF_GPIO_PIN_NOSENSE);
}
    3b6e:	bd30      	pop	{r4, r5, pc}
    3b70:	50000300 	.word	0x50000300

00003b74 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3b74:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3b78:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3b7a:	2801      	cmp	r0, #1
    3b7c:	4b04      	ldr	r3, [pc, #16]	; (3b90 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3b7e:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3b82:	bf18      	it	ne
    3b84:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3b88:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3b8a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    3b8e:	4770      	bx	lr
    3b90:	50000300 	.word	0x50000300

00003b94 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
    3b94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
    3b96:	4b07      	ldr	r3, [pc, #28]	; (3bb4 <get_buttons.part.0+0x20>)
    3b98:	9305      	str	r3, [sp, #20]
    3b9a:	4807      	ldr	r0, [pc, #28]	; (3bb8 <get_buttons.part.0+0x24>)
    3b9c:	2302      	movs	r3, #2
    3b9e:	aa04      	add	r2, sp, #16
    3ba0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ba4:	9304      	str	r3, [sp, #16]
    3ba6:	f003 fc2b 	bl	7400 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
    3baa:	2000      	movs	r0, #0
    3bac:	b007      	add	sp, #28
    3bae:	f85d fb04 	ldr.w	pc, [sp], #4
    3bb2:	bf00      	nop
    3bb4:	000086d9 	.word	0x000086d9
    3bb8:	00007cbc 	.word	0x00007cbc

00003bbc <get_buttons>:
{
    3bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
    3bc0:	2400      	movs	r4, #0
    3bc2:	4e14      	ldr	r6, [pc, #80]	; (3c14 <get_buttons+0x58>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3bc4:	4625      	mov	r5, r4
			ret |= 1U << i;
    3bc6:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
    3bca:	6830      	ldr	r0, [r6, #0]
    3bcc:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
    3bce:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
    3bd2:	6883      	ldr	r3, [r0, #8]
    3bd4:	a901      	add	r1, sp, #4
    3bd6:	685b      	ldr	r3, [r3, #4]
    3bd8:	4798      	blx	r3
	if (ret == 0) {
    3bda:	2800      	cmp	r0, #0
    3bdc:	d113      	bne.n	3c06 <get_buttons+0x4a>
		*value ^= data->invert;
    3bde:	f8d9 2000 	ldr.w	r2, [r9]
    3be2:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    3be4:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
    3be8:	4053      	eors	r3, r2
		if (val) {
    3bea:	423b      	tst	r3, r7
    3bec:	d002      	beq.n	3bf4 <get_buttons+0x38>
			ret |= 1U << i;
    3bee:	fa08 f305 	lsl.w	r3, r8, r5
    3bf2:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3bf4:	3501      	adds	r5, #1
    3bf6:	2d04      	cmp	r5, #4
    3bf8:	f106 0608 	add.w	r6, r6, #8
    3bfc:	d1e5      	bne.n	3bca <get_buttons+0xe>
}
    3bfe:	4620      	mov	r0, r4
    3c00:	b003      	add	sp, #12
    3c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (val < 0) {
    3c06:	daf2      	bge.n	3bee <get_buttons+0x32>
}
    3c08:	b003      	add	sp, #12
    3c0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c0e:	f7ff bfc1 	b.w	3b94 <get_buttons.part.0>
    3c12:	bf00      	nop
    3c14:	00007ef4 	.word	0x00007ef4

00003c18 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
    3c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c1c:	4e15      	ldr	r6, [pc, #84]	; (3c74 <dk_set_leds_state.part.0+0x5c>)
    3c1e:	b086      	sub	sp, #24
    3c20:	4607      	mov	r7, r0
    3c22:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3c24:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
    3c26:	fa27 f205 	lsr.w	r2, r7, r5
    3c2a:	f012 0201 	ands.w	r2, r2, #1
    3c2e:	d117      	bne.n	3c60 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
    3c30:	fa28 f305 	lsr.w	r3, r8, r5
    3c34:	07db      	lsls	r3, r3, #31
    3c36:	d515      	bpl.n	3c64 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
    3c38:	7931      	ldrb	r1, [r6, #4]
    3c3a:	6830      	ldr	r0, [r6, #0]
    3c3c:	f003 fbd0 	bl	73e0 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
    3c40:	4604      	mov	r4, r0
    3c42:	b178      	cbz	r0, 3c64 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
    3c44:	4b0c      	ldr	r3, [pc, #48]	; (3c78 <dk_set_leds_state.part.0+0x60>)
    3c46:	9305      	str	r3, [sp, #20]
    3c48:	480c      	ldr	r0, [pc, #48]	; (3c7c <dk_set_leds_state.part.0+0x64>)
    3c4a:	2302      	movs	r3, #2
    3c4c:	aa04      	add	r2, sp, #16
    3c4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c52:	9304      	str	r3, [sp, #16]
    3c54:	f003 fbd4 	bl	7400 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
    3c58:	4620      	mov	r0, r4
    3c5a:	b006      	add	sp, #24
    3c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
    3c60:	2201      	movs	r2, #1
    3c62:	e7e9      	b.n	3c38 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3c64:	3501      	adds	r5, #1
    3c66:	2d04      	cmp	r5, #4
    3c68:	f106 0608 	add.w	r6, r6, #8
    3c6c:	d1db      	bne.n	3c26 <dk_set_leds_state.part.0+0xe>
	return 0;
    3c6e:	2400      	movs	r4, #0
    3c70:	e7f2      	b.n	3c58 <dk_set_leds_state.part.0+0x40>
    3c72:	bf00      	nop
    3c74:	00007f14 	.word	0x00007f14
    3c78:	000086ee 	.word	0x000086ee
    3c7c:	00007cbc 	.word	0x00007cbc

00003c80 <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    3c80:	2800      	cmp	r0, #0
{
    3c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
    3c86:	bf14      	ite	ne
    3c88:	f04f 6598 	movne.w	r5, #79691776	; 0x4c00000
    3c8c:	f44f 1500 	moveq.w	r5, #2097152	; 0x200000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
    3c90:	4c11      	ldr	r4, [pc, #68]	; (3cd8 <callback_ctrl+0x58>)
    3c92:	2600      	movs	r6, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    3c94:	f405 0700 	and.w	r7, r5, #8388608	; 0x800000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    3c98:	f04f 0801 	mov.w	r8, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    3c9c:	6820      	ldr	r0, [r4, #0]
    3c9e:	7921      	ldrb	r1, [r4, #4]
	const struct gpio_driver_api *api =
    3ca0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    3ca4:	b1b7      	cbz	r7, 3cd4 <callback_ctrl+0x54>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    3ca6:	6902      	ldr	r2, [r0, #16]
    3ca8:	6812      	ldr	r2, [r2, #0]
    3caa:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    3cae:	4213      	tst	r3, r2
    3cb0:	d010      	beq.n	3cd4 <callback_ctrl+0x54>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    3cb2:	f085 62c0 	eor.w	r2, r5, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3cb6:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    3cba:	f8dc 9018 	ldr.w	r9, [ip, #24]
    3cbe:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
    3cc2:	3601      	adds	r6, #1
    3cc4:	47c8      	blx	r9
    3cc6:	2e04      	cmp	r6, #4
    3cc8:	d002      	beq.n	3cd0 <callback_ctrl+0x50>
    3cca:	3408      	adds	r4, #8
    3ccc:	2800      	cmp	r0, #0
    3cce:	d0e5      	beq.n	3c9c <callback_ctrl+0x1c>
}
    3cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3cd4:	462a      	mov	r2, r5
    3cd6:	e7ee      	b.n	3cb6 <callback_ctrl+0x36>
    3cd8:	00007ef4 	.word	0x00007ef4

00003cdc <button_pressed>:
{
    3cdc:	b510      	push	{r4, lr}
    3cde:	b086      	sub	sp, #24
	__asm__ volatile(
    3ce0:	f04f 0320 	mov.w	r3, #32
    3ce4:	f3ef 8411 	mrs	r4, BASEPRI
    3ce8:	f383 8812 	msr	BASEPRI_MAX, r3
    3cec:	f3bf 8f6f 	isb	sy
	int err = callback_ctrl(false);
    3cf0:	2000      	movs	r0, #0
    3cf2:	f7ff ffc5 	bl	3c80 <callback_ctrl>
	if (err) {
    3cf6:	b148      	cbz	r0, 3d0c <button_pressed+0x30>
		LOG_ERR("Cannot disable callbacks");
    3cf8:	4b0c      	ldr	r3, [pc, #48]	; (3d2c <button_pressed+0x50>)
    3cfa:	9305      	str	r3, [sp, #20]
    3cfc:	480c      	ldr	r0, [pc, #48]	; (3d30 <button_pressed+0x54>)
    3cfe:	2302      	movs	r3, #2
    3d00:	aa04      	add	r2, sp, #16
    3d02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d06:	9304      	str	r3, [sp, #16]
    3d08:	f003 fb7a 	bl	7400 <z_log_msg_static_create.constprop.0>
	switch (state) {
    3d0c:	4b09      	ldr	r3, [pc, #36]	; (3d34 <button_pressed+0x58>)
    3d0e:	781a      	ldrb	r2, [r3, #0]
    3d10:	b932      	cbnz	r2, 3d20 <button_pressed+0x44>
		state = STATE_SCANNING;
    3d12:	2201      	movs	r2, #1
    3d14:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
    3d16:	4808      	ldr	r0, [pc, #32]	; (3d38 <button_pressed+0x5c>)
    3d18:	2221      	movs	r2, #33	; 0x21
    3d1a:	2300      	movs	r3, #0
    3d1c:	f001 fd20 	bl	5760 <k_work_reschedule>
	__asm__ volatile(
    3d20:	f384 8811 	msr	BASEPRI, r4
    3d24:	f3bf 8f6f 	isb	sy
}
    3d28:	b006      	add	sp, #24
    3d2a:	bd10      	pop	{r4, pc}
    3d2c:	00008704 	.word	0x00008704
    3d30:	00007cbc 	.word	0x00007cbc
    3d34:	2000115d 	.word	0x2000115d
    3d38:	200006a8 	.word	0x200006a8

00003d3c <buttons_scan_fn>:
{
    3d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d3e:	b087      	sub	sp, #28
	button_scan = get_buttons();
    3d40:	f7ff ff3c 	bl	3bbc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3d44:	f3bf 8f5b 	dmb	ish
    3d48:	4b2c      	ldr	r3, [pc, #176]	; (3dfc <buttons_scan_fn+0xc0>)
    3d4a:	4604      	mov	r4, r0
    3d4c:	e853 2f00 	ldrex	r2, [r3]
    3d50:	e843 4100 	strex	r1, r4, [r3]
    3d54:	2900      	cmp	r1, #0
    3d56:	d1f9      	bne.n	3d4c <buttons_scan_fn+0x10>
    3d58:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
    3d5c:	4b28      	ldr	r3, [pc, #160]	; (3e00 <buttons_scan_fn+0xc4>)
    3d5e:	4f29      	ldr	r7, [pc, #164]	; (3e04 <buttons_scan_fn+0xc8>)
    3d60:	781a      	ldrb	r2, [r3, #0]
    3d62:	bb3a      	cbnz	r2, 3db4 <buttons_scan_fn+0x78>
		if (button_scan != last_button_scan) {
    3d64:	683e      	ldr	r6, [r7, #0]
    3d66:	42a6      	cmp	r6, r4
    3d68:	d019      	beq.n	3d9e <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
    3d6a:	4b27      	ldr	r3, [pc, #156]	; (3e08 <buttons_scan_fn+0xcc>)
    3d6c:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
    3d6e:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
    3d70:	b10b      	cbz	r3, 3d76 <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
    3d72:	4631      	mov	r1, r6
    3d74:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
    3d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d7a:	4824      	ldr	r0, [pc, #144]	; (3e0c <buttons_scan_fn+0xd0>)
    3d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d80:	f001 fa76 	bl	5270 <z_impl_k_mutex_lock>
	return list->head;
    3d84:	4b22      	ldr	r3, [pc, #136]	; (3e10 <buttons_scan_fn+0xd4>)
    3d86:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
    3d88:	b135      	cbz	r5, 3d98 <buttons_scan_fn+0x5c>
    3d8a:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
    3d8c:	4631      	mov	r1, r6
    3d8e:	682b      	ldr	r3, [r5, #0]
    3d90:	4620      	mov	r0, r4
    3d92:	4798      	blx	r3
	return node->next;
    3d94:	686d      	ldr	r5, [r5, #4]
    3d96:	e7f7      	b.n	3d88 <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
    3d98:	481c      	ldr	r0, [pc, #112]	; (3e0c <buttons_scan_fn+0xd0>)
    3d9a:	f001 fae1 	bl	5360 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
    3d9e:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
    3da0:	b15c      	cbz	r4, 3dba <buttons_scan_fn+0x7e>
		k_work_reschedule(&buttons_scan,
    3da2:	481c      	ldr	r0, [pc, #112]	; (3e14 <buttons_scan_fn+0xd8>)
    3da4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    3da8:	2300      	movs	r3, #0
}
    3daa:	b007      	add	sp, #28
    3dac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
    3db0:	f001 bcd6 	b.w	5760 <k_work_reschedule>
		initial_run = false;
    3db4:	2200      	movs	r2, #0
    3db6:	701a      	strb	r2, [r3, #0]
    3db8:	e7f1      	b.n	3d9e <buttons_scan_fn+0x62>
	__asm__ volatile(
    3dba:	f04f 0320 	mov.w	r3, #32
    3dbe:	f3ef 8511 	mrs	r5, BASEPRI
    3dc2:	f383 8812 	msr	BASEPRI_MAX, r3
    3dc6:	f3bf 8f6f 	isb	sy
		switch (state) {
    3dca:	4b13      	ldr	r3, [pc, #76]	; (3e18 <buttons_scan_fn+0xdc>)
    3dcc:	7818      	ldrb	r0, [r3, #0]
    3dce:	2801      	cmp	r0, #1
    3dd0:	d103      	bne.n	3dda <buttons_scan_fn+0x9e>
			state = STATE_WAITING;
    3dd2:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
    3dd4:	f7ff ff54 	bl	3c80 <callback_ctrl>
    3dd8:	4604      	mov	r4, r0
	__asm__ volatile(
    3dda:	f385 8811 	msr	BASEPRI, r5
    3dde:	f3bf 8f6f 	isb	sy
		if (err) {
    3de2:	b14c      	cbz	r4, 3df8 <buttons_scan_fn+0xbc>
			LOG_ERR("Cannot enable callbacks");
    3de4:	4b0d      	ldr	r3, [pc, #52]	; (3e1c <buttons_scan_fn+0xe0>)
    3de6:	9305      	str	r3, [sp, #20]
    3de8:	480d      	ldr	r0, [pc, #52]	; (3e20 <buttons_scan_fn+0xe4>)
    3dea:	2302      	movs	r3, #2
    3dec:	aa04      	add	r2, sp, #16
    3dee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3df2:	9304      	str	r3, [sp, #16]
    3df4:	f003 fb04 	bl	7400 <z_log_msg_static_create.constprop.0>
}
    3df8:	b007      	add	sp, #28
    3dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dfc:	20000efc 	.word	0x20000efc
    3e00:	20000154 	.word	0x20000154
    3e04:	20000ef4 	.word	0x20000ef4
    3e08:	20000ec8 	.word	0x20000ec8
    3e0c:	20000ecc 	.word	0x20000ecc
    3e10:	20000ee0 	.word	0x20000ee0
    3e14:	200006a8 	.word	0x200006a8
    3e18:	2000115d 	.word	0x2000115d
    3e1c:	0000871d 	.word	0x0000871d
    3e20:	00007cbc 	.word	0x00007cbc

00003e24 <dk_leds_init>:
{
    3e24:	b570      	push	{r4, r5, r6, lr}
    3e26:	4e11      	ldr	r6, [pc, #68]	; (3e6c <dk_leds_init+0x48>)
    3e28:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3e2a:	2500      	movs	r5, #0
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
    3e2c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    3e30:	4630      	mov	r0, r6
    3e32:	f003 fabf 	bl	73b4 <gpio_pin_configure_dt>
		if (err) {
    3e36:	4604      	mov	r4, r0
    3e38:	b950      	cbnz	r0, 3e50 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
    3e3a:	3501      	adds	r5, #1
    3e3c:	2d04      	cmp	r5, #4
    3e3e:	f106 0608 	add.w	r6, r6, #8
    3e42:	d1f3      	bne.n	3e2c <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
    3e44:	210f      	movs	r1, #15
}
    3e46:	b006      	add	sp, #24
    3e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e4c:	f7ff bee4 	b.w	3c18 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
    3e50:	4b07      	ldr	r3, [pc, #28]	; (3e70 <dk_leds_init+0x4c>)
    3e52:	9305      	str	r3, [sp, #20]
    3e54:	4807      	ldr	r0, [pc, #28]	; (3e74 <dk_leds_init+0x50>)
    3e56:	2302      	movs	r3, #2
    3e58:	aa04      	add	r2, sp, #16
    3e5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e5e:	9304      	str	r3, [sp, #16]
    3e60:	f003 face 	bl	7400 <z_log_msg_static_create.constprop.0>
}
    3e64:	4620      	mov	r0, r4
    3e66:	b006      	add	sp, #24
    3e68:	bd70      	pop	{r4, r5, r6, pc}
    3e6a:	bf00      	nop
    3e6c:	00007f14 	.word	0x00007f14
    3e70:	00008735 	.word	0x00008735
    3e74:	00007cbc 	.word	0x00007cbc

00003e78 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3e78:	4b07      	ldr	r3, [pc, #28]	; (3e98 <dk_read_buttons+0x20>)
    3e7a:	f3bf 8f5b 	dmb	ish
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
    3e84:	b100      	cbz	r0, 3e88 <dk_read_buttons+0x10>
		*button_state = current_state;
    3e86:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
    3e88:	4804      	ldr	r0, [pc, #16]	; (3e9c <dk_read_buttons+0x24>)
    3e8a:	b111      	cbz	r1, 3e92 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
    3e8c:	6802      	ldr	r2, [r0, #0]
    3e8e:	405a      	eors	r2, r3
    3e90:	600a      	str	r2, [r1, #0]
	last_state = current_state;
    3e92:	6003      	str	r3, [r0, #0]
}
    3e94:	4770      	bx	lr
    3e96:	bf00      	nop
    3e98:	20000efc 	.word	0x20000efc
    3e9c:	20000ef8 	.word	0x20000ef8

00003ea0 <dk_buttons_init>:
{
    3ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
    3ea4:	4b3c      	ldr	r3, [pc, #240]	; (3f98 <dk_buttons_init+0xf8>)
{
    3ea6:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
    3ea8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
    3eaa:	483c      	ldr	r0, [pc, #240]	; (3f9c <dk_buttons_init+0xfc>)
    3eac:	4d3c      	ldr	r5, [pc, #240]	; (3fa0 <dk_buttons_init+0x100>)
    3eae:	f003 fc02 	bl	76b6 <z_impl_k_mutex_init>
    3eb2:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3eb4:	2700      	movs	r7, #0
    3eb6:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
    3eb8:	88f3      	ldrh	r3, [r6, #6]
    3eba:	f013 0f01 	tst.w	r3, #1
    3ebe:	bf14      	ite	ne
    3ec0:	2110      	movne	r1, #16
    3ec2:	2120      	moveq	r1, #32
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
    3ec4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    3ec8:	4630      	mov	r0, r6
    3eca:	f003 fa73 	bl	73b4 <gpio_pin_configure_dt>
		if (err) {
    3ece:	4604      	mov	r4, r0
    3ed0:	b168      	cbz	r0, 3eee <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
    3ed2:	4b34      	ldr	r3, [pc, #208]	; (3fa4 <dk_buttons_init+0x104>)
			LOG_ERR("Cannot disable callbacks()");
    3ed4:	9305      	str	r3, [sp, #20]
    3ed6:	4834      	ldr	r0, [pc, #208]	; (3fa8 <dk_buttons_init+0x108>)
    3ed8:	2302      	movs	r3, #2
    3eda:	aa04      	add	r2, sp, #16
    3edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ee0:	9304      	str	r3, [sp, #16]
    3ee2:	f003 fa8d 	bl	7400 <z_log_msg_static_create.constprop.0>
}
    3ee6:	4620      	mov	r0, r4
    3ee8:	b007      	add	sp, #28
    3eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3eee:	3701      	adds	r7, #1
    3ef0:	2f04      	cmp	r7, #4
    3ef2:	f106 0608 	add.w	r6, r6, #8
    3ef6:	d1df      	bne.n	3eb8 <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
    3ef8:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3efa:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
    3efc:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    3f00:	6828      	ldr	r0, [r5, #0]
    3f02:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    3f04:	6883      	ldr	r3, [r0, #8]
    3f06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    3f0a:	699c      	ldr	r4, [r3, #24]
    3f0c:	2300      	movs	r3, #0
    3f0e:	47a0      	blx	r4
		if (err) {
    3f10:	4604      	mov	r4, r0
    3f12:	b108      	cbz	r0, 3f18 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
    3f14:	4b25      	ldr	r3, [pc, #148]	; (3fac <dk_buttons_init+0x10c>)
    3f16:	e7dd      	b.n	3ed4 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
    3f18:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3f1a:	3701      	adds	r7, #1
		pin_mask |= BIT(buttons[i].pin);
    3f1c:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3f20:	2f04      	cmp	r7, #4
		pin_mask |= BIT(buttons[i].pin);
    3f22:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3f26:	f105 0508 	add.w	r5, r5, #8
    3f2a:	d1e9      	bne.n	3f00 <dk_buttons_init+0x60>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3f2c:	4f20      	ldr	r7, [pc, #128]	; (3fb0 <dk_buttons_init+0x110>)
    3f2e:	4b21      	ldr	r3, [pc, #132]	; (3fb4 <dk_buttons_init+0x114>)
	callback->pin_mask = pin_mask;
    3f30:	e9c7 3601 	strd	r3, r6, [r7, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3f34:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
    3f36:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    3f3a:	6883      	ldr	r3, [r0, #8]
    3f3c:	69db      	ldr	r3, [r3, #28]
    3f3e:	b133      	cbz	r3, 3f4e <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3f40:	2201      	movs	r2, #1
    3f42:	4639      	mov	r1, r7
    3f44:	4798      	blx	r3
		if (err) {
    3f46:	4604      	mov	r4, r0
    3f48:	b120      	cbz	r0, 3f54 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
    3f4a:	4b1b      	ldr	r3, [pc, #108]	; (3fb8 <dk_buttons_init+0x118>)
    3f4c:	e7c2      	b.n	3ed4 <dk_buttons_init+0x34>
		return -ENOTSUP;
    3f4e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3f52:	e7fa      	b.n	3f4a <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
    3f54:	3501      	adds	r5, #1
    3f56:	2d04      	cmp	r5, #4
    3f58:	d1ed      	bne.n	3f36 <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
    3f5a:	4918      	ldr	r1, [pc, #96]	; (3fbc <dk_buttons_init+0x11c>)
    3f5c:	4818      	ldr	r0, [pc, #96]	; (3fc0 <dk_buttons_init+0x120>)
    3f5e:	f003 fbfc 	bl	775a <k_work_init_delayable>
	state = STATE_SCANNING;
    3f62:	4b18      	ldr	r3, [pc, #96]	; (3fc4 <dk_buttons_init+0x124>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    3f64:	4816      	ldr	r0, [pc, #88]	; (3fc0 <dk_buttons_init+0x120>)
	state = STATE_SCANNING;
    3f66:	2201      	movs	r2, #1
    3f68:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
    3f6a:	2300      	movs	r3, #0
    3f6c:	2200      	movs	r2, #0
    3f6e:	f001 fbc3 	bl	56f8 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
    3f72:	4621      	mov	r1, r4
    3f74:	4620      	mov	r0, r4
    3f76:	f7ff ff7f 	bl	3e78 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
    3f7a:	f7ff fe1f 	bl	3bbc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3f7e:	f3bf 8f5b 	dmb	ish
    3f82:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <dk_buttons_init+0x128>)
    3f84:	e853 2f00 	ldrex	r2, [r3]
    3f88:	e843 0100 	strex	r1, r0, [r3]
    3f8c:	2900      	cmp	r1, #0
    3f8e:	d1f9      	bne.n	3f84 <dk_buttons_init+0xe4>
    3f90:	f3bf 8f5b 	dmb	ish
    3f94:	e7a7      	b.n	3ee6 <dk_buttons_init+0x46>
    3f96:	bf00      	nop
    3f98:	20000ec8 	.word	0x20000ec8
    3f9c:	20000ecc 	.word	0x20000ecc
    3fa0:	00007ef4 	.word	0x00007ef4
    3fa4:	0000874f 	.word	0x0000874f
    3fa8:	00007cbc 	.word	0x00007cbc
    3fac:	0000876c 	.word	0x0000876c
    3fb0:	20000ee8 	.word	0x20000ee8
    3fb4:	00003cdd 	.word	0x00003cdd
    3fb8:	00008787 	.word	0x00008787
    3fbc:	00003d3d 	.word	0x00003d3d
    3fc0:	200006a8 	.word	0x200006a8
    3fc4:	2000115d 	.word	0x2000115d
    3fc8:	20000efc 	.word	0x20000efc

00003fcc <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
    3fcc:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
    3fce:	2803      	cmp	r0, #3
{
    3fd0:	b086      	sub	sp, #24
    3fd2:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
    3fd4:	d90e      	bls.n	3ff4 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
    3fd6:	4b12      	ldr	r3, [pc, #72]	; (4020 <dk_set_led+0x54>)
    3fd8:	9305      	str	r3, [sp, #20]
    3fda:	4812      	ldr	r0, [pc, #72]	; (4024 <dk_set_led+0x58>)
    3fdc:	2302      	movs	r3, #2
    3fde:	aa04      	add	r2, sp, #16
    3fe0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
    3fe4:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
    3fe8:	9304      	str	r3, [sp, #16]
    3fea:	f003 fa09 	bl	7400 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
    3fee:	4620      	mov	r0, r4
    3ff0:	b006      	add	sp, #24
    3ff2:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
    3ff4:	4b0c      	ldr	r3, [pc, #48]	; (4028 <dk_set_led+0x5c>)
    3ff6:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    3ffa:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
    3ffe:	7909      	ldrb	r1, [r1, #4]
    4000:	f003 f9ee 	bl	73e0 <gpio_pin_set>
	if (err) {
    4004:	4604      	mov	r4, r0
    4006:	2800      	cmp	r0, #0
    4008:	d0f1      	beq.n	3fee <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
    400a:	4b08      	ldr	r3, [pc, #32]	; (402c <dk_set_led+0x60>)
    400c:	9305      	str	r3, [sp, #20]
    400e:	4805      	ldr	r0, [pc, #20]	; (4024 <dk_set_led+0x58>)
    4010:	2302      	movs	r3, #2
    4012:	aa04      	add	r2, sp, #16
    4014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4018:	9304      	str	r3, [sp, #16]
    401a:	f003 f9f1 	bl	7400 <z_log_msg_static_create.constprop.0>
    401e:	e7e6      	b.n	3fee <dk_set_led+0x22>
    4020:	0000879b 	.word	0x0000879b
    4024:	00007cbc 	.word	0x00007cbc
    4028:	00007f14 	.word	0x00007f14
    402c:	000086ee 	.word	0x000086ee

00004030 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    4032:	f7fd fadf 	bl	15f4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4036:	4b07      	ldr	r3, [pc, #28]	; (4054 <k_sys_fatal_error_handler+0x24>)
    4038:	9305      	str	r3, [sp, #20]
    403a:	2302      	movs	r3, #2
    403c:	9304      	str	r3, [sp, #16]
    403e:	4806      	ldr	r0, [pc, #24]	; (4058 <k_sys_fatal_error_handler+0x28>)
    4040:	2300      	movs	r3, #0
    4042:	aa04      	add	r2, sp, #16
    4044:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4048:	f7fd fbbc 	bl	17c4 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    404c:	2000      	movs	r0, #0
    404e:	f7fe fe75 	bl	2d3c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4052:	bf00      	nop
    4054:	000087ca 	.word	0x000087ca
    4058:	00007cc4 	.word	0x00007cc4

0000405c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    405c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4060:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4064:	2a08      	cmp	r2, #8
    4066:	d106      	bne.n	4076 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4068:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    406c:	2b05      	cmp	r3, #5
    406e:	d802      	bhi.n	4076 <nrf52_errata_103+0x1a>
    4070:	4a02      	ldr	r2, [pc, #8]	; (407c <nrf52_errata_103+0x20>)
    4072:	5cd0      	ldrb	r0, [r2, r3]
    4074:	4770      	bx	lr
        return false;
    4076:	2000      	movs	r0, #0
}
    4078:	4770      	bx	lr
    407a:	bf00      	nop
    407c:	000087ed 	.word	0x000087ed

00004080 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4080:	4a02      	ldr	r2, [pc, #8]	; (408c <nvmc_wait+0xc>)
    4082:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4086:	2b00      	cmp	r3, #0
    4088:	d0fb      	beq.n	4082 <nvmc_wait+0x2>
}
    408a:	4770      	bx	lr
    408c:	4001e000 	.word	0x4001e000

00004090 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4090:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4092:	f003 f9c3 	bl	741c <nrf52_errata_136>
    4096:	b140      	cbz	r0, 40aa <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    409c:	2200      	movs	r2, #0
    409e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    40a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    40a6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    40aa:	f003 f9b7 	bl	741c <nrf52_errata_136>
    40ae:	2800      	cmp	r0, #0
    40b0:	d046      	beq.n	4140 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    40b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    40b6:	4b60      	ldr	r3, [pc, #384]	; (4238 <SystemInit+0x1a8>)
    40b8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    40bc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    40c0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    40c4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    40c8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    40cc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    40d0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    40d4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    40d8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    40dc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    40e0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    40e4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    40e8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    40ec:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    40f0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    40f4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    40f8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    40fc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4100:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4104:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4108:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    410c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4110:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4114:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4118:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    411c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4120:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4124:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4128:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    412c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4130:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4134:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4138:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    413c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4140:	f7ff ff8c 	bl	405c <nrf52_errata_103>
    4144:	b118      	cbz	r0, 414e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4146:	4b3d      	ldr	r3, [pc, #244]	; (423c <SystemInit+0x1ac>)
    4148:	4a3d      	ldr	r2, [pc, #244]	; (4240 <SystemInit+0x1b0>)
    414a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    414e:	f7ff ff85 	bl	405c <nrf52_errata_103>
    4152:	b118      	cbz	r0, 415c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4154:	4b3b      	ldr	r3, [pc, #236]	; (4244 <SystemInit+0x1b4>)
    4156:	22fb      	movs	r2, #251	; 0xfb
    4158:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    415c:	f7ff ff7e 	bl	405c <nrf52_errata_103>
    4160:	b170      	cbz	r0, 4180 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4162:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    416a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    416e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4172:	f022 020f 	bic.w	r2, r2, #15
    4176:	f003 030f 	and.w	r3, r3, #15
    417a:	4313      	orrs	r3, r2
    417c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4180:	f7ff ff6c 	bl	405c <nrf52_errata_103>
    4184:	b120      	cbz	r0, 4190 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4186:	4b30      	ldr	r3, [pc, #192]	; (4248 <SystemInit+0x1b8>)
    4188:	f44f 7200 	mov.w	r2, #512	; 0x200
    418c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4190:	f003 f944 	bl	741c <nrf52_errata_136>
    4194:	b148      	cbz	r0, 41aa <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    419a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    419e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    41a0:	bf44      	itt	mi
    41a2:	f06f 0201 	mvnmi.w	r2, #1
    41a6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    41aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    41ae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    41b2:	2a08      	cmp	r2, #8
    41b4:	d10e      	bne.n	41d4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    41b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    41ba:	2b05      	cmp	r3, #5
    41bc:	d802      	bhi.n	41c4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    41be:	4a23      	ldr	r2, [pc, #140]	; (424c <SystemInit+0x1bc>)
    41c0:	5cd3      	ldrb	r3, [r2, r3]
    41c2:	b13b      	cbz	r3, 41d4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    41c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    41c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    41cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41d0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    41d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    41d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    41dc:	2a00      	cmp	r2, #0
    41de:	db03      	blt.n	41e8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    41e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    41e4:	2b00      	cmp	r3, #0
    41e6:	da22      	bge.n	422e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41e8:	4919      	ldr	r1, [pc, #100]	; (4250 <SystemInit+0x1c0>)
    41ea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41ec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41f0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41f4:	2412      	movs	r4, #18
    nvmc_wait();
    41f6:	f7ff ff43 	bl	4080 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41fa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    41fe:	f7ff ff3f 	bl	4080 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4202:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4206:	f7ff ff3b 	bl	4080 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    420a:	2300      	movs	r3, #0
    420c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4210:	f7ff ff36 	bl	4080 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4214:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4218:	490e      	ldr	r1, [pc, #56]	; (4254 <SystemInit+0x1c4>)
    421a:	4b0f      	ldr	r3, [pc, #60]	; (4258 <SystemInit+0x1c8>)
    421c:	68ca      	ldr	r2, [r1, #12]
    421e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4222:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4224:	60cb      	str	r3, [r1, #12]
    4226:	f3bf 8f4f 	dsb	sy
    __NOP();
    422a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    422c:	e7fd      	b.n	422a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    422e:	4b0b      	ldr	r3, [pc, #44]	; (425c <SystemInit+0x1cc>)
    4230:	4a0b      	ldr	r2, [pc, #44]	; (4260 <SystemInit+0x1d0>)
    4232:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4234:	bd10      	pop	{r4, pc}
    4236:	bf00      	nop
    4238:	4000c000 	.word	0x4000c000
    423c:	40005000 	.word	0x40005000
    4240:	00038148 	.word	0x00038148
    4244:	4000f000 	.word	0x4000f000
    4248:	40029000 	.word	0x40029000
    424c:	000087e7 	.word	0x000087e7
    4250:	4001e000 	.word	0x4001e000
    4254:	e000ed00 	.word	0xe000ed00
    4258:	05fa0004 	.word	0x05fa0004
    425c:	20000068 	.word	0x20000068
    4260:	03d09000 	.word	0x03d09000

00004264 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4264:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4266:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4268:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    426a:	fab2 f382 	clz	r3, r2
    426e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    4272:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    4274:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    4276:	d014      	beq.n	42a2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4278:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    427c:	fa05 f303 	lsl.w	r3, r5, r3
    4280:	ea22 0303 	bic.w	r3, r2, r3
    4284:	e850 6f00 	ldrex	r6, [r0]
    4288:	4296      	cmp	r6, r2
    428a:	d104      	bne.n	4296 <nrfx_flag32_alloc+0x32>
    428c:	e840 3c00 	strex	ip, r3, [r0]
    4290:	f1bc 0f00 	cmp.w	ip, #0
    4294:	d1f6      	bne.n	4284 <nrfx_flag32_alloc+0x20>
    4296:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    429a:	d1e5      	bne.n	4268 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    429c:	4802      	ldr	r0, [pc, #8]	; (42a8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    429e:	700c      	strb	r4, [r1, #0]
}
    42a0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    42a2:	4802      	ldr	r0, [pc, #8]	; (42ac <nrfx_flag32_alloc+0x48>)
    42a4:	e7fc      	b.n	42a0 <nrfx_flag32_alloc+0x3c>
    42a6:	bf00      	nop
    42a8:	0bad0000 	.word	0x0bad0000
    42ac:	0bad0002 	.word	0x0bad0002

000042b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    42b0:	6803      	ldr	r3, [r0, #0]
    42b2:	40cb      	lsrs	r3, r1
    42b4:	07db      	lsls	r3, r3, #31
{
    42b6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    42b8:	d415      	bmi.n	42e6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    42ba:	2301      	movs	r3, #1
    42bc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    42c0:	6803      	ldr	r3, [r0, #0]
    42c2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    42c6:	ea41 0203 	orr.w	r2, r1, r3
    42ca:	e850 4f00 	ldrex	r4, [r0]
    42ce:	429c      	cmp	r4, r3
    42d0:	d104      	bne.n	42dc <nrfx_flag32_free+0x2c>
    42d2:	e840 2c00 	strex	ip, r2, [r0]
    42d6:	f1bc 0f00 	cmp.w	ip, #0
    42da:	d1f6      	bne.n	42ca <nrfx_flag32_free+0x1a>
    42dc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    42e0:	d1ee      	bne.n	42c0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    42e2:	4802      	ldr	r0, [pc, #8]	; (42ec <nrfx_flag32_free+0x3c>)
}
    42e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    42e6:	4802      	ldr	r0, [pc, #8]	; (42f0 <nrfx_flag32_free+0x40>)
    42e8:	e7fc      	b.n	42e4 <nrfx_flag32_free+0x34>
    42ea:	bf00      	nop
    42ec:	0bad0000 	.word	0x0bad0000
    42f0:	0bad0004 	.word	0x0bad0004

000042f4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    42f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    42f6:	4604      	mov	r4, r0
    42f8:	b118      	cbz	r0, 4302 <clock_stop+0xe>
    42fa:	2801      	cmp	r0, #1
    42fc:	d029      	beq.n	4352 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    42fe:	b003      	add	sp, #12
    4300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4306:	2202      	movs	r2, #2
    4308:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    430c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4310:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4314:	2201      	movs	r2, #1
    4316:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4318:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    431a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    431c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4320:	bf14      	ite	ne
    4322:	2500      	movne	r5, #0
    4324:	f10d 0507 	addeq.w	r5, sp, #7
    4328:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    432c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4330:	b1d4      	cbz	r4, 4368 <clock_stop+0x74>
    4332:	2c01      	cmp	r4, #1
    4334:	d1e3      	bne.n	42fe <clock_stop+0xa>
            if (p_clk_src != NULL)
    4336:	b125      	cbz	r5, 4342 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4338:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    433c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4340:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4342:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4346:	03db      	lsls	r3, r3, #15
    4348:	d418      	bmi.n	437c <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    434a:	4b13      	ldr	r3, [pc, #76]	; (4398 <clock_stop+0xa4>)
    434c:	2200      	movs	r2, #0
    434e:	715a      	strb	r2, [r3, #5]
    4350:	e7d5      	b.n	42fe <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    4352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4356:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4358:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    435c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4360:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4364:	6058      	str	r0, [r3, #4]
}
    4366:	e7d7      	b.n	4318 <clock_stop+0x24>
            if (p_clk_src != NULL)
    4368:	b125      	cbz	r5, 4374 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    436a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    436e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4372:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4374:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4378:	03da      	lsls	r2, r3, #15
    437a:	d5c0      	bpl.n	42fe <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    437c:	b92d      	cbnz	r5, 438a <clock_stop+0x96>
    437e:	2001      	movs	r0, #1
    4380:	f003 f856 	bl	7430 <nrfx_busy_wait>
    4384:	3f01      	subs	r7, #1
    4386:	d1d3      	bne.n	4330 <clock_stop+0x3c>
    4388:	e003      	b.n	4392 <clock_stop+0x9e>
    438a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    438e:	2b01      	cmp	r3, #1
    4390:	d0f5      	beq.n	437e <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4392:	2c01      	cmp	r4, #1
    4394:	d0d9      	beq.n	434a <clock_stop+0x56>
    4396:	e7b2      	b.n	42fe <clock_stop+0xa>
    4398:	20000f00 	.word	0x20000f00

0000439c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    439c:	4b04      	ldr	r3, [pc, #16]	; (43b0 <nrfx_clock_init+0x14>)
    439e:	791a      	ldrb	r2, [r3, #4]
    43a0:	b922      	cbnz	r2, 43ac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    43a2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    43a4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    43a6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    43a8:	4802      	ldr	r0, [pc, #8]	; (43b4 <nrfx_clock_init+0x18>)
    43aa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    43ac:	4802      	ldr	r0, [pc, #8]	; (43b8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    43ae:	4770      	bx	lr
    43b0:	20000f00 	.word	0x20000f00
    43b4:	0bad0000 	.word	0x0bad0000
    43b8:	0bad000c 	.word	0x0bad000c

000043bc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    43c0:	b510      	push	{r4, lr}
    43c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    43c6:	b16a      	cbz	r2, 43e4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c8:	2200      	movs	r2, #0
    43ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    43ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    43d2:	2201      	movs	r2, #1
    43d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    43d8:	4b11      	ldr	r3, [pc, #68]	; (4420 <nrfx_power_clock_irq_handler+0x64>)
    43da:	7958      	ldrb	r0, [r3, #5]
    43dc:	b910      	cbnz	r0, 43e4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    43de:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    43e0:	681b      	ldr	r3, [r3, #0]
    43e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    43e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    43e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    43ec:	b172      	cbz	r2, 440c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43ee:	2200      	movs	r2, #0
    43f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    43f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    43f8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    43fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4400:	0792      	lsls	r2, r2, #30
    4402:	d104      	bne.n	440e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4404:	2201      	movs	r2, #1
    4406:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    440a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    440c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    440e:	2202      	movs	r2, #2
    4410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4414:	4b02      	ldr	r3, [pc, #8]	; (4420 <nrfx_power_clock_irq_handler+0x64>)
}
    4416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    441a:	681b      	ldr	r3, [r3, #0]
    441c:	2001      	movs	r0, #1
    441e:	4718      	bx	r3
    4420:	20000f00 	.word	0x20000f00

00004424 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4424:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4426:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    442a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    442c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    442e:	6002      	str	r2, [r0, #0]
}
    4430:	4802      	ldr	r0, [pc, #8]	; (443c <nrf_gpio_pin_port_decode+0x18>)
    4432:	bf18      	it	ne
    4434:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4438:	4770      	bx	lr
    443a:	bf00      	nop
    443c:	50000300 	.word	0x50000300

00004440 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4440:	4b03      	ldr	r3, [pc, #12]	; (4450 <pin_in_use_by_te+0x10>)
    4442:	3008      	adds	r0, #8
    4444:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4448:	f3c0 1040 	ubfx	r0, r0, #5, #1
    444c:	4770      	bx	lr
    444e:	bf00      	nop
    4450:	2000006c 	.word	0x2000006c

00004454 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4454:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4456:	f100 0308 	add.w	r3, r0, #8
    445a:	4c0c      	ldr	r4, [pc, #48]	; (448c <call_handler+0x38>)
    445c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4460:	05da      	lsls	r2, r3, #23
{
    4462:	4605      	mov	r5, r0
    4464:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4466:	d507      	bpl.n	4478 <call_handler+0x24>
    4468:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    446c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4470:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4474:	6852      	ldr	r2, [r2, #4]
    4476:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4478:	68a3      	ldr	r3, [r4, #8]
    447a:	b12b      	cbz	r3, 4488 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    447c:	68e2      	ldr	r2, [r4, #12]
    447e:	4631      	mov	r1, r6
    4480:	4628      	mov	r0, r5
    }
}
    4482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4486:	4718      	bx	r3
}
    4488:	bd70      	pop	{r4, r5, r6, pc}
    448a:	bf00      	nop
    448c:	2000006c 	.word	0x2000006c

00004490 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4490:	4a12      	ldr	r2, [pc, #72]	; (44dc <release_handler+0x4c>)
    4492:	3008      	adds	r0, #8
{
    4494:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4496:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    449a:	05d9      	lsls	r1, r3, #23
    449c:	d51b      	bpl.n	44d6 <release_handler+0x46>
    449e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    44a2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    44a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44aa:	f102 0410 	add.w	r4, r2, #16
    44ae:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    44b0:	f834 3b02 	ldrh.w	r3, [r4], #2
    44b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    44b8:	d003      	beq.n	44c2 <release_handler+0x32>
    44ba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    44be:	4299      	cmp	r1, r3
    44c0:	d009      	beq.n	44d6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44c2:	3001      	adds	r0, #1
    44c4:	2830      	cmp	r0, #48	; 0x30
    44c6:	d1f3      	bne.n	44b0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    44c8:	2300      	movs	r3, #0
    44ca:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    44ce:	4804      	ldr	r0, [pc, #16]	; (44e0 <release_handler+0x50>)
}
    44d0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    44d2:	f7ff beed 	b.w	42b0 <nrfx_flag32_free>
}
    44d6:	bc10      	pop	{r4}
    44d8:	4770      	bx	lr
    44da:	bf00      	nop
    44dc:	2000006c 	.word	0x2000006c
    44e0:	200000e0 	.word	0x200000e0

000044e4 <pin_handler_trigger_uninit>:
{
    44e4:	b538      	push	{r3, r4, r5, lr}
    44e6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    44e8:	f7ff ffaa 	bl	4440 <pin_in_use_by_te>
    44ec:	4c09      	ldr	r4, [pc, #36]	; (4514 <pin_handler_trigger_uninit+0x30>)
    44ee:	f102 0508 	add.w	r5, r2, #8
    44f2:	b140      	cbz	r0, 4506 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    44f4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    44f8:	4907      	ldr	r1, [pc, #28]	; (4518 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    44fa:	0b5b      	lsrs	r3, r3, #13
    44fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4500:	2000      	movs	r0, #0
    4502:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4506:	4610      	mov	r0, r2
    4508:	f7ff ffc2 	bl	4490 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    450c:	2300      	movs	r3, #0
    450e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4512:	bd38      	pop	{r3, r4, r5, pc}
    4514:	2000006c 	.word	0x2000006c
    4518:	40006000 	.word	0x40006000

0000451c <nrfx_gpiote_input_configure>:
{
    451c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4520:	4604      	mov	r4, r0
    4522:	4617      	mov	r7, r2
    4524:	461d      	mov	r5, r3
    if (p_input_config)
    4526:	b321      	cbz	r1, 4572 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4528:	4e4e      	ldr	r6, [pc, #312]	; (4664 <nrfx_gpiote_input_configure+0x148>)
    452a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    452e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4532:	079b      	lsls	r3, r3, #30
    4534:	d506      	bpl.n	4544 <nrfx_gpiote_input_configure+0x28>
    4536:	f7ff ff83 	bl	4440 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    453a:	b118      	cbz	r0, 4544 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    453c:	484a      	ldr	r0, [pc, #296]	; (4668 <nrfx_gpiote_input_configure+0x14c>)
}
    453e:	b004      	add	sp, #16
    4540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4544:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4546:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    454a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    454e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4552:	f10d 020f 	add.w	r2, sp, #15
    4556:	460b      	mov	r3, r1
    4558:	4620      	mov	r0, r4
    455a:	f10d 010e 	add.w	r1, sp, #14
    455e:	f002 ffb5 	bl	74cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4562:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    4566:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    456a:	f043 0301 	orr.w	r3, r3, #1
    456e:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    4572:	b197      	cbz	r7, 459a <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4574:	4b3b      	ldr	r3, [pc, #236]	; (4664 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4576:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4578:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    457a:	f104 0008 	add.w	r0, r4, #8
    457e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4582:	078f      	lsls	r7, r1, #30
    4584:	d50c      	bpl.n	45a0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    4586:	2a00      	cmp	r2, #0
    4588:	d1d8      	bne.n	453c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    458a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    458e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4592:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4596:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    459a:	bbcd      	cbnz	r5, 4610 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    459c:	4833      	ldr	r0, [pc, #204]	; (466c <nrfx_gpiote_input_configure+0x150>)
    459e:	e7ce      	b.n	453e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    45a0:	f021 0120 	bic.w	r1, r1, #32
    45a4:	04c9      	lsls	r1, r1, #19
    45a6:	0cc9      	lsrs	r1, r1, #19
    45a8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    45ac:	2a00      	cmp	r2, #0
    45ae:	d0ec      	beq.n	458a <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    45b0:	2e03      	cmp	r6, #3
    45b2:	d8c3      	bhi.n	453c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    45b4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    45b6:	b92e      	cbnz	r6, 45c4 <nrfx_gpiote_input_configure+0xa8>
    45b8:	4a2d      	ldr	r2, [pc, #180]	; (4670 <nrfx_gpiote_input_configure+0x154>)
    45ba:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    45be:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    45c2:	e7e2      	b.n	458a <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    45c4:	00ba      	lsls	r2, r7, #2
    45c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    45ca:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    45ce:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    45d2:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    45d6:	f02c 0c03 	bic.w	ip, ip, #3
    45da:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    45de:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    45e2:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    45e6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    45ea:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    45ee:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    45f2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    45f6:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    45fa:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    45fe:	ea4c 0c0e 	orr.w	ip, ip, lr
    4602:	f041 0120 	orr.w	r1, r1, #32
    4606:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    460a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    460e:	e7bc      	b.n	458a <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4610:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4614:	4620      	mov	r0, r4
    4616:	f7ff ff3b 	bl	4490 <release_handler>
    if (!handler)
    461a:	2e00      	cmp	r6, #0
    461c:	d0be      	beq.n	459c <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    461e:	4d11      	ldr	r5, [pc, #68]	; (4664 <nrfx_gpiote_input_configure+0x148>)
    4620:	682b      	ldr	r3, [r5, #0]
    4622:	429e      	cmp	r6, r3
    4624:	d104      	bne.n	4630 <nrfx_gpiote_input_configure+0x114>
    4626:	686b      	ldr	r3, [r5, #4]
    4628:	429f      	cmp	r7, r3
    462a:	d101      	bne.n	4630 <nrfx_gpiote_input_configure+0x114>
    462c:	2200      	movs	r2, #0
    462e:	e00a      	b.n	4646 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4630:	4810      	ldr	r0, [pc, #64]	; (4674 <nrfx_gpiote_input_configure+0x158>)
    4632:	f10d 010f 	add.w	r1, sp, #15
    4636:	f7ff fe15 	bl	4264 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    463a:	4b0c      	ldr	r3, [pc, #48]	; (466c <nrfx_gpiote_input_configure+0x150>)
    463c:	4298      	cmp	r0, r3
    463e:	f47f af7e 	bne.w	453e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    4642:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4646:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    464a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    464e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4650:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4652:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4656:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    465e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4662:	e79b      	b.n	459c <nrfx_gpiote_input_configure+0x80>
    4664:	2000006c 	.word	0x2000006c
    4668:	0bad0004 	.word	0x0bad0004
    466c:	0bad0000 	.word	0x0bad0000
    4670:	40006000 	.word	0x40006000
    4674:	200000e0 	.word	0x200000e0

00004678 <nrfx_gpiote_output_configure>:
{
    4678:	b5f0      	push	{r4, r5, r6, r7, lr}
    467a:	4604      	mov	r4, r0
    467c:	b085      	sub	sp, #20
    467e:	4615      	mov	r5, r2
    if (p_config)
    4680:	b319      	cbz	r1, 46ca <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4682:	4e33      	ldr	r6, [pc, #204]	; (4750 <nrfx_gpiote_output_configure+0xd8>)
    4684:	f100 0708 	add.w	r7, r0, #8
    4688:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    468c:	0793      	lsls	r3, r2, #30
    468e:	d403      	bmi.n	4698 <nrfx_gpiote_output_configure+0x20>
    4690:	f7ff fed6 	bl	4440 <pin_in_use_by_te>
    4694:	2800      	cmp	r0, #0
    4696:	d158      	bne.n	474a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4698:	f012 0f1c 	tst.w	r2, #28
    469c:	d002      	beq.n	46a4 <nrfx_gpiote_output_configure+0x2c>
    469e:	784b      	ldrb	r3, [r1, #1]
    46a0:	2b01      	cmp	r3, #1
    46a2:	d052      	beq.n	474a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    46a4:	2301      	movs	r3, #1
    46a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    46aa:	2300      	movs	r3, #0
    46ac:	e9cd 1300 	strd	r1, r3, [sp]
    46b0:	1c4a      	adds	r2, r1, #1
    46b2:	1c8b      	adds	r3, r1, #2
    46b4:	4620      	mov	r0, r4
    46b6:	f10d 010f 	add.w	r1, sp, #15
    46ba:	f002 ff07 	bl	74cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    46be:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    46c2:	f043 0303 	orr.w	r3, r3, #3
    46c6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    46ca:	b915      	cbnz	r5, 46d2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    46cc:	4821      	ldr	r0, [pc, #132]	; (4754 <nrfx_gpiote_output_configure+0xdc>)
}
    46ce:	b005      	add	sp, #20
    46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46d2:	4e1f      	ldr	r6, [pc, #124]	; (4750 <nrfx_gpiote_output_configure+0xd8>)
    46d4:	f104 0708 	add.w	r7, r4, #8
    46d8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    46dc:	0783      	lsls	r3, r0, #30
    46de:	d534      	bpl.n	474a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    46e0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    46e4:	4661      	mov	r1, ip
    46e6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    46e8:	f020 0020 	bic.w	r0, r0, #32
    46ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    46f0:	04c0      	lsls	r0, r0, #19
    46f2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    46f6:	0cc0      	lsrs	r0, r0, #19
    46f8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    46fc:	2300      	movs	r3, #0
    46fe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4702:	786a      	ldrb	r2, [r5, #1]
    4704:	2a00      	cmp	r2, #0
    4706:	d0e1      	beq.n	46cc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4708:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    470c:	78ad      	ldrb	r5, [r5, #2]
    470e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4712:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4716:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    471a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    471e:	0223      	lsls	r3, r4, #8
    4720:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4724:	0412      	lsls	r2, r2, #16
    4726:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    472a:	ea43 030e 	orr.w	r3, r3, lr
    472e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4730:	052a      	lsls	r2, r5, #20
    4732:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4736:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    473a:	4313      	orrs	r3, r2
    473c:	f040 0020 	orr.w	r0, r0, #32
    4740:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4744:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4748:	e7c0      	b.n	46cc <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    474a:	4803      	ldr	r0, [pc, #12]	; (4758 <nrfx_gpiote_output_configure+0xe0>)
    474c:	e7bf      	b.n	46ce <nrfx_gpiote_output_configure+0x56>
    474e:	bf00      	nop
    4750:	2000006c 	.word	0x2000006c
    4754:	0bad0000 	.word	0x0bad0000
    4758:	0bad0004 	.word	0x0bad0004

0000475c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    475e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4762:	4770      	bx	lr
    4764:	2000006c 	.word	0x2000006c

00004768 <nrfx_gpiote_channel_get>:
{
    4768:	b508      	push	{r3, lr}
    476a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    476c:	f7ff fe68 	bl	4440 <pin_in_use_by_te>
    4770:	b138      	cbz	r0, 4782 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4772:	4b05      	ldr	r3, [pc, #20]	; (4788 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4774:	4805      	ldr	r0, [pc, #20]	; (478c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4776:	3208      	adds	r2, #8
    4778:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    477c:	0b5b      	lsrs	r3, r3, #13
    477e:	700b      	strb	r3, [r1, #0]
}
    4780:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4782:	4803      	ldr	r0, [pc, #12]	; (4790 <nrfx_gpiote_channel_get+0x28>)
    4784:	e7fc      	b.n	4780 <nrfx_gpiote_channel_get+0x18>
    4786:	bf00      	nop
    4788:	2000006c 	.word	0x2000006c
    478c:	0bad0000 	.word	0x0bad0000
    4790:	0bad0004 	.word	0x0bad0004

00004794 <nrfx_gpiote_init>:
{
    4794:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4796:	4c0f      	ldr	r4, [pc, #60]	; (47d4 <nrfx_gpiote_init+0x40>)
    4798:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    479c:	b9bd      	cbnz	r5, 47ce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    479e:	2260      	movs	r2, #96	; 0x60
    47a0:	4629      	mov	r1, r5
    47a2:	f104 0010 	add.w	r0, r4, #16
    47a6:	f002 fba7 	bl	6ef8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    47aa:	2006      	movs	r0, #6
    47ac:	f7fd fd0c 	bl	21c8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    47b0:	4b09      	ldr	r3, [pc, #36]	; (47d8 <nrfx_gpiote_init+0x44>)
    return err_code;
    47b2:	480a      	ldr	r0, [pc, #40]	; (47dc <nrfx_gpiote_init+0x48>)
    47b4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    47b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    47bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    47c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    47c4:	2301      	movs	r3, #1
    47c6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    47ca:	6763      	str	r3, [r4, #116]	; 0x74
}
    47cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    47ce:	4804      	ldr	r0, [pc, #16]	; (47e0 <nrfx_gpiote_init+0x4c>)
    47d0:	e7fc      	b.n	47cc <nrfx_gpiote_init+0x38>
    47d2:	bf00      	nop
    47d4:	2000006c 	.word	0x2000006c
    47d8:	40006000 	.word	0x40006000
    47dc:	0bad0000 	.word	0x0bad0000
    47e0:	0bad0005 	.word	0x0bad0005

000047e4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    47e4:	4b03      	ldr	r3, [pc, #12]	; (47f4 <nrfx_gpiote_is_init+0x10>)
    47e6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    47ea:	3800      	subs	r0, #0
    47ec:	bf18      	it	ne
    47ee:	2001      	movne	r0, #1
    47f0:	4770      	bx	lr
    47f2:	bf00      	nop
    47f4:	2000006c 	.word	0x2000006c

000047f8 <nrfx_gpiote_channel_free>:
{
    47f8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    47fa:	4801      	ldr	r0, [pc, #4]	; (4800 <nrfx_gpiote_channel_free+0x8>)
    47fc:	f7ff bd58 	b.w	42b0 <nrfx_flag32_free>
    4800:	200000dc 	.word	0x200000dc

00004804 <nrfx_gpiote_channel_alloc>:
{
    4804:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4806:	4801      	ldr	r0, [pc, #4]	; (480c <nrfx_gpiote_channel_alloc+0x8>)
    4808:	f7ff bd2c 	b.w	4264 <nrfx_flag32_alloc>
    480c:	200000dc 	.word	0x200000dc

00004810 <nrfx_gpiote_trigger_enable>:
{
    4810:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4812:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4814:	f7ff fe14 	bl	4440 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4818:	f104 0208 	add.w	r2, r4, #8
    481c:	4b1e      	ldr	r3, [pc, #120]	; (4898 <nrfx_gpiote_trigger_enable+0x88>)
    481e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4822:	b1e8      	cbz	r0, 4860 <nrfx_gpiote_trigger_enable+0x50>
    4824:	f013 0502 	ands.w	r5, r3, #2
    4828:	d11a      	bne.n	4860 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    482a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    482c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    482e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4832:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4836:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    483a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    483e:	6005      	str	r5, [r0, #0]
    4840:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4842:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4846:	f040 0001 	orr.w	r0, r0, #1
    484a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    484e:	b129      	cbz	r1, 485c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4850:	2201      	movs	r2, #1
    4852:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4856:	4a11      	ldr	r2, [pc, #68]	; (489c <nrfx_gpiote_trigger_enable+0x8c>)
    4858:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    485c:	b003      	add	sp, #12
    485e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4860:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4864:	2b04      	cmp	r3, #4
    4866:	d012      	beq.n	488e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4868:	2b05      	cmp	r3, #5
    486a:	d012      	beq.n	4892 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    486c:	a801      	add	r0, sp, #4
    486e:	9401      	str	r4, [sp, #4]
    4870:	f7ff fdd8 	bl	4424 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4874:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4876:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    487a:	40d9      	lsrs	r1, r3
    487c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4880:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4882:	4620      	mov	r0, r4
}
    4884:	b003      	add	sp, #12
    4886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    488a:	f002 be66 	b.w	755a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    488e:	2103      	movs	r1, #3
    4890:	e7f7      	b.n	4882 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4892:	2102      	movs	r1, #2
    4894:	e7f5      	b.n	4882 <nrfx_gpiote_trigger_enable+0x72>
    4896:	bf00      	nop
    4898:	2000006c 	.word	0x2000006c
    489c:	40006000 	.word	0x40006000

000048a0 <nrfx_gpiote_trigger_disable>:
{
    48a0:	b508      	push	{r3, lr}
    48a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48a4:	f7ff fdcc 	bl	4440 <pin_in_use_by_te>
    48a8:	b1c0      	cbz	r0, 48dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    48aa:	f102 0108 	add.w	r1, r2, #8
    48ae:	4b0e      	ldr	r3, [pc, #56]	; (48e8 <nrfx_gpiote_trigger_disable+0x48>)
    48b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48b4:	0799      	lsls	r1, r3, #30
    48b6:	d411      	bmi.n	48dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    48b8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    48ba:	2201      	movs	r2, #1
    48bc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    48be:	009b      	lsls	r3, r3, #2
    48c0:	490a      	ldr	r1, [pc, #40]	; (48ec <nrfx_gpiote_trigger_disable+0x4c>)
    48c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    48c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    48ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    48ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    48d2:	f022 0203 	bic.w	r2, r2, #3
    48d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    48da:	bd08      	pop	{r3, pc}
    48dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    48e0:	2100      	movs	r1, #0
    48e2:	4610      	mov	r0, r2
    48e4:	f002 be39 	b.w	755a <nrf_gpio_cfg_sense_set>
    48e8:	2000006c 	.word	0x2000006c
    48ec:	40006000 	.word	0x40006000

000048f0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    48f0:	4b0e      	ldr	r3, [pc, #56]	; (492c <nrfx_gpiote_pin_uninit+0x3c>)
    48f2:	f100 0208 	add.w	r2, r0, #8
{
    48f6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    48f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    48fc:	07db      	lsls	r3, r3, #31
{
    48fe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4900:	d511      	bpl.n	4926 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4902:	f7ff ffcd 	bl	48a0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4906:	4620      	mov	r0, r4
    4908:	f7ff fdec 	bl	44e4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    490c:	a801      	add	r0, sp, #4
    490e:	9401      	str	r4, [sp, #4]
    4910:	f7ff fd88 	bl	4424 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4914:	9b01      	ldr	r3, [sp, #4]
    4916:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    491a:	2202      	movs	r2, #2
    491c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4920:	4803      	ldr	r0, [pc, #12]	; (4930 <nrfx_gpiote_pin_uninit+0x40>)
}
    4922:	b002      	add	sp, #8
    4924:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4926:	4803      	ldr	r0, [pc, #12]	; (4934 <nrfx_gpiote_pin_uninit+0x44>)
    4928:	e7fb      	b.n	4922 <nrfx_gpiote_pin_uninit+0x32>
    492a:	bf00      	nop
    492c:	2000006c 	.word	0x2000006c
    4930:	0bad0000 	.word	0x0bad0000
    4934:	0bad0004 	.word	0x0bad0004

00004938 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    493c:	4b64      	ldr	r3, [pc, #400]	; (4ad0 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    493e:	4865      	ldr	r0, [pc, #404]	; (4ad4 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4940:	4965      	ldr	r1, [pc, #404]	; (4ad8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    4942:	2600      	movs	r6, #0
{
    4944:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4946:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4948:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    494a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    494c:	b135      	cbz	r5, 495c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    494e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4952:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4954:	bf1e      	ittt	ne
    4956:	601c      	strne	r4, [r3, #0]
    4958:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    495a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    495c:	3304      	adds	r3, #4
    495e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4960:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4964:	d1f1      	bne.n	494a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4966:	f8df 816c 	ldr.w	r8, [pc, #364]	; 4ad4 <nrfx_gpiote_irq_handler+0x19c>
    496a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    496e:	2b00      	cmp	r3, #0
    4970:	f000 8091 	beq.w	4a96 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    4974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4978:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    497c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    497e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4982:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4986:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4988:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    498c:	2700      	movs	r7, #0
            while (latch[i])
    498e:	f10d 0910 	add.w	r9, sp, #16
    4992:	017b      	lsls	r3, r7, #5
    4994:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4996:	f04f 0a01 	mov.w	sl, #1
    499a:	e049      	b.n	4a30 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    499c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    499e:	4a4f      	ldr	r2, [pc, #316]	; (4adc <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    49a0:	fa94 f4a4 	rbit	r4, r4
    49a4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    49a8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49aa:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    49ae:	08e0      	lsrs	r0, r4, #3
    49b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    49b4:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    49b6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    49ba:	fa0a fc02 	lsl.w	ip, sl, r2
    49be:	f819 2000 	ldrb.w	r2, [r9, r0]
    49c2:	ea22 020c 	bic.w	r2, r2, ip
    49c6:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49ca:	a803      	add	r0, sp, #12
    49cc:	f3c3 0582 	ubfx	r5, r3, #2, #3
    49d0:	0899      	lsrs	r1, r3, #2
    49d2:	f7ff fd27 	bl	4424 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    49d6:	9a03      	ldr	r2, [sp, #12]
    49d8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    49dc:	074b      	lsls	r3, r1, #29
    49de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    49e2:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    49e4:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    49e8:	d529      	bpl.n	4a3e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    49ea:	4620      	mov	r0, r4
    49ec:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    49ee:	b2d5      	uxtb	r5, r2
    49f0:	f7ff fd30 	bl	4454 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49f4:	a803      	add	r0, sp, #12
    49f6:	9403      	str	r4, [sp, #12]
    49f8:	f7ff fd14 	bl	4424 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    49fc:	9b03      	ldr	r3, [sp, #12]
    49fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4a02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4a06:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4a0a:	429d      	cmp	r5, r3
    4a0c:	d107      	bne.n	4a1e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4a0e:	2100      	movs	r1, #0
    4a10:	4620      	mov	r0, r4
    4a12:	f002 fda2 	bl	755a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4a16:	4629      	mov	r1, r5
    4a18:	4620      	mov	r0, r4
    4a1a:	f002 fd9e 	bl	755a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4a1e:	a803      	add	r0, sp, #12
    4a20:	9403      	str	r4, [sp, #12]
    4a22:	f7ff fcff 	bl	4424 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4a26:	9b03      	ldr	r3, [sp, #12]
    4a28:	fa0a f303 	lsl.w	r3, sl, r3
    4a2c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    4a30:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    4a34:	2c00      	cmp	r4, #0
    4a36:	d1b1      	bne.n	499c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4a38:	b9cf      	cbnz	r7, 4a6e <nrfx_gpiote_irq_handler+0x136>
    4a3a:	2701      	movs	r7, #1
    4a3c:	e7a9      	b.n	4992 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a3e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a40:	bf0c      	ite	eq
    4a42:	2103      	moveq	r1, #3
    4a44:	2102      	movne	r1, #2
    4a46:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a48:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a4a:	f002 fd86 	bl	755a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a4e:	2d03      	cmp	r5, #3
    4a50:	d004      	beq.n	4a5c <nrfx_gpiote_irq_handler+0x124>
    4a52:	9a01      	ldr	r2, [sp, #4]
    4a54:	2a02      	cmp	r2, #2
    4a56:	d106      	bne.n	4a66 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4a58:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4a5a:	d1e0      	bne.n	4a1e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4a5c:	4659      	mov	r1, fp
    4a5e:	4620      	mov	r0, r4
    4a60:	f7ff fcf8 	bl	4454 <call_handler>
    4a64:	e7db      	b.n	4a1e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4a66:	2a03      	cmp	r2, #3
    4a68:	d1d9      	bne.n	4a1e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4a6a:	2d02      	cmp	r5, #2
    4a6c:	e7f5      	b.n	4a5a <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a6e:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    4a72:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4a76:	491a      	ldr	r1, [pc, #104]	; (4ae0 <nrfx_gpiote_irq_handler+0x1a8>)
    4a78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4a7c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4a80:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4a82:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4a86:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    4a8a:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4a8c:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4a90:	4313      	orrs	r3, r2
    4a92:	f47f af7b 	bne.w	498c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    4a96:	2401      	movs	r4, #1
    while (mask)
    4a98:	b916      	cbnz	r6, 4aa0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4a9a:	b007      	add	sp, #28
    4a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    4aa0:	fa96 f3a6 	rbit	r3, r6
    4aa4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4aa8:	fa04 f203 	lsl.w	r2, r4, r3
    4aac:	009b      	lsls	r3, r3, #2
    4aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ab2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4ab6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4aba:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4abe:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4ac2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4ac6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4aca:	f7ff fcc3 	bl	4454 <call_handler>
    4ace:	e7e3      	b.n	4a98 <nrfx_gpiote_irq_handler+0x160>
    4ad0:	40006100 	.word	0x40006100
    4ad4:	40006000 	.word	0x40006000
    4ad8:	40006120 	.word	0x40006120
    4adc:	2000006c 	.word	0x2000006c
    4ae0:	50000300 	.word	0x50000300

00004ae4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4ae4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4ae6:	4801      	ldr	r0, [pc, #4]	; (4aec <nrfx_ppi_channel_alloc+0x8>)
    4ae8:	f7ff bbbc 	b.w	4264 <nrfx_flag32_alloc>
    4aec:	200000e8 	.word	0x200000e8

00004af0 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
    4af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4af4:	7906      	ldrb	r6, [r0, #4]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4af6:	4d2b      	ldr	r5, [pc, #172]	; (4ba4 <nrfx_twim_init+0xb4>)
    4af8:	f04f 0c34 	mov.w	ip, #52	; 0x34
    4afc:	fb0c fc06 	mul.w	ip, ip, r6
    4b00:	eb05 040c 	add.w	r4, r5, ip
    4b04:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    4b08:	2f00      	cmp	r7, #0
    4b0a:	d149      	bne.n	4ba0 <nrfx_twim_init+0xb0>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    4b0c:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    4b0e:	6063      	str	r3, [r4, #4]
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4b10:	7b4b      	ldrb	r3, [r1, #13]
    4b12:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4b16:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->handler         = event_handler;
    4b18:	f845 200c 	str.w	r2, [r5, ip]
    p_cb->int_mask        = 0;
    4b1c:	60a7      	str	r7, [r4, #8]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4b1e:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->repeated        = false;
    4b22:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
    4b26:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    4b2a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    4b2e:	b1cb      	cbz	r3, 4b64 <nrfx_twim_init+0x74>
    4b30:	f1bc 0f00 	cmp.w	ip, #0
    4b34:	d105      	bne.n	4b42 <nrfx_twim_init+0x52>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    4b36:	e9d1 4300 	ldrd	r4, r3, [r1]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    4b3a:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    4b3e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
    4b42:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    4b44:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    4b48:	b11a      	cbz	r2, 4b52 <nrfx_twim_init+0x62>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    4b4a:	f340 3007 	sbfx	r0, r0, #12, #8
    4b4e:	f7fd fb3b 	bl	21c8 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4b52:	2334      	movs	r3, #52	; 0x34
    4b54:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4b58:	4813      	ldr	r0, [pc, #76]	; (4ba8 <nrfx_twim_init+0xb8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4b5a:	2301      	movs	r3, #1
    4b5c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    4b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
    4b64:	680c      	ldr	r4, [r1, #0]
        case 1: return NRF_P1;
    4b66:	4b11      	ldr	r3, [pc, #68]	; (4bac <nrfx_twim_init+0xbc>)
    *p_pin = pin_number & 0x1F;
    4b68:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    4b6c:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    4b6e:	2c01      	cmp	r4, #1
    4b70:	bf18      	it	ne
    4b72:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4b76:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
        case 1: return NRF_P1;
    4b7a:	bf08      	it	eq
    4b7c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    4b7e:	f240 6e0c 	movw	lr, #1548	; 0x60c
    4b82:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
    4b86:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    4b88:	f004 071f 	and.w	r7, r4, #31
    return pin_number >> 5;
    4b8c:	0964      	lsrs	r4, r4, #5
        case 1: return NRF_P1;
    4b8e:	2c01      	cmp	r4, #1
    4b90:	bf18      	it	ne
    4b92:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    4b96:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
    4b9a:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    4b9e:	e7c7      	b.n	4b30 <nrfx_twim_init+0x40>
        return err_code;
    4ba0:	4803      	ldr	r0, [pc, #12]	; (4bb0 <nrfx_twim_init+0xc0>)
    4ba2:	e7dd      	b.n	4b60 <nrfx_twim_init+0x70>
    4ba4:	20000f08 	.word	0x20000f08
    4ba8:	0bad0000 	.word	0x0bad0000
    4bac:	50000300 	.word	0x50000300
    4bb0:	0bad0005 	.word	0x0bad0005

00004bb4 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    4bb4:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4bb6:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    4bb8:	2106      	movs	r1, #6
    4bba:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4bbe:	4b04      	ldr	r3, [pc, #16]	; (4bd0 <nrfx_twim_enable+0x1c>)
    4bc0:	2134      	movs	r1, #52	; 0x34
    4bc2:	fb01 3302 	mla	r3, r1, r2, r3
    4bc6:	2202      	movs	r2, #2
    4bc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	20000f08 	.word	0x20000f08

00004bd4 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bd6:	4d5a      	ldr	r5, [pc, #360]	; (4d40 <nrfx_twim_0_irq_handler+0x16c>)
    4bd8:	4c5a      	ldr	r4, [pc, #360]	; (4d44 <nrfx_twim_0_irq_handler+0x170>)
    4bda:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    4bde:	b087      	sub	sp, #28
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    4be0:	b1fb      	cbz	r3, 4c22 <nrfx_twim_0_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4be2:	2300      	movs	r3, #0
    4be4:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
    4be8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4bf0:	b9bb      	cbnz	r3, 4c22 <nrfx_twim_0_irq_handler+0x4e>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    4bf2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    4bf4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    4bf8:	2302      	movs	r3, #2
    4bfa:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4bfc:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    4bfe:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c02:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    4c06:	b11b      	cbz	r3, 4c10 <nrfx_twim_0_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
    4c08:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    4c0c:	059e      	lsls	r6, r3, #22
    4c0e:	d403      	bmi.n	4c18 <nrfx_twim_0_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c10:	4b4b      	ldr	r3, [pc, #300]	; (4d40 <nrfx_twim_0_irq_handler+0x16c>)
    4c12:	2201      	movs	r2, #1
    4c14:	621a      	str	r2, [r3, #32]
    4c16:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    4c18:	2301      	movs	r3, #1
    4c1a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
    4c1e:	b007      	add	sp, #28
    4c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c22:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    4c26:	2b00      	cmp	r3, #0
    4c28:	d053      	beq.n	4cd2 <nrfx_twim_0_irq_handler+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c2a:	2300      	movs	r3, #0
    4c2c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    4c30:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    4c34:	6a23      	ldr	r3, [r4, #32]
    4c36:	065d      	lsls	r5, r3, #25
    4c38:	d40a      	bmi.n	4c50 <nrfx_twim_0_irq_handler+0x7c>
    4c3a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4c3e:	b93b      	cbnz	r3, 4c50 <nrfx_twim_0_irq_handler+0x7c>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    4c40:	4940      	ldr	r1, [pc, #256]	; (4d44 <nrfx_twim_0_irq_handler+0x170>)
    4c42:	483f      	ldr	r0, [pc, #252]	; (4d40 <nrfx_twim_0_irq_handler+0x16c>)
    4c44:	f002 fc98 	bl	7578 <xfer_completeness_check>
    4c48:	f080 0001 	eor.w	r0, r0, #1
    4c4c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    4c50:	6a23      	ldr	r3, [r4, #32]
    4c52:	f013 0704 	ands.w	r7, r3, #4
    4c56:	d121      	bne.n	4c9c <nrfx_twim_0_irq_handler+0xc8>
            event.xfer_desc = p_cb->xfer_desc;
    4c58:	4e3b      	ldr	r6, [pc, #236]	; (4d48 <nrfx_twim_0_irq_handler+0x174>)
            if (!p_cb->repeated || p_cb->error)
    4c5a:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
    4c5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4c60:	ad01      	add	r5, sp, #4
    4c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4c64:	6833      	ldr	r3, [r6, #0]
    4c66:	602b      	str	r3, [r5, #0]
    4c68:	4b35      	ldr	r3, [pc, #212]	; (4d40 <nrfx_twim_0_irq_handler+0x16c>)
    4c6a:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    4c6e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    4c72:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    4c76:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    4c7a:	f1bc 0f00 	cmp.w	ip, #0
    4c7e:	d002      	beq.n	4c86 <nrfx_twim_0_irq_handler+0xb2>
    4c80:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    4c84:	b152      	cbz	r2, 4c9c <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    4c86:	2200      	movs	r2, #0
    4c88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    4c8c:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    4c8e:	4a2f      	ldr	r2, [pc, #188]	; (4d4c <nrfx_twim_0_irq_handler+0x178>)
    4c90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c94:	4b2e      	ldr	r3, [pc, #184]	; (4d50 <nrfx_twim_0_irq_handler+0x17c>)
    4c96:	2208      	movs	r2, #8
    4c98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    4c9c:	4a28      	ldr	r2, [pc, #160]	; (4d40 <nrfx_twim_0_irq_handler+0x16c>)
    4c9e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4ca2:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    4ca6:	0798      	lsls	r0, r3, #30
    4ca8:	d53c      	bpl.n	4d24 <nrfx_twim_0_irq_handler+0x150>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    4caa:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    4cac:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    4cb0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4cb4:	b90b      	cbnz	r3, 4cba <nrfx_twim_0_irq_handler+0xe6>
        p_cb->busy = false;
    4cb6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    4cba:	6a23      	ldr	r3, [r4, #32]
    4cbc:	075b      	lsls	r3, r3, #29
    4cbe:	d503      	bpl.n	4cc8 <nrfx_twim_0_irq_handler+0xf4>
    4cc0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d0aa      	beq.n	4c1e <nrfx_twim_0_irq_handler+0x4a>
        p_cb->handler(&event, p_cb->p_context);
    4cc8:	e9d4 3100 	ldrd	r3, r1, [r4]
    4ccc:	4668      	mov	r0, sp
    4cce:	4798      	blx	r3
}
    4cd0:	e7a5      	b.n	4c1e <nrfx_twim_0_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cd2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    4cd6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    4cda:	7b23      	ldrb	r3, [r4, #12]
    4cdc:	b983      	cbnz	r3, 4d00 <nrfx_twim_0_irq_handler+0x12c>
            event.xfer_desc = p_cb->xfer_desc;
    4cde:	4f1a      	ldr	r7, [pc, #104]	; (4d48 <nrfx_twim_0_irq_handler+0x174>)
    4ce0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4ce2:	ae01      	add	r6, sp, #4
    4ce4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4ce6:	683b      	ldr	r3, [r7, #0]
    4ce8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    4cea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d1d4      	bne.n	4c9c <nrfx_twim_0_irq_handler+0xc8>
    p_reg->SHORTS = mask;
    4cf2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    4cf6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    4cf8:	4b14      	ldr	r3, [pc, #80]	; (4d4c <nrfx_twim_0_irq_handler+0x178>)
    4cfa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    4cfe:	e7c9      	b.n	4c94 <nrfx_twim_0_irq_handler+0xc0>
    p_reg->SHORTS = mask;
    4d00:	f44f 7300 	mov.w	r3, #512	; 0x200
    4d04:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    4d08:	f240 2302 	movw	r3, #514	; 0x202
    4d0c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    4d0e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    4d12:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    4d16:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    4d18:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d1c:	2301      	movs	r3, #1
    4d1e:	60ab      	str	r3, [r5, #8]
    4d20:	622b      	str	r3, [r5, #32]
            return;
    4d22:	e77c      	b.n	4c1e <nrfx_twim_0_irq_handler+0x4a>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    4d24:	0759      	lsls	r1, r3, #29
    4d26:	d501      	bpl.n	4d2c <nrfx_twim_0_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    4d28:	2302      	movs	r3, #2
    4d2a:	e7bf      	b.n	4cac <nrfx_twim_0_irq_handler+0xd8>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    4d2c:	07da      	lsls	r2, r3, #31
    4d2e:	d501      	bpl.n	4d34 <nrfx_twim_0_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    4d30:	2303      	movs	r3, #3
    4d32:	e7bb      	b.n	4cac <nrfx_twim_0_irq_handler+0xd8>
    else if (p_cb->error)
    4d34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d0b7      	beq.n	4cac <nrfx_twim_0_irq_handler+0xd8>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    4d3c:	2304      	movs	r3, #4
    4d3e:	e7b5      	b.n	4cac <nrfx_twim_0_irq_handler+0xd8>
    4d40:	40003000 	.word	0x40003000
    4d44:	20000f08 	.word	0x20000f08
    4d48:	20000f14 	.word	0x20000f14
    4d4c:	019c0202 	.word	0x019c0202
    4d50:	e000e100 	.word	0xe000e100

00004d54 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d54:	4b0e      	ldr	r3, [pc, #56]	; (4d90 <z_sys_init_run_level+0x3c>)
{
    4d56:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4d5c:	3001      	adds	r0, #1
    4d5e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4d62:	42a6      	cmp	r6, r4
    4d64:	d800      	bhi.n	4d68 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4d66:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4d68:	e9d4 3500 	ldrd	r3, r5, [r4]
    4d6c:	4628      	mov	r0, r5
    4d6e:	4798      	blx	r3
		if (dev != NULL) {
    4d70:	b165      	cbz	r5, 4d8c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4d72:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4d74:	b130      	cbz	r0, 4d84 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4d76:	2800      	cmp	r0, #0
    4d78:	bfb8      	it	lt
    4d7a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4d7c:	28ff      	cmp	r0, #255	; 0xff
    4d7e:	bfa8      	it	ge
    4d80:	20ff      	movge	r0, #255	; 0xff
    4d82:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4d84:	785a      	ldrb	r2, [r3, #1]
    4d86:	f042 0201 	orr.w	r2, r2, #1
    4d8a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d8c:	3408      	adds	r4, #8
    4d8e:	e7e8      	b.n	4d62 <z_sys_init_run_level+0xe>
    4d90:	00007f34 	.word	0x00007f34

00004d94 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d98:	b086      	sub	sp, #24
    4d9a:	4605      	mov	r5, r0
    4d9c:	af00      	add	r7, sp, #0
    4d9e:	460e      	mov	r6, r1
	__asm__ volatile(
    4da0:	f04f 0320 	mov.w	r3, #32
    4da4:	f3ef 8811 	mrs	r8, BASEPRI
    4da8:	f383 8812 	msr	BASEPRI_MAX, r3
    4dac:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4db0:	f000 ffce 	bl	5d50 <z_impl_z_current_get>
    4db4:	2d04      	cmp	r5, #4
    4db6:	bf96      	itet	ls
    4db8:	4b2c      	ldrls	r3, [pc, #176]	; (4e6c <z_fatal_error+0xd8>)
    4dba:	4b2d      	ldrhi	r3, [pc, #180]	; (4e70 <z_fatal_error+0xdc>)
    4dbc:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4dc0:	46e9      	mov	r9, sp
    4dc2:	b08a      	sub	sp, #40	; 0x28
    4dc4:	4604      	mov	r4, r0
    4dc6:	466a      	mov	r2, sp
    4dc8:	492a      	ldr	r1, [pc, #168]	; (4e74 <z_fatal_error+0xe0>)
    4dca:	61d3      	str	r3, [r2, #28]
    4dcc:	2303      	movs	r3, #3
    4dce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4dd2:	f04f 0a00 	mov.w	sl, #0
    4dd6:	4b28      	ldr	r3, [pc, #160]	; (4e78 <z_fatal_error+0xe4>)
    4dd8:	f8c2 a020 	str.w	sl, [r2, #32]
    4ddc:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4de0:	f842 3f10 	str.w	r3, [r2, #16]!
    4de4:	4825      	ldr	r0, [pc, #148]	; (4e7c <z_fatal_error+0xe8>)
    4de6:	4653      	mov	r3, sl
    4de8:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    4dec:	f7fc fcea 	bl	17c4 <z_impl_z_log_msg_static_create>
    4df0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4df2:	b17e      	cbz	r6, 4e14 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4df4:	69f3      	ldr	r3, [r6, #28]
    4df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4dfa:	b15b      	cbz	r3, 4e14 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4dfc:	4b20      	ldr	r3, [pc, #128]	; (4e80 <z_fatal_error+0xec>)
    4dfe:	617b      	str	r3, [r7, #20]
    4e00:	2302      	movs	r3, #2
    4e02:	613b      	str	r3, [r7, #16]
    4e04:	481d      	ldr	r0, [pc, #116]	; (4e7c <z_fatal_error+0xe8>)
    4e06:	4653      	mov	r3, sl
    4e08:	f107 0210 	add.w	r2, r7, #16
    4e0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e10:	f7fc fcd8 	bl	17c4 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4e14:	b12c      	cbz	r4, 4e22 <z_fatal_error+0x8e>
    4e16:	4620      	mov	r0, r4
    4e18:	f002 fc3a 	bl	7690 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4e1c:	b108      	cbz	r0, 4e22 <z_fatal_error+0x8e>
    4e1e:	7803      	ldrb	r3, [r0, #0]
    4e20:	b903      	cbnz	r3, 4e24 <z_fatal_error+0x90>
		thread_name = "unknown";
    4e22:	4818      	ldr	r0, [pc, #96]	; (4e84 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4e24:	46e9      	mov	r9, sp
    4e26:	b08a      	sub	sp, #40	; 0x28
    4e28:	466a      	mov	r2, sp
    4e2a:	4b17      	ldr	r3, [pc, #92]	; (4e88 <z_fatal_error+0xf4>)
    4e2c:	61d0      	str	r0, [r2, #28]
    4e2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4e32:	2303      	movs	r3, #3
    4e34:	f882 3020 	strb.w	r3, [r2, #32]
    4e38:	4b14      	ldr	r3, [pc, #80]	; (4e8c <z_fatal_error+0xf8>)
    4e3a:	f842 3f10 	str.w	r3, [r2, #16]!
    4e3e:	2300      	movs	r3, #0
    4e40:	480e      	ldr	r0, [pc, #56]	; (4e7c <z_fatal_error+0xe8>)
    4e42:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    4e46:	f7fc fcbd 	bl	17c4 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4e4a:	4631      	mov	r1, r6
    4e4c:	46cd      	mov	sp, r9
    4e4e:	4628      	mov	r0, r5
    4e50:	f7ff f8ee 	bl	4030 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4e54:	f388 8811 	msr	BASEPRI, r8
    4e58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4e5c:	4620      	mov	r0, r4
    4e5e:	f7fd fe39 	bl	2ad4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4e62:	3718      	adds	r7, #24
    4e64:	46bd      	mov	sp, r7
    4e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e6a:	bf00      	nop
    4e6c:	00007f4c 	.word	0x00007f4c
    4e70:	000087f3 	.word	0x000087f3
    4e74:	00008809 	.word	0x00008809
    4e78:	01000005 	.word	0x01000005
    4e7c:	00007cec 	.word	0x00007cec
    4e80:	00008831 	.word	0x00008831
    4e84:	00008801 	.word	0x00008801
    4e88:	00008852 	.word	0x00008852
    4e8c:	01000004 	.word	0x01000004

00004e90 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4e90:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4e92:	4b0a      	ldr	r3, [pc, #40]	; (4ebc <bg_thread_main+0x2c>)
    4e94:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4e96:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4e98:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4e9a:	f7ff ff5b 	bl	4d54 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4e9e:	f001 f9df 	bl	6260 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4ea2:	2003      	movs	r0, #3
    4ea4:	f7ff ff56 	bl	4d54 <z_sys_init_run_level>

	z_init_static_threads();
    4ea8:	f000 f96a 	bl	5180 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4eac:	f7fb faf2 	bl	494 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4eb0:	4a03      	ldr	r2, [pc, #12]	; (4ec0 <bg_thread_main+0x30>)
    4eb2:	7b13      	ldrb	r3, [r2, #12]
    4eb4:	f023 0301 	bic.w	r3, r3, #1
    4eb8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4eba:	bd08      	pop	{r3, pc}
    4ebc:	2000115e 	.word	0x2000115e
    4ec0:	20000758 	.word	0x20000758

00004ec4 <z_bss_zero>:
{
    4ec4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4ec6:	4803      	ldr	r0, [pc, #12]	; (4ed4 <z_bss_zero+0x10>)
    4ec8:	4a03      	ldr	r2, [pc, #12]	; (4ed8 <z_bss_zero+0x14>)
    4eca:	2100      	movs	r1, #0
    4ecc:	1a12      	subs	r2, r2, r0
    4ece:	f002 fb8e 	bl	75ee <z_early_memset>
}
    4ed2:	bd08      	pop	{r3, pc}
    4ed4:	200001d0 	.word	0x200001d0
    4ed8:	20001160 	.word	0x20001160

00004edc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4edc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4ede:	2300      	movs	r3, #0
{
    4ee0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4ee2:	2201      	movs	r2, #1
    4ee4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4ee8:	4e13      	ldr	r6, [pc, #76]	; (4f38 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4eea:	4d14      	ldr	r5, [pc, #80]	; (4f3c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4eec:	9301      	str	r3, [sp, #4]
    4eee:	220f      	movs	r2, #15
    4ef0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4ef4:	4912      	ldr	r1, [pc, #72]	; (4f40 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4ef6:	2318      	movs	r3, #24
    4ef8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4efc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4f00:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4f02:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4f06:	fb00 1104 	mla	r1, r0, r4, r1
    4f0a:	4b0e      	ldr	r3, [pc, #56]	; (4f44 <z_init_cpu+0x68>)
    4f0c:	9500      	str	r5, [sp, #0]
    4f0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4f12:	4630      	mov	r0, r6
    4f14:	f000 f8d6 	bl	50c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4f18:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4f1a:	480b      	ldr	r0, [pc, #44]	; (4f48 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4f1c:	752c      	strb	r4, [r5, #20]
    4f1e:	f023 0304 	bic.w	r3, r3, #4
    4f22:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4f24:	f44f 6304 	mov.w	r3, #2112	; 0x840
    4f28:	fb03 0404 	mla	r4, r3, r4, r0
    4f2c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4f2e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4f30:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4f32:	b006      	add	sp, #24
    4f34:	bd70      	pop	{r4, r5, r6, pc}
    4f36:	bf00      	nop
    4f38:	200006d8 	.word	0x200006d8
    4f3c:	20000f3c 	.word	0x20000f3c
    4f40:	20001900 	.word	0x20001900
    4f44:	00005239 	.word	0x00005239
    4f48:	20001a80 	.word	0x20001a80

00004f4c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4f4c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4f4e:	4b2e      	ldr	r3, [pc, #184]	; (5008 <z_cstart+0xbc>)
    4f50:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4f52:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4f56:	4d2d      	ldr	r5, [pc, #180]	; (500c <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4f58:	4e2d      	ldr	r6, [pc, #180]	; (5010 <z_cstart+0xc4>)
    4f5a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4f5c:	4f2d      	ldr	r7, [pc, #180]	; (5014 <z_cstart+0xc8>)
    4f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f62:	2400      	movs	r4, #0
    4f64:	616b      	str	r3, [r5, #20]
    4f66:	23e0      	movs	r3, #224	; 0xe0
    4f68:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4f6c:	77ec      	strb	r4, [r5, #31]
    4f6e:	762c      	strb	r4, [r5, #24]
    4f70:	766c      	strb	r4, [r5, #25]
    4f72:	76ac      	strb	r4, [r5, #26]
    4f74:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4f78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4f7a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4f7e:	626b      	str	r3, [r5, #36]	; 0x24
    4f80:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4f84:	f7fd fd1a 	bl	29bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4f88:	f7fd f89a 	bl	20c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f90:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4f92:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4f94:	f7fd fe6c 	bl	2c70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4f98:	f7fd fdb2 	bl	2b00 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4f9c:	f7fc fab8 	bl	1510 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4fa0:	f240 1301 	movw	r3, #257	; 0x101
    4fa4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4fa8:	ab06      	add	r3, sp, #24
    4faa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4fac:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4fb0:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4fb2:	f002 fb11 	bl	75d8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4fb6:	4620      	mov	r0, r4
    4fb8:	f7ff fecc 	bl	4d54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4fbc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4fbe:	4d16      	ldr	r5, [pc, #88]	; (5018 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4fc0:	f7ff fec8 	bl	4d54 <z_sys_init_run_level>
	z_sched_init();
    4fc4:	f000 fe16 	bl	5bf4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4fc8:	4b14      	ldr	r3, [pc, #80]	; (501c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4fca:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4fcc:	9305      	str	r3, [sp, #20]
    4fce:	2301      	movs	r3, #1
    4fd0:	4913      	ldr	r1, [pc, #76]	; (5020 <z_cstart+0xd4>)
    4fd2:	9400      	str	r4, [sp, #0]
    4fd4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4fdc:	463b      	mov	r3, r7
    4fde:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4fe2:	4628      	mov	r0, r5
    4fe4:	f000 f86e 	bl	50c4 <z_setup_new_thread>
    4fe8:	7b6a      	ldrb	r2, [r5, #13]
    4fea:	4606      	mov	r6, r0
    4fec:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4ff0:	4628      	mov	r0, r5
    4ff2:	736a      	strb	r2, [r5, #13]
    4ff4:	f002 fbfb 	bl	77ee <z_ready_thread>
	z_init_cpu(0);
    4ff8:	4620      	mov	r0, r4
    4ffa:	f7ff ff6f 	bl	4edc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4ffe:	463a      	mov	r2, r7
    5000:	4631      	mov	r1, r6
    5002:	4628      	mov	r0, r5
    5004:	f7fd f9bc 	bl	2380 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5008:	200022c0 	.word	0x200022c0
    500c:	e000ed00 	.word	0xe000ed00
    5010:	20000f3c 	.word	0x20000f3c
    5014:	00004e91 	.word	0x00004e91
    5018:	20000758 	.word	0x20000758
    501c:	000088b4 	.word	0x000088b4
    5020:	200014c0 	.word	0x200014c0

00005024 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5024:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5026:	4b0e      	ldr	r3, [pc, #56]	; (5060 <init_mem_slab_module+0x3c>)
    5028:	4c0e      	ldr	r4, [pc, #56]	; (5064 <init_mem_slab_module+0x40>)
    502a:	42a3      	cmp	r3, r4
    502c:	d301      	bcc.n	5032 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    502e:	2000      	movs	r0, #0
	return rc;
}
    5030:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5032:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    5036:	ea41 0200 	orr.w	r2, r1, r0
    503a:	f012 0203 	ands.w	r2, r2, #3
    503e:	d10b      	bne.n	5058 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5040:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5042:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5044:	42aa      	cmp	r2, r5
    5046:	d101      	bne.n	504c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5048:	331c      	adds	r3, #28
    504a:	e7ee      	b.n	502a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    504c:	695e      	ldr	r6, [r3, #20]
    504e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5050:	3201      	adds	r2, #1
		slab->free_list = p;
    5052:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5054:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5056:	e7f5      	b.n	5044 <init_mem_slab_module+0x20>
	return rc;
    5058:	f06f 0015 	mvn.w	r0, #21
    505c:	e7e8      	b.n	5030 <init_mem_slab_module+0xc>
    505e:	bf00      	nop
    5060:	2000016c 	.word	0x2000016c
    5064:	2000016c 	.word	0x2000016c

00005068 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5068:	b537      	push	{r0, r1, r2, r4, r5, lr}
    506a:	460c      	mov	r4, r1
	__asm__ volatile(
    506c:	f04f 0520 	mov.w	r5, #32
    5070:	f3ef 8111 	mrs	r1, BASEPRI
    5074:	f385 8812 	msr	BASEPRI_MAX, r5
    5078:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    507c:	6945      	ldr	r5, [r0, #20]
    507e:	b15d      	cbz	r5, 5098 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5080:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5082:	682b      	ldr	r3, [r5, #0]
    5084:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5086:	6983      	ldr	r3, [r0, #24]
    5088:	3301      	adds	r3, #1
    508a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    508c:	2000      	movs	r0, #0
	__asm__ volatile(
    508e:	f381 8811 	msr	BASEPRI, r1
    5092:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5096:	e011      	b.n	50bc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5098:	ea52 0c03 	orrs.w	ip, r2, r3
    509c:	d103      	bne.n	50a6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    509e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    50a0:	f06f 000b 	mvn.w	r0, #11
    50a4:	e7f3      	b.n	508e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    50a6:	e9cd 2300 	strd	r2, r3, [sp]
    50aa:	4602      	mov	r2, r0
    50ac:	3008      	adds	r0, #8
    50ae:	f000 fcf7 	bl	5aa0 <z_pend_curr>
		if (result == 0) {
    50b2:	b918      	cbnz	r0, 50bc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    50b4:	4b02      	ldr	r3, [pc, #8]	; (50c0 <k_mem_slab_alloc+0x58>)
    50b6:	689b      	ldr	r3, [r3, #8]
    50b8:	695b      	ldr	r3, [r3, #20]
    50ba:	6023      	str	r3, [r4, #0]
}
    50bc:	b003      	add	sp, #12
    50be:	bd30      	pop	{r4, r5, pc}
    50c0:	20000f3c 	.word	0x20000f3c

000050c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    50c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    50c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    50ca:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    50cc:	2604      	movs	r6, #4
    50ce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    50d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    50d2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    50d4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    50d8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    50da:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    50dc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    50e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    50e2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    50e4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    50e8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    50ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    50ee:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    50f2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    50f4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    50f6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    50f8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    50fc:	9202      	str	r2, [sp, #8]
    50fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5100:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5102:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5106:	9200      	str	r2, [sp, #0]
    5108:	4642      	mov	r2, r8
{
    510a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    510c:	f7fd f906 	bl	231c <arch_new_thread>
	if (!_current) {
    5110:	4b04      	ldr	r3, [pc, #16]	; (5124 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    5112:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5114:	689b      	ldr	r3, [r3, #8]
    5116:	b103      	cbz	r3, 511a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    511a:	6723      	str	r3, [r4, #112]	; 0x70
}
    511c:	4640      	mov	r0, r8
    511e:	b004      	add	sp, #16
    5120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5124:	20000f3c 	.word	0x20000f3c

00005128 <z_impl_k_thread_create>:
{
    5128:	b5f0      	push	{r4, r5, r6, r7, lr}
    512a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    512c:	2700      	movs	r7, #0
    512e:	9705      	str	r7, [sp, #20]
    5130:	9f10      	ldr	r7, [sp, #64]	; 0x40
    5132:	9704      	str	r7, [sp, #16]
    5134:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5136:	9703      	str	r7, [sp, #12]
    5138:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    513a:	9702      	str	r7, [sp, #8]
{
    513c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5140:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5142:	9701      	str	r7, [sp, #4]
    5144:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5146:	9700      	str	r7, [sp, #0]
{
    5148:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    514a:	f7ff ffbb 	bl	50c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    514e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    5152:	bf08      	it	eq
    5154:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5158:	d005      	beq.n	5166 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    515a:	ea55 0306 	orrs.w	r3, r5, r6
    515e:	d105      	bne.n	516c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5160:	4620      	mov	r0, r4
    5162:	f000 fc41 	bl	59e8 <z_sched_start>
}
    5166:	4620      	mov	r0, r4
    5168:	b007      	add	sp, #28
    516a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    516c:	4903      	ldr	r1, [pc, #12]	; (517c <z_impl_k_thread_create+0x54>)
    516e:	4632      	mov	r2, r6
    5170:	462b      	mov	r3, r5
    5172:	f104 0018 	add.w	r0, r4, #24
    5176:	f000 fec7 	bl	5f08 <z_add_timeout>
    517a:	e7f4      	b.n	5166 <z_impl_k_thread_create+0x3e>
    517c:	0000780f 	.word	0x0000780f

00005180 <z_init_static_threads>:
{
    5180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5184:	4c29      	ldr	r4, [pc, #164]	; (522c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5186:	4d2a      	ldr	r5, [pc, #168]	; (5230 <z_init_static_threads+0xb0>)
{
    5188:	b087      	sub	sp, #28
    518a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    518c:	42ae      	cmp	r6, r5
    518e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5192:	d30f      	bcc.n	51b4 <z_init_static_threads+0x34>
	k_sched_lock();
    5194:	f000 fb42 	bl	581c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5198:	4c24      	ldr	r4, [pc, #144]	; (522c <z_init_static_threads+0xac>)
    519a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5234 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    519e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    51a2:	f240 37e7 	movw	r7, #999	; 0x3e7
    51a6:	42ac      	cmp	r4, r5
    51a8:	d320      	bcc.n	51ec <z_init_static_threads+0x6c>
}
    51aa:	b007      	add	sp, #28
    51ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    51b0:	f000 bd04 	b.w	5bbc <k_sched_unlock>
		z_setup_new_thread(
    51b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    51b8:	9305      	str	r3, [sp, #20]
    51ba:	f854 3c10 	ldr.w	r3, [r4, #-16]
    51be:	9304      	str	r3, [sp, #16]
    51c0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    51c4:	9303      	str	r3, [sp, #12]
    51c6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    51ca:	9302      	str	r3, [sp, #8]
    51cc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    51d0:	9301      	str	r3, [sp, #4]
    51d2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    51d6:	9300      	str	r3, [sp, #0]
    51d8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    51dc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    51e0:	f7ff ff70 	bl	50c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    51e4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    51e8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    51ea:	e7ce      	b.n	518a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    51ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51ee:	1c5a      	adds	r2, r3, #1
    51f0:	d00d      	beq.n	520e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    51f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    51f6:	2100      	movs	r1, #0
    51f8:	4638      	mov	r0, r7
    51fa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    51fe:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5202:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5206:	d104      	bne.n	5212 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5208:	4640      	mov	r0, r8
    520a:	f000 fbed 	bl	59e8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    520e:	3430      	adds	r4, #48	; 0x30
    5210:	e7c9      	b.n	51a6 <z_init_static_threads+0x26>
    5212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5216:	2300      	movs	r3, #0
    5218:	f7fa ff72 	bl	100 <__aeabi_uldivmod>
    521c:	4602      	mov	r2, r0
    521e:	460b      	mov	r3, r1
    5220:	f108 0018 	add.w	r0, r8, #24
    5224:	4649      	mov	r1, r9
    5226:	f000 fe6f 	bl	5f08 <z_add_timeout>
    522a:	e7f0      	b.n	520e <z_init_static_threads+0x8e>
    522c:	2000016c 	.word	0x2000016c
    5230:	2000016c 	.word	0x2000016c
    5234:	0000780f 	.word	0x0000780f

00005238 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5238:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    523a:	4c0b      	ldr	r4, [pc, #44]	; (5268 <idle+0x30>)
	return !z_sys_post_kernel;
    523c:	4d0b      	ldr	r5, [pc, #44]	; (526c <idle+0x34>)
	__asm__ volatile(
    523e:	f04f 0220 	mov.w	r2, #32
    5242:	f3ef 8311 	mrs	r3, BASEPRI
    5246:	f382 8812 	msr	BASEPRI_MAX, r2
    524a:	f3bf 8f6f 	isb	sy
    524e:	f002 fb8a 	bl	7966 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5252:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5254:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5256:	b913      	cbnz	r3, 525e <idle+0x26>
	arch_cpu_idle();
    5258:	f7fc ff38 	bl	20cc <arch_cpu_idle>
}
    525c:	e7ef      	b.n	523e <idle+0x6>
    525e:	f7fc fd9d 	bl	1d9c <pm_system_suspend>
    5262:	2800      	cmp	r0, #0
    5264:	d1eb      	bne.n	523e <idle+0x6>
    5266:	e7f7      	b.n	5258 <idle+0x20>
    5268:	20000f3c 	.word	0x20000f3c
    526c:	2000115e 	.word	0x2000115e

00005270 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5274:	4604      	mov	r4, r0
    5276:	4617      	mov	r7, r2
    5278:	461e      	mov	r6, r3
    527a:	f04f 0320 	mov.w	r3, #32
    527e:	f3ef 8811 	mrs	r8, BASEPRI
    5282:	f383 8812 	msr	BASEPRI_MAX, r3
    5286:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    528a:	68c3      	ldr	r3, [r0, #12]
    528c:	4a32      	ldr	r2, [pc, #200]	; (5358 <z_impl_k_mutex_lock+0xe8>)
    528e:	b16b      	cbz	r3, 52ac <z_impl_k_mutex_lock+0x3c>
    5290:	6880      	ldr	r0, [r0, #8]
    5292:	6891      	ldr	r1, [r2, #8]
    5294:	4288      	cmp	r0, r1
    5296:	d019      	beq.n	52cc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5298:	ea57 0306 	orrs.w	r3, r7, r6
    529c:	d118      	bne.n	52d0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    529e:	f388 8811 	msr	BASEPRI, r8
    52a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    52a6:	f06f 000f 	mvn.w	r0, #15
    52aa:	e00c      	b.n	52c6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    52ac:	6891      	ldr	r1, [r2, #8]
    52ae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    52b2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    52b4:	3301      	adds	r3, #1
    52b6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    52b8:	6893      	ldr	r3, [r2, #8]
    52ba:	60a3      	str	r3, [r4, #8]
    52bc:	f388 8811 	msr	BASEPRI, r8
    52c0:	f3bf 8f6f 	isb	sy
		return 0;
    52c4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    52c6:	b002      	add	sp, #8
    52c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    52cc:	6921      	ldr	r1, [r4, #16]
    52ce:	e7f0      	b.n	52b2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    52d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    52d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    52d8:	4299      	cmp	r1, r3
    52da:	bfa8      	it	ge
    52dc:	4619      	movge	r1, r3
    52de:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    52e2:	4291      	cmp	r1, r2
    52e4:	bfb8      	it	lt
    52e6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    52e8:	428b      	cmp	r3, r1
    52ea:	dd2e      	ble.n	534a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    52ec:	f002 f9db 	bl	76a6 <adjust_owner_prio.isra.0>
    52f0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    52f2:	e9cd 7600 	strd	r7, r6, [sp]
    52f6:	4819      	ldr	r0, [pc, #100]	; (535c <z_impl_k_mutex_lock+0xec>)
    52f8:	4622      	mov	r2, r4
    52fa:	4641      	mov	r1, r8
    52fc:	f000 fbd0 	bl	5aa0 <z_pend_curr>
	if (got_mutex == 0) {
    5300:	2800      	cmp	r0, #0
    5302:	d0e0      	beq.n	52c6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5304:	f04f 0320 	mov.w	r3, #32
    5308:	f3ef 8611 	mrs	r6, BASEPRI
    530c:	f383 8812 	msr	BASEPRI_MAX, r3
    5310:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5314:	6823      	ldr	r3, [r4, #0]
    5316:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5318:	429c      	cmp	r4, r3
    531a:	d00a      	beq.n	5332 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    531c:	b14b      	cbz	r3, 5332 <z_impl_k_mutex_lock+0xc2>
    531e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5322:	4299      	cmp	r1, r3
    5324:	bfa8      	it	ge
    5326:	4619      	movge	r1, r3
    5328:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    532c:	4299      	cmp	r1, r3
    532e:	bfb8      	it	lt
    5330:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5332:	68a0      	ldr	r0, [r4, #8]
    5334:	f002 f9b7 	bl	76a6 <adjust_owner_prio.isra.0>
    5338:	b900      	cbnz	r0, 533c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    533a:	b145      	cbz	r5, 534e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    533c:	4807      	ldr	r0, [pc, #28]	; (535c <z_impl_k_mutex_lock+0xec>)
    533e:	4631      	mov	r1, r6
    5340:	f000 fa5a 	bl	57f8 <z_reschedule>
	return -EAGAIN;
    5344:	f06f 000a 	mvn.w	r0, #10
    5348:	e7bd      	b.n	52c6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    534a:	2500      	movs	r5, #0
    534c:	e7d1      	b.n	52f2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    534e:	f386 8811 	msr	BASEPRI, r6
    5352:	f3bf 8f6f 	isb	sy
    5356:	e7f5      	b.n	5344 <z_impl_k_mutex_lock+0xd4>
    5358:	20000f3c 	.word	0x20000f3c
    535c:	2000115f 	.word	0x2000115f

00005360 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5360:	6883      	ldr	r3, [r0, #8]
{
    5362:	b570      	push	{r4, r5, r6, lr}
    5364:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5366:	b36b      	cbz	r3, 53c4 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5368:	4a19      	ldr	r2, [pc, #100]	; (53d0 <z_impl_k_mutex_unlock+0x70>)
    536a:	6892      	ldr	r2, [r2, #8]
    536c:	4293      	cmp	r3, r2
    536e:	d12c      	bne.n	53ca <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5370:	68c3      	ldr	r3, [r0, #12]
    5372:	2b01      	cmp	r3, #1
    5374:	d903      	bls.n	537e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5376:	3b01      	subs	r3, #1
    5378:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    537a:	2000      	movs	r0, #0
}
    537c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    537e:	f04f 0320 	mov.w	r3, #32
    5382:	f3ef 8511 	mrs	r5, BASEPRI
    5386:	f383 8812 	msr	BASEPRI_MAX, r3
    538a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    538e:	6901      	ldr	r1, [r0, #16]
    5390:	6880      	ldr	r0, [r0, #8]
    5392:	f002 f988 	bl	76a6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5396:	4620      	mov	r0, r4
    5398:	f002 fa9a 	bl	78d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    539c:	2600      	movs	r6, #0
    539e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    53a0:	b150      	cbz	r0, 53b8 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    53a2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    53a6:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    53a8:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    53aa:	f002 fa20 	bl	77ee <z_ready_thread>
		z_reschedule(&lock, key);
    53ae:	4809      	ldr	r0, [pc, #36]	; (53d4 <z_impl_k_mutex_unlock+0x74>)
    53b0:	4629      	mov	r1, r5
    53b2:	f000 fa21 	bl	57f8 <z_reschedule>
    53b6:	e7e0      	b.n	537a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    53b8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    53ba:	f385 8811 	msr	BASEPRI, r5
    53be:	f3bf 8f6f 	isb	sy
    53c2:	e7da      	b.n	537a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    53c4:	f06f 0015 	mvn.w	r0, #21
    53c8:	e7d8      	b.n	537c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    53ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    53ce:	e7d5      	b.n	537c <z_impl_k_mutex_unlock+0x1c>
    53d0:	20000f3c 	.word	0x20000f3c
    53d4:	2000115f 	.word	0x2000115f

000053d8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    53d8:	b538      	push	{r3, r4, r5, lr}
    53da:	4604      	mov	r4, r0
	__asm__ volatile(
    53dc:	f04f 0320 	mov.w	r3, #32
    53e0:	f3ef 8511 	mrs	r5, BASEPRI
    53e4:	f383 8812 	msr	BASEPRI_MAX, r3
    53e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    53ec:	f002 fa70 	bl	78d0 <z_unpend_first_thread>

	if (thread != NULL) {
    53f0:	b148      	cbz	r0, 5406 <z_impl_k_sem_give+0x2e>
    53f2:	2200      	movs	r2, #0
    53f4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    53f6:	f002 f9fa 	bl	77ee <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    53fa:	4629      	mov	r1, r5
    53fc:	4805      	ldr	r0, [pc, #20]	; (5414 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    53fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5402:	f000 b9f9 	b.w	57f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5406:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    540a:	429a      	cmp	r2, r3
    540c:	bf18      	it	ne
    540e:	3301      	addne	r3, #1
    5410:	60a3      	str	r3, [r4, #8]
}
    5412:	e7f2      	b.n	53fa <z_impl_k_sem_give+0x22>
    5414:	2000115f 	.word	0x2000115f

00005418 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5418:	b513      	push	{r0, r1, r4, lr}
    541a:	f04f 0420 	mov.w	r4, #32
    541e:	f3ef 8111 	mrs	r1, BASEPRI
    5422:	f384 8812 	msr	BASEPRI_MAX, r4
    5426:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    542a:	6884      	ldr	r4, [r0, #8]
    542c:	b144      	cbz	r4, 5440 <z_impl_k_sem_take+0x28>
		sem->count--;
    542e:	3c01      	subs	r4, #1
    5430:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5432:	f381 8811 	msr	BASEPRI, r1
    5436:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    543a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    543c:	b002      	add	sp, #8
    543e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5440:	ea52 0403 	orrs.w	r4, r2, r3
    5444:	d106      	bne.n	5454 <z_impl_k_sem_take+0x3c>
    5446:	f381 8811 	msr	BASEPRI, r1
    544a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    544e:	f06f 000f 	mvn.w	r0, #15
    5452:	e7f3      	b.n	543c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5454:	e9cd 2300 	strd	r2, r3, [sp]
    5458:	4602      	mov	r2, r0
    545a:	4802      	ldr	r0, [pc, #8]	; (5464 <z_impl_k_sem_take+0x4c>)
    545c:	f000 fb20 	bl	5aa0 <z_pend_curr>
	return ret;
    5460:	e7ec      	b.n	543c <z_impl_k_sem_take+0x24>
    5462:	bf00      	nop
    5464:	2000115f 	.word	0x2000115f

00005468 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    5468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    546c:	4e47      	ldr	r6, [pc, #284]	; (558c <work_queue_main+0x124>)
    546e:	b085      	sub	sp, #20
    5470:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    5472:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5476:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
    547a:	f04f 0320 	mov.w	r3, #32
    547e:	f3ef 8711 	mrs	r7, BASEPRI
    5482:	f383 8812 	msr	BASEPRI_MAX, r3
    5486:	f3bf 8f6f 	isb	sy
    548a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    548e:	b98d      	cbnz	r5, 54b4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    5490:	2102      	movs	r1, #2
    5492:	f104 0098 	add.w	r0, r4, #152	; 0x98
    5496:	f002 f921 	bl	76dc <flag_test_and_clear>
    549a:	2800      	cmp	r0, #0
    549c:	d135      	bne.n	550a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    549e:	2300      	movs	r3, #0
    54a0:	e9cd 8900 	strd	r8, r9, [sp]
    54a4:	9302      	str	r3, [sp, #8]
    54a6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    54aa:	4639      	mov	r1, r7
    54ac:	4838      	ldr	r0, [pc, #224]	; (5590 <work_queue_main+0x128>)
    54ae:	f000 fcb5 	bl	5e1c <z_sched_wait>
			continue;
    54b2:	e7e2      	b.n	547a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    54b4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    54b8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    54ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    54be:	4295      	cmp	r5, r2
    54c0:	d101      	bne.n	54c6 <work_queue_main+0x5e>
	list->tail = node;
    54c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    54c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    54ca:	f043 0302 	orr.w	r3, r3, #2
    54ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    54d2:	68eb      	ldr	r3, [r5, #12]
    54d4:	f023 0304 	bic.w	r3, r3, #4
    54d8:	f043 0301 	orr.w	r3, r3, #1
    54dc:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    54de:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    54e0:	f387 8811 	msr	BASEPRI, r7
    54e4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    54e8:	4628      	mov	r0, r5
    54ea:	4798      	blx	r3
	__asm__ volatile(
    54ec:	f04f 0320 	mov.w	r3, #32
    54f0:	f3ef 8b11 	mrs	fp, BASEPRI
    54f4:	f383 8812 	msr	BASEPRI_MAX, r3
    54f8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    54fc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    54fe:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5500:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5504:	d40b      	bmi.n	551e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    5506:	60ea      	str	r2, [r5, #12]
    5508:	e00e      	b.n	5528 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    550a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    550e:	2200      	movs	r2, #0
    5510:	2101      	movs	r1, #1
    5512:	4628      	mov	r0, r5
    5514:	f002 f9f4 	bl	7900 <z_sched_wake>
    5518:	2800      	cmp	r0, #0
    551a:	d1f8      	bne.n	550e <work_queue_main+0xa6>
    551c:	e7bf      	b.n	549e <work_queue_main+0x36>
	return list->head;
    551e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    5520:	f023 0303 	bic.w	r3, r3, #3
    5524:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5526:	b970      	cbnz	r0, 5546 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    5528:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    552c:	f023 0302 	bic.w	r3, r3, #2
    5530:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    5534:	f38b 8811 	msr	BASEPRI, fp
    5538:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    553c:	05d8      	lsls	r0, r3, #23
    553e:	d49c      	bmi.n	547a <work_queue_main+0x12>
	z_impl_k_yield();
    5540:	f000 fb64 	bl	5c0c <z_impl_k_yield>
}
    5544:	e799      	b.n	547a <work_queue_main+0x12>
	return node->next;
    5546:	2700      	movs	r7, #0
    5548:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    554c:	463b      	mov	r3, r7
		if (wc->work == work) {
    554e:	6842      	ldr	r2, [r0, #4]
    5550:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    5552:	4601      	mov	r1, r0
		if (wc->work == work) {
    5554:	d10c      	bne.n	5570 <work_queue_main+0x108>
	return node->next;
    5556:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5558:	b997      	cbnz	r7, 5580 <work_queue_main+0x118>
    555a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    555c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    555e:	4282      	cmp	r2, r0
    5560:	d100      	bne.n	5564 <work_queue_main+0xfc>
	list->tail = node;
    5562:	6071      	str	r1, [r6, #4]
	parent->next = child;
    5564:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    5568:	f7ff ff36 	bl	53d8 <z_impl_k_sem_give>
}
    556c:	4639      	mov	r1, r7
    556e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5570:	f1ba 0f00 	cmp.w	sl, #0
    5574:	d0d8      	beq.n	5528 <work_queue_main+0xc0>
	return node->next;
    5576:	4650      	mov	r0, sl
    5578:	460f      	mov	r7, r1
    557a:	f8da a000 	ldr.w	sl, [sl]
    557e:	e7e6      	b.n	554e <work_queue_main+0xe6>
	return list->tail;
    5580:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    5582:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    5584:	4290      	cmp	r0, r2
	list->tail = node;
    5586:	bf08      	it	eq
    5588:	6077      	streq	r7, [r6, #4]
}
    558a:	e7eb      	b.n	5564 <work_queue_main+0xfc>
    558c:	20000f64 	.word	0x20000f64
    5590:	2000115f 	.word	0x2000115f

00005594 <submit_to_queue_locked>:
{
    5594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    5596:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5598:	079a      	lsls	r2, r3, #30
{
    559a:	4604      	mov	r4, r0
    559c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    559e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    55a2:	d41f      	bmi.n	55e4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    55a4:	075f      	lsls	r7, r3, #29
    55a6:	d41f      	bmi.n	55e8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    55a8:	680a      	ldr	r2, [r1, #0]
    55aa:	b90a      	cbnz	r2, 55b0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    55ac:	6882      	ldr	r2, [r0, #8]
    55ae:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    55b0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    55b2:	bf44      	itt	mi
    55b4:	68a3      	ldrmi	r3, [r4, #8]
    55b6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    55b8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    55ba:	bf4c      	ite	mi
    55bc:	2502      	movmi	r5, #2
		ret = 1;
    55be:	2501      	movpl	r5, #1
	if (queue == NULL) {
    55c0:	b37f      	cbz	r7, 5622 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    55c2:	4b1b      	ldr	r3, [pc, #108]	; (5630 <submit_to_queue_locked+0x9c>)
    55c4:	689b      	ldr	r3, [r3, #8]
    55c6:	42bb      	cmp	r3, r7
    55c8:	d111      	bne.n	55ee <submit_to_queue_locked+0x5a>
    55ca:	f002 f858 	bl	767e <k_is_in_isr>
    55ce:	f080 0001 	eor.w	r0, r0, #1
    55d2:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    55d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    55d8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    55da:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    55de:	d523      	bpl.n	5628 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    55e0:	b13a      	cbz	r2, 55f2 <submit_to_queue_locked+0x5e>
    55e2:	b940      	cbnz	r0, 55f6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    55e4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    55e8:	2300      	movs	r3, #0
    55ea:	6033      	str	r3, [r6, #0]
	return ret;
    55ec:	e013      	b.n	5616 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    55ee:	2000      	movs	r0, #0
    55f0:	e7f0      	b.n	55d4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    55f2:	071b      	lsls	r3, r3, #28
    55f4:	d4f6      	bmi.n	55e4 <submit_to_queue_locked+0x50>
	parent->next = child;
    55f6:	2300      	movs	r3, #0
    55f8:	6023      	str	r3, [r4, #0]
	return list->tail;
    55fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    55fe:	b963      	cbnz	r3, 561a <submit_to_queue_locked+0x86>
	list->head = node;
    5600:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    5604:	4638      	mov	r0, r7
    5606:	f002 f882 	bl	770e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    560a:	68e3      	ldr	r3, [r4, #12]
    560c:	f043 0304 	orr.w	r3, r3, #4
    5610:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    5612:	6833      	ldr	r3, [r6, #0]
    5614:	60a3      	str	r3, [r4, #8]
}
    5616:	4628      	mov	r0, r5
    5618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    561a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    561c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    5620:	e7f0      	b.n	5604 <submit_to_queue_locked+0x70>
		return -EINVAL;
    5622:	f06f 0515 	mvn.w	r5, #21
    5626:	e7df      	b.n	55e8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    5628:	f06f 0512 	mvn.w	r5, #18
    562c:	e7dc      	b.n	55e8 <submit_to_queue_locked+0x54>
    562e:	bf00      	nop
    5630:	20000f3c 	.word	0x20000f3c

00005634 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    5634:	b5f0      	push	{r4, r5, r6, r7, lr}
    5636:	b089      	sub	sp, #36	; 0x24
    5638:	4604      	mov	r4, r0
	list->head = NULL;
    563a:	2000      	movs	r0, #0
	list->tail = NULL;
    563c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    5640:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5642:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    5646:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    564a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    564e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    5652:	b31d      	cbz	r5, 569c <k_work_queue_start+0x68>
    5654:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    5656:	2800      	cmp	r0, #0
    5658:	f240 1001 	movw	r0, #257	; 0x101
    565c:	bf08      	it	eq
    565e:	2001      	moveq	r0, #1
	*flagp = flags;
    5660:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5664:	2000      	movs	r0, #0
    5666:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    566a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    566e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    5672:	e9cd 0001 	strd	r0, r0, [sp, #4]
    5676:	e9cd 6706 	strd	r6, r7, [sp, #24]
    567a:	4b09      	ldr	r3, [pc, #36]	; (56a0 <k_work_queue_start+0x6c>)
    567c:	9400      	str	r4, [sp, #0]
    567e:	4620      	mov	r0, r4
    5680:	f7ff fd52 	bl	5128 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5684:	b125      	cbz	r5, 5690 <k_work_queue_start+0x5c>
    5686:	6829      	ldr	r1, [r5, #0]
    5688:	b111      	cbz	r1, 5690 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    568a:	4620      	mov	r0, r4
    568c:	f001 fffd 	bl	768a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    5690:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    5692:	b009      	add	sp, #36	; 0x24
    5694:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5698:	f001 bffc 	b.w	7694 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    569c:	2001      	movs	r0, #1
    569e:	e7df      	b.n	5660 <k_work_queue_start+0x2c>
    56a0:	00005469 	.word	0x00005469

000056a4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    56a4:	b513      	push	{r0, r1, r4, lr}
    56a6:	9001      	str	r0, [sp, #4]
    56a8:	4608      	mov	r0, r1
	__asm__ volatile(
    56aa:	f04f 0120 	mov.w	r1, #32
    56ae:	f3ef 8411 	mrs	r4, BASEPRI
    56b2:	f381 8812 	msr	BASEPRI_MAX, r1
    56b6:	f3bf 8f6f 	isb	sy
	return *flagp;
    56ba:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    56bc:	f011 0f0e 	tst.w	r1, #14
    56c0:	d116      	bne.n	56f0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    56c2:	ea53 0c02 	orrs.w	ip, r3, r2
    56c6:	d108      	bne.n	56da <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    56c8:	a901      	add	r1, sp, #4
    56ca:	f7ff ff63 	bl	5594 <submit_to_queue_locked>
	__asm__ volatile(
    56ce:	f384 8811 	msr	BASEPRI, r4
    56d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    56d6:	b002      	add	sp, #8
    56d8:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    56da:	f041 0108 	orr.w	r1, r1, #8
    56de:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    56e0:	9901      	ldr	r1, [sp, #4]
    56e2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    56e4:	3010      	adds	r0, #16
    56e6:	4903      	ldr	r1, [pc, #12]	; (56f4 <k_work_schedule_for_queue+0x50>)
    56e8:	f000 fc0e 	bl	5f08 <z_add_timeout>
	return ret;
    56ec:	2001      	movs	r0, #1
    56ee:	e7ee      	b.n	56ce <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    56f0:	2000      	movs	r0, #0
    56f2:	e7ec      	b.n	56ce <k_work_schedule_for_queue+0x2a>
    56f4:	0000771d 	.word	0x0000771d

000056f8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    56f8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    56fa:	4801      	ldr	r0, [pc, #4]	; (5700 <k_work_schedule+0x8>)
    56fc:	f7ff bfd2 	b.w	56a4 <k_work_schedule_for_queue>
    5700:	200007e0 	.word	0x200007e0

00005704 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
    5704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5706:	460c      	mov	r4, r1
    5708:	9001      	str	r0, [sp, #4]
    570a:	4616      	mov	r6, r2
    570c:	461d      	mov	r5, r3
	__asm__ volatile(
    570e:	f04f 0320 	mov.w	r3, #32
    5712:	f3ef 8711 	mrs	r7, BASEPRI
    5716:	f383 8812 	msr	BASEPRI_MAX, r3
    571a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
    571e:	4608      	mov	r0, r1
    5720:	f001 ffe7 	bl	76f2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5724:	ea55 0306 	orrs.w	r3, r5, r6
    5728:	d109      	bne.n	573e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
    572a:	a901      	add	r1, sp, #4
    572c:	4620      	mov	r0, r4
    572e:	f7ff ff31 	bl	5594 <submit_to_queue_locked>
	__asm__ volatile(
    5732:	f387 8811 	msr	BASEPRI, r7
    5736:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    573a:	b003      	add	sp, #12
    573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
    573e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    5740:	4906      	ldr	r1, [pc, #24]	; (575c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
    5742:	f043 0308 	orr.w	r3, r3, #8
    5746:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
    5748:	9b01      	ldr	r3, [sp, #4]
    574a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    574c:	f104 0010 	add.w	r0, r4, #16
    5750:	4632      	mov	r2, r6
    5752:	462b      	mov	r3, r5
    5754:	f000 fbd8 	bl	5f08 <z_add_timeout>
	return ret;
    5758:	2001      	movs	r0, #1
    575a:	e7ea      	b.n	5732 <k_work_reschedule_for_queue+0x2e>
    575c:	0000771d 	.word	0x0000771d

00005760 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
    5760:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
    5762:	4801      	ldr	r0, [pc, #4]	; (5768 <k_work_reschedule+0x8>)
    5764:	f7ff bfce 	b.w	5704 <k_work_reschedule_for_queue>
    5768:	200007e0 	.word	0x200007e0

0000576c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    576c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    576e:	4d07      	ldr	r5, [pc, #28]	; (578c <z_reset_time_slice+0x20>)
    5770:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5772:	b154      	cbz	r4, 578a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5774:	f7fe f9c2 	bl	3afc <sys_clock_elapsed>
    5778:	4b05      	ldr	r3, [pc, #20]	; (5790 <z_reset_time_slice+0x24>)
    577a:	4404      	add	r4, r0
    577c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    577e:	6828      	ldr	r0, [r5, #0]
    5780:	2100      	movs	r1, #0
	}
}
    5782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5786:	f002 b8fe 	b.w	7986 <z_set_timeout_expiry>
}
    578a:	bd38      	pop	{r3, r4, r5, pc}
    578c:	20000f74 	.word	0x20000f74
    5790:	20000f3c 	.word	0x20000f3c

00005794 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5796:	4604      	mov	r4, r0
    5798:	460d      	mov	r5, r1
	__asm__ volatile(
    579a:	f04f 0320 	mov.w	r3, #32
    579e:	f3ef 8711 	mrs	r7, BASEPRI
    57a2:	f383 8812 	msr	BASEPRI_MAX, r3
    57a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    57aa:	4e10      	ldr	r6, [pc, #64]	; (57ec <k_sched_time_slice_set+0x58>)
    57ac:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    57ae:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    57b2:	f240 30e7 	movw	r0, #999	; 0x3e7
    57b6:	6131      	str	r1, [r6, #16]
    57b8:	2300      	movs	r3, #0
    57ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    57be:	fbe4 010c 	umlal	r0, r1, r4, ip
    57c2:	f7fa fc9d 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    57c6:	2c00      	cmp	r4, #0
    57c8:	4b09      	ldr	r3, [pc, #36]	; (57f0 <k_sched_time_slice_set+0x5c>)
    57ca:	dc0a      	bgt.n	57e2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    57cc:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    57ce:	4b09      	ldr	r3, [pc, #36]	; (57f4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    57d0:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    57d2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    57d4:	f7ff ffca 	bl	576c <z_reset_time_slice>
	__asm__ volatile(
    57d8:	f387 8811 	msr	BASEPRI, r7
    57dc:	f3bf 8f6f 	isb	sy
	}
}
    57e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    57e2:	2802      	cmp	r0, #2
    57e4:	bfb8      	it	lt
    57e6:	2002      	movlt	r0, #2
    57e8:	e7f0      	b.n	57cc <k_sched_time_slice_set+0x38>
    57ea:	bf00      	nop
    57ec:	20000f3c 	.word	0x20000f3c
    57f0:	20000f74 	.word	0x20000f74
    57f4:	20000f70 	.word	0x20000f70

000057f8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    57f8:	b949      	cbnz	r1, 580e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    57fa:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    57fe:	b930      	cbnz	r0, 580e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5800:	4b05      	ldr	r3, [pc, #20]	; (5818 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5802:	69da      	ldr	r2, [r3, #28]
    5804:	689b      	ldr	r3, [r3, #8]
    5806:	429a      	cmp	r2, r3
    5808:	d001      	beq.n	580e <z_reschedule+0x16>
	ret = arch_swap(key);
    580a:	f7fc bd33 	b.w	2274 <arch_swap>
    580e:	f381 8811 	msr	BASEPRI, r1
    5812:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    5816:	4770      	bx	lr
    5818:	20000f3c 	.word	0x20000f3c

0000581c <k_sched_lock>:
	__asm__ volatile(
    581c:	f04f 0320 	mov.w	r3, #32
    5820:	f3ef 8111 	mrs	r1, BASEPRI
    5824:	f383 8812 	msr	BASEPRI_MAX, r3
    5828:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    582c:	4b04      	ldr	r3, [pc, #16]	; (5840 <k_sched_lock+0x24>)
    582e:	689a      	ldr	r2, [r3, #8]
    5830:	7bd3      	ldrb	r3, [r2, #15]
    5832:	3b01      	subs	r3, #1
    5834:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5836:	f381 8811 	msr	BASEPRI, r1
    583a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    583e:	4770      	bx	lr
    5840:	20000f3c 	.word	0x20000f3c

00005844 <update_cache>:
{
    5844:	b538      	push	{r3, r4, r5, lr}
    5846:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5848:	480c      	ldr	r0, [pc, #48]	; (587c <update_cache+0x38>)
    584a:	4d0d      	ldr	r5, [pc, #52]	; (5880 <update_cache+0x3c>)
    584c:	f001 ffc9 	bl	77e2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5850:	4604      	mov	r4, r0
    5852:	b900      	cbnz	r0, 5856 <update_cache+0x12>
    5854:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5856:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5858:	b94a      	cbnz	r2, 586e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    585a:	7b5a      	ldrb	r2, [r3, #13]
    585c:	06d2      	lsls	r2, r2, #27
    585e:	d106      	bne.n	586e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5860:	69a2      	ldr	r2, [r4, #24]
    5862:	b922      	cbnz	r2, 586e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5864:	89da      	ldrh	r2, [r3, #14]
    5866:	2a7f      	cmp	r2, #127	; 0x7f
    5868:	d901      	bls.n	586e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    586a:	61eb      	str	r3, [r5, #28]
}
    586c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    586e:	429c      	cmp	r4, r3
    5870:	d002      	beq.n	5878 <update_cache+0x34>
			z_reset_time_slice(thread);
    5872:	4620      	mov	r0, r4
    5874:	f7ff ff7a 	bl	576c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5878:	61ec      	str	r4, [r5, #28]
}
    587a:	e7f7      	b.n	586c <update_cache+0x28>
    587c:	20000f5c 	.word	0x20000f5c
    5880:	20000f3c 	.word	0x20000f3c

00005884 <move_thread_to_end_of_prio_q>:
{
    5884:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5886:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    588a:	7b43      	ldrb	r3, [r0, #13]
    588c:	2a00      	cmp	r2, #0
{
    588e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5890:	da04      	bge.n	589c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5896:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5898:	f001 ff6b 	bl	7772 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    589c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    589e:	4a15      	ldr	r2, [pc, #84]	; (58f4 <move_thread_to_end_of_prio_q+0x70>)
    58a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58a4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    58a6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58aa:	f102 0520 	add.w	r5, r2, #32
    58ae:	42ab      	cmp	r3, r5
    58b0:	d01b      	beq.n	58ea <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    58b2:	b1d3      	cbz	r3, 58ea <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    58b4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    58b8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    58bc:	4286      	cmp	r6, r0
    58be:	d00f      	beq.n	58e0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    58c0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    58c2:	2800      	cmp	r0, #0
    58c4:	dd0c      	ble.n	58e0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    58c6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    58c8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    58cc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    58ce:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    58d0:	6890      	ldr	r0, [r2, #8]
    58d2:	1a43      	subs	r3, r0, r1
    58d4:	4258      	negs	r0, r3
}
    58d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    58da:	4158      	adcs	r0, r3
    58dc:	f7ff bfb2 	b.w	5844 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    58e0:	42a3      	cmp	r3, r4
    58e2:	d002      	beq.n	58ea <move_thread_to_end_of_prio_q+0x66>
    58e4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    58e6:	2b00      	cmp	r3, #0
    58e8:	d1e6      	bne.n	58b8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    58ea:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    58ee:	6021      	str	r1, [r4, #0]
	list->tail = node;
    58f0:	6251      	str	r1, [r2, #36]	; 0x24
}
    58f2:	e7ed      	b.n	58d0 <move_thread_to_end_of_prio_q+0x4c>
    58f4:	20000f3c 	.word	0x20000f3c

000058f8 <z_time_slice>:
{
    58f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    58fa:	f04f 0320 	mov.w	r3, #32
    58fe:	f3ef 8511 	mrs	r5, BASEPRI
    5902:	f383 8812 	msr	BASEPRI_MAX, r3
    5906:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    590a:	4b17      	ldr	r3, [pc, #92]	; (5968 <z_time_slice+0x70>)
    590c:	4a17      	ldr	r2, [pc, #92]	; (596c <z_time_slice+0x74>)
    590e:	689c      	ldr	r4, [r3, #8]
    5910:	6811      	ldr	r1, [r2, #0]
    5912:	428c      	cmp	r4, r1
    5914:	d107      	bne.n	5926 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5916:	4620      	mov	r0, r4
    5918:	f7ff ff28 	bl	576c <z_reset_time_slice>
	__asm__ volatile(
    591c:	f385 8811 	msr	BASEPRI, r5
    5920:	f3bf 8f6f 	isb	sy
}
    5924:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5926:	2100      	movs	r1, #0
    5928:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    592a:	4a11      	ldr	r2, [pc, #68]	; (5970 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    592c:	6812      	ldr	r2, [r2, #0]
    592e:	b1c2      	cbz	r2, 5962 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5930:	89e2      	ldrh	r2, [r4, #14]
    5932:	2a7f      	cmp	r2, #127	; 0x7f
    5934:	d815      	bhi.n	5962 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5936:	7b62      	ldrb	r2, [r4, #13]
    5938:	06d2      	lsls	r2, r2, #27
    593a:	d112      	bne.n	5962 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    593c:	4a0d      	ldr	r2, [pc, #52]	; (5974 <z_time_slice+0x7c>)
    593e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5942:	6812      	ldr	r2, [r2, #0]
    5944:	4291      	cmp	r1, r2
    5946:	db0c      	blt.n	5962 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5948:	4a0b      	ldr	r2, [pc, #44]	; (5978 <z_time_slice+0x80>)
    594a:	4294      	cmp	r4, r2
    594c:	d009      	beq.n	5962 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    594e:	691a      	ldr	r2, [r3, #16]
    5950:	4282      	cmp	r2, r0
    5952:	dc03      	bgt.n	595c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5954:	4620      	mov	r0, r4
    5956:	f7ff ff95 	bl	5884 <move_thread_to_end_of_prio_q>
    595a:	e7dc      	b.n	5916 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    595c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    595e:	611a      	str	r2, [r3, #16]
    5960:	e7dc      	b.n	591c <z_time_slice+0x24>
    5962:	2200      	movs	r2, #0
    5964:	e7fb      	b.n	595e <z_time_slice+0x66>
    5966:	bf00      	nop
    5968:	20000f3c 	.word	0x20000f3c
    596c:	20000f6c 	.word	0x20000f6c
    5970:	20000f74 	.word	0x20000f74
    5974:	20000f70 	.word	0x20000f70
    5978:	200006d8 	.word	0x200006d8

0000597c <ready_thread>:
{
    597c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    597e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5982:	7b43      	ldrb	r3, [r0, #13]
    5984:	2a00      	cmp	r2, #0
    5986:	db2a      	blt.n	59de <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5988:	06da      	lsls	r2, r3, #27
    598a:	d128      	bne.n	59de <ready_thread+0x62>
    598c:	6982      	ldr	r2, [r0, #24]
    598e:	bb32      	cbnz	r2, 59de <ready_thread+0x62>
	return list->head == list;
    5990:	4a14      	ldr	r2, [pc, #80]	; (59e4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5992:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5996:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5998:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    599c:	f102 0520 	add.w	r5, r2, #32
    59a0:	42ab      	cmp	r3, r5
    59a2:	d017      	beq.n	59d4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59a4:	b1b3      	cbz	r3, 59d4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    59a6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    59aa:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    59ae:	428e      	cmp	r6, r1
    59b0:	d00b      	beq.n	59ca <ready_thread+0x4e>
		return b2 - b1;
    59b2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    59b4:	2900      	cmp	r1, #0
    59b6:	dd08      	ble.n	59ca <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    59b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    59ba:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    59be:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    59c0:	6058      	str	r0, [r3, #4]
}
    59c2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    59c4:	2000      	movs	r0, #0
    59c6:	f7ff bf3d 	b.w	5844 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    59ca:	42a3      	cmp	r3, r4
    59cc:	d002      	beq.n	59d4 <ready_thread+0x58>
    59ce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59d0:	2b00      	cmp	r3, #0
    59d2:	d1ea      	bne.n	59aa <ready_thread+0x2e>
	node->prev = tail;
    59d4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    59d8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    59da:	6250      	str	r0, [r2, #36]	; 0x24
}
    59dc:	e7f1      	b.n	59c2 <ready_thread+0x46>
}
    59de:	bc70      	pop	{r4, r5, r6}
    59e0:	4770      	bx	lr
    59e2:	bf00      	nop
    59e4:	20000f3c 	.word	0x20000f3c

000059e8 <z_sched_start>:
{
    59e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    59ea:	f04f 0220 	mov.w	r2, #32
    59ee:	f3ef 8411 	mrs	r4, BASEPRI
    59f2:	f382 8812 	msr	BASEPRI_MAX, r2
    59f6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    59fa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    59fc:	0751      	lsls	r1, r2, #29
    59fe:	d404      	bmi.n	5a0a <z_sched_start+0x22>
	__asm__ volatile(
    5a00:	f384 8811 	msr	BASEPRI, r4
    5a04:	f3bf 8f6f 	isb	sy
}
    5a08:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5a0a:	f022 0204 	bic.w	r2, r2, #4
    5a0e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5a10:	f7ff ffb4 	bl	597c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5a14:	4621      	mov	r1, r4
    5a16:	4802      	ldr	r0, [pc, #8]	; (5a20 <z_sched_start+0x38>)
}
    5a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5a1c:	f7ff beec 	b.w	57f8 <z_reschedule>
    5a20:	2000115f 	.word	0x2000115f

00005a24 <unready_thread>:
{
    5a24:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5a26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5a2a:	7b43      	ldrb	r3, [r0, #13]
    5a2c:	2a00      	cmp	r2, #0
{
    5a2e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5a30:	da04      	bge.n	5a3c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a36:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5a38:	f001 fe9b 	bl	7772 <sys_dlist_remove>
	update_cache(thread == _current);
    5a3c:	4b04      	ldr	r3, [pc, #16]	; (5a50 <unready_thread+0x2c>)
    5a3e:	6898      	ldr	r0, [r3, #8]
    5a40:	1a43      	subs	r3, r0, r1
    5a42:	4258      	negs	r0, r3
    5a44:	4158      	adcs	r0, r3
}
    5a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5a4a:	f7ff befb 	b.w	5844 <update_cache>
    5a4e:	bf00      	nop
    5a50:	20000f3c 	.word	0x20000f3c

00005a54 <pend>:
{
    5a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a58:	4606      	mov	r6, r0
    5a5a:	4615      	mov	r5, r2
    5a5c:	461c      	mov	r4, r3
	__asm__ volatile(
    5a5e:	f04f 0320 	mov.w	r3, #32
    5a62:	f3ef 8711 	mrs	r7, BASEPRI
    5a66:	f383 8812 	msr	BASEPRI_MAX, r3
    5a6a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5a6e:	f001 fef0 	bl	7852 <add_to_waitq_locked>
	__asm__ volatile(
    5a72:	f387 8811 	msr	BASEPRI, r7
    5a76:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a7a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5a7e:	bf08      	it	eq
    5a80:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5a84:	d008      	beq.n	5a98 <pend+0x44>
    5a86:	462a      	mov	r2, r5
    5a88:	4623      	mov	r3, r4
    5a8a:	f106 0018 	add.w	r0, r6, #24
    5a8e:	4903      	ldr	r1, [pc, #12]	; (5a9c <pend+0x48>)
}
    5a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5a94:	f000 ba38 	b.w	5f08 <z_add_timeout>
    5a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a9c:	0000780f 	.word	0x0000780f

00005aa0 <z_pend_curr>:
{
    5aa0:	b510      	push	{r4, lr}
	pending_current = _current;
    5aa2:	4b07      	ldr	r3, [pc, #28]	; (5ac0 <z_pend_curr+0x20>)
    5aa4:	6898      	ldr	r0, [r3, #8]
    5aa6:	4b07      	ldr	r3, [pc, #28]	; (5ac4 <z_pend_curr+0x24>)
{
    5aa8:	460c      	mov	r4, r1
	pending_current = _current;
    5aaa:	6018      	str	r0, [r3, #0]
{
    5aac:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5ab2:	f7ff ffcf 	bl	5a54 <pend>
    5ab6:	4620      	mov	r0, r4
}
    5ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5abc:	f7fc bbda 	b.w	2274 <arch_swap>
    5ac0:	20000f3c 	.word	0x20000f3c
    5ac4:	20000f6c 	.word	0x20000f6c

00005ac8 <z_set_prio>:
{
    5ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aca:	4604      	mov	r4, r0
	__asm__ volatile(
    5acc:	f04f 0320 	mov.w	r3, #32
    5ad0:	f3ef 8611 	mrs	r6, BASEPRI
    5ad4:	f383 8812 	msr	BASEPRI_MAX, r3
    5ad8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5adc:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5ade:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5ae0:	b249      	sxtb	r1, r1
    5ae2:	d133      	bne.n	5b4c <z_set_prio+0x84>
		if (need_sched) {
    5ae4:	6982      	ldr	r2, [r0, #24]
    5ae6:	bb8a      	cbnz	r2, 5b4c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5aec:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5aee:	f001 fe40 	bl	7772 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5af2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5af4:	4a17      	ldr	r2, [pc, #92]	; (5b54 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5af6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5afc:	7343      	strb	r3, [r0, #13]
    5afe:	4610      	mov	r0, r2
    5b00:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b04:	4283      	cmp	r3, r0
    5b06:	d01b      	beq.n	5b40 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b08:	b1d3      	cbz	r3, 5b40 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5b0a:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5b0c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5b10:	42a9      	cmp	r1, r5
    5b12:	d010      	beq.n	5b36 <z_set_prio+0x6e>
		return b2 - b1;
    5b14:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b16:	2d00      	cmp	r5, #0
    5b18:	dd0d      	ble.n	5b36 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5b1a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b1c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5b20:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5b22:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5b24:	2001      	movs	r0, #1
    5b26:	f7ff fe8d 	bl	5844 <update_cache>
    5b2a:	2001      	movs	r0, #1
	__asm__ volatile(
    5b2c:	f386 8811 	msr	BASEPRI, r6
    5b30:	f3bf 8f6f 	isb	sy
}
    5b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5b36:	42bb      	cmp	r3, r7
    5b38:	d002      	beq.n	5b40 <z_set_prio+0x78>
    5b3a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d1e5      	bne.n	5b0c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5b40:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    5b42:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    5b46:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5b48:	6254      	str	r4, [r2, #36]	; 0x24
}
    5b4a:	e7eb      	b.n	5b24 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5b4c:	73a1      	strb	r1, [r4, #14]
    5b4e:	2000      	movs	r0, #0
    5b50:	e7ec      	b.n	5b2c <z_set_prio+0x64>
    5b52:	bf00      	nop
    5b54:	20000f3c 	.word	0x20000f3c

00005b58 <z_impl_k_thread_suspend>:
{
    5b58:	b570      	push	{r4, r5, r6, lr}
    5b5a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5b5c:	3018      	adds	r0, #24
    5b5e:	f001 feec 	bl	793a <z_abort_timeout>
	__asm__ volatile(
    5b62:	f04f 0320 	mov.w	r3, #32
    5b66:	f3ef 8611 	mrs	r6, BASEPRI
    5b6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b6e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5b72:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5b76:	7b63      	ldrb	r3, [r4, #13]
    5b78:	2a00      	cmp	r2, #0
    5b7a:	da05      	bge.n	5b88 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b80:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5b82:	4620      	mov	r0, r4
    5b84:	f001 fdf5 	bl	7772 <sys_dlist_remove>
		update_cache(thread == _current);
    5b88:	4d0b      	ldr	r5, [pc, #44]	; (5bb8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5b8a:	7b63      	ldrb	r3, [r4, #13]
    5b8c:	68a8      	ldr	r0, [r5, #8]
    5b8e:	f043 0310 	orr.w	r3, r3, #16
    5b92:	7363      	strb	r3, [r4, #13]
    5b94:	1b03      	subs	r3, r0, r4
    5b96:	4258      	negs	r0, r3
    5b98:	4158      	adcs	r0, r3
    5b9a:	f7ff fe53 	bl	5844 <update_cache>
	__asm__ volatile(
    5b9e:	f386 8811 	msr	BASEPRI, r6
    5ba2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5ba6:	68ab      	ldr	r3, [r5, #8]
    5ba8:	42a3      	cmp	r3, r4
    5baa:	d103      	bne.n	5bb4 <z_impl_k_thread_suspend+0x5c>
}
    5bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5bb0:	f001 be0d 	b.w	77ce <z_reschedule_unlocked>
}
    5bb4:	bd70      	pop	{r4, r5, r6, pc}
    5bb6:	bf00      	nop
    5bb8:	20000f3c 	.word	0x20000f3c

00005bbc <k_sched_unlock>:
{
    5bbc:	b510      	push	{r4, lr}
	__asm__ volatile(
    5bbe:	f04f 0320 	mov.w	r3, #32
    5bc2:	f3ef 8411 	mrs	r4, BASEPRI
    5bc6:	f383 8812 	msr	BASEPRI_MAX, r3
    5bca:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5bce:	4b08      	ldr	r3, [pc, #32]	; (5bf0 <k_sched_unlock+0x34>)
    5bd0:	689a      	ldr	r2, [r3, #8]
    5bd2:	7bd3      	ldrb	r3, [r2, #15]
    5bd4:	3301      	adds	r3, #1
    5bd6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5bd8:	2000      	movs	r0, #0
    5bda:	f7ff fe33 	bl	5844 <update_cache>
	__asm__ volatile(
    5bde:	f384 8811 	msr	BASEPRI, r4
    5be2:	f3bf 8f6f 	isb	sy
}
    5be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5bea:	f001 bdf0 	b.w	77ce <z_reschedule_unlocked>
    5bee:	bf00      	nop
    5bf0:	20000f3c 	.word	0x20000f3c

00005bf4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5bf4:	4b04      	ldr	r3, [pc, #16]	; (5c08 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5bf6:	2100      	movs	r1, #0
    5bf8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5bfc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5c00:	4608      	mov	r0, r1
    5c02:	f7ff bdc7 	b.w	5794 <k_sched_time_slice_set>
    5c06:	bf00      	nop
    5c08:	20000f3c 	.word	0x20000f3c

00005c0c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5c0e:	f04f 0320 	mov.w	r3, #32
    5c12:	f3ef 8511 	mrs	r5, BASEPRI
    5c16:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5c1e:	491a      	ldr	r1, [pc, #104]	; (5c88 <z_impl_k_yield+0x7c>)
    5c20:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c22:	7b43      	ldrb	r3, [r0, #13]
    5c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c28:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c2a:	f001 fda2 	bl	7772 <sys_dlist_remove>
	}
	queue_thread(_current);
    5c2e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5c30:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5c32:	4608      	mov	r0, r1
    5c34:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5c38:	735a      	strb	r2, [r3, #13]
    5c3a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c3e:	4282      	cmp	r2, r0
    5c40:	d01c      	beq.n	5c7c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c42:	b1da      	cbz	r2, 5c7c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5c44:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5c46:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5c4a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5c4e:	42a6      	cmp	r6, r4
    5c50:	d00f      	beq.n	5c72 <z_impl_k_yield+0x66>
		return b2 - b1;
    5c52:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c54:	2c00      	cmp	r4, #0
    5c56:	dd0c      	ble.n	5c72 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5c58:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5c5a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5c5e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5c60:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5c62:	2001      	movs	r0, #1
    5c64:	f7ff fdee 	bl	5844 <update_cache>
    5c68:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5c6e:	f7fc bb01 	b.w	2274 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5c72:	42ba      	cmp	r2, r7
    5c74:	d002      	beq.n	5c7c <z_impl_k_yield+0x70>
    5c76:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c78:	2a00      	cmp	r2, #0
    5c7a:	d1e6      	bne.n	5c4a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5c7c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5c7e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5c82:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5c84:	624b      	str	r3, [r1, #36]	; 0x24
}
    5c86:	e7ec      	b.n	5c62 <z_impl_k_yield+0x56>
    5c88:	20000f3c 	.word	0x20000f3c

00005c8c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5c8c:	ea50 0301 	orrs.w	r3, r0, r1
{
    5c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c94:	4605      	mov	r5, r0
    5c96:	460e      	mov	r6, r1
	if (ticks == 0) {
    5c98:	d103      	bne.n	5ca2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    5c9a:	f7ff ffb7 	bl	5c0c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5c9e:	2000      	movs	r0, #0
    5ca0:	e033      	b.n	5d0a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5ca2:	f06f 0401 	mvn.w	r4, #1
    5ca6:	1a24      	subs	r4, r4, r0
    5ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5cac:	eb63 0301 	sbc.w	r3, r3, r1
    5cb0:	2c01      	cmp	r4, #1
    5cb2:	f173 0300 	sbcs.w	r3, r3, #0
    5cb6:	da02      	bge.n	5cbe <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5cb8:	f001 fe7f 	bl	79ba <sys_clock_tick_get_32>
    5cbc:	1944      	adds	r4, r0, r5
    5cbe:	f04f 0320 	mov.w	r3, #32
    5cc2:	f3ef 8811 	mrs	r8, BASEPRI
    5cc6:	f383 8812 	msr	BASEPRI_MAX, r3
    5cca:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5cce:	4f10      	ldr	r7, [pc, #64]	; (5d10 <z_tick_sleep+0x84>)
    5cd0:	4b10      	ldr	r3, [pc, #64]	; (5d14 <z_tick_sleep+0x88>)
    5cd2:	68b8      	ldr	r0, [r7, #8]
    5cd4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5cd6:	f7ff fea5 	bl	5a24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5cda:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5cdc:	490e      	ldr	r1, [pc, #56]	; (5d18 <z_tick_sleep+0x8c>)
    5cde:	462a      	mov	r2, r5
    5ce0:	4633      	mov	r3, r6
    5ce2:	3018      	adds	r0, #24
    5ce4:	f000 f910 	bl	5f08 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5ce8:	68ba      	ldr	r2, [r7, #8]
    5cea:	7b53      	ldrb	r3, [r2, #13]
    5cec:	f043 0310 	orr.w	r3, r3, #16
    5cf0:	7353      	strb	r3, [r2, #13]
    5cf2:	4640      	mov	r0, r8
    5cf4:	f7fc fabe 	bl	2274 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5cf8:	f001 fe5f 	bl	79ba <sys_clock_tick_get_32>
    5cfc:	1a20      	subs	r0, r4, r0
    5cfe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5d02:	2801      	cmp	r0, #1
    5d04:	f173 0300 	sbcs.w	r3, r3, #0
    5d08:	dbc9      	blt.n	5c9e <z_tick_sleep+0x12>
}
    5d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d0e:	bf00      	nop
    5d10:	20000f3c 	.word	0x20000f3c
    5d14:	20000f6c 	.word	0x20000f6c
    5d18:	0000780f 	.word	0x0000780f

00005d1c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d1c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5d20:	bf08      	it	eq
    5d22:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5d26:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d28:	d106      	bne.n	5d38 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5d2a:	4b08      	ldr	r3, [pc, #32]	; (5d4c <z_impl_k_sleep+0x30>)
    5d2c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5d2e:	f7ff ff13 	bl	5b58 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5d36:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5d38:	f7ff ffa8 	bl	5c8c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5d40:	fb80 0303 	smull	r0, r3, r0, r3
    5d44:	0bc0      	lsrs	r0, r0, #15
    5d46:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5d4a:	e7f4      	b.n	5d36 <z_impl_k_sleep+0x1a>
    5d4c:	20000f3c 	.word	0x20000f3c

00005d50 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5d50:	4b01      	ldr	r3, [pc, #4]	; (5d58 <z_impl_z_current_get+0x8>)
    5d52:	6898      	ldr	r0, [r3, #8]
    5d54:	4770      	bx	lr
    5d56:	bf00      	nop
    5d58:	20000f3c 	.word	0x20000f3c

00005d5c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d60:	4604      	mov	r4, r0
    5d62:	f04f 0320 	mov.w	r3, #32
    5d66:	f3ef 8611 	mrs	r6, BASEPRI
    5d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d6e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5d72:	7b03      	ldrb	r3, [r0, #12]
    5d74:	07d9      	lsls	r1, r3, #31
    5d76:	d50b      	bpl.n	5d90 <z_thread_abort+0x34>
	__asm__ volatile(
    5d78:	f386 8811 	msr	BASEPRI, r6
    5d7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5d80:	4040      	eors	r0, r0
    5d82:	f380 8811 	msr	BASEPRI, r0
    5d86:	f04f 0004 	mov.w	r0, #4
    5d8a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5d90:	7b43      	ldrb	r3, [r0, #13]
    5d92:	071a      	lsls	r2, r3, #28
    5d94:	d504      	bpl.n	5da0 <z_thread_abort+0x44>
    5d96:	f386 8811 	msr	BASEPRI, r6
    5d9a:	f3bf 8f6f 	isb	sy
    5d9e:	e7f5      	b.n	5d8c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5da0:	f023 0220 	bic.w	r2, r3, #32
    5da4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5da8:	09d2      	lsrs	r2, r2, #7
    5daa:	d120      	bne.n	5dee <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5dac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5dae:	68a3      	ldr	r3, [r4, #8]
    5db0:	b113      	cbz	r3, 5db8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5db2:	4620      	mov	r0, r4
    5db4:	f001 fce5 	bl	7782 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5db8:	f104 0018 	add.w	r0, r4, #24
    5dbc:	f001 fdbd 	bl	793a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5dc0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5dc4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5dc8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dca:	42bd      	cmp	r5, r7
    5dcc:	d000      	beq.n	5dd0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5dce:	b9b5      	cbnz	r5, 5dfe <z_thread_abort+0xa2>
		update_cache(1);
    5dd0:	2001      	movs	r0, #1
    5dd2:	f7ff fd37 	bl	5844 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5dd6:	4b10      	ldr	r3, [pc, #64]	; (5e18 <z_thread_abort+0xbc>)
    5dd8:	689b      	ldr	r3, [r3, #8]
    5dda:	42a3      	cmp	r3, r4
    5ddc:	d1db      	bne.n	5d96 <z_thread_abort+0x3a>
    5dde:	f3ef 8305 	mrs	r3, IPSR
    5de2:	2b00      	cmp	r3, #0
    5de4:	d1d7      	bne.n	5d96 <z_thread_abort+0x3a>
    5de6:	4630      	mov	r0, r6
    5de8:	f7fc fa44 	bl	2274 <arch_swap>
	return ret;
    5dec:	e7d3      	b.n	5d96 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5dee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5df2:	f043 0308 	orr.w	r3, r3, #8
    5df6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5df8:	f001 fcbb 	bl	7772 <sys_dlist_remove>
}
    5dfc:	e7d7      	b.n	5dae <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5dfe:	4628      	mov	r0, r5
    5e00:	f001 fcbf 	bl	7782 <unpend_thread_no_timeout>
    5e04:	f105 0018 	add.w	r0, r5, #24
    5e08:	f001 fd97 	bl	793a <z_abort_timeout>
    5e0c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5e10:	4628      	mov	r0, r5
    5e12:	f7ff fdb3 	bl	597c <ready_thread>
    5e16:	e7d7      	b.n	5dc8 <z_thread_abort+0x6c>
    5e18:	20000f3c 	.word	0x20000f3c

00005e1c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    5e1c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5e1e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    5e22:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5e24:	e9cd 6700 	strd	r6, r7, [sp]
    5e28:	f7ff fe3a 	bl	5aa0 <z_pend_curr>

	if (data != NULL) {
    5e2c:	b11c      	cbz	r4, 5e36 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    5e2e:	4b03      	ldr	r3, [pc, #12]	; (5e3c <z_sched_wait+0x20>)
    5e30:	689b      	ldr	r3, [r3, #8]
    5e32:	695b      	ldr	r3, [r3, #20]
    5e34:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    5e36:	b002      	add	sp, #8
    5e38:	bdd0      	pop	{r4, r6, r7, pc}
    5e3a:	bf00      	nop
    5e3c:	20000f3c 	.word	0x20000f3c

00005e40 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5e40:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5e42:	4806      	ldr	r0, [pc, #24]	; (5e5c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5e44:	4a06      	ldr	r2, [pc, #24]	; (5e60 <z_data_copy+0x20>)
    5e46:	4907      	ldr	r1, [pc, #28]	; (5e64 <z_data_copy+0x24>)
    5e48:	1a12      	subs	r2, r2, r0
    5e4a:	f001 fbd2 	bl	75f2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5e4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5e52:	4a05      	ldr	r2, [pc, #20]	; (5e68 <z_data_copy+0x28>)
    5e54:	4905      	ldr	r1, [pc, #20]	; (5e6c <z_data_copy+0x2c>)
    5e56:	4806      	ldr	r0, [pc, #24]	; (5e70 <z_data_copy+0x30>)
    5e58:	f001 bbcb 	b.w	75f2 <z_early_memcpy>
    5e5c:	20000000 	.word	0x20000000
    5e60:	200001cc 	.word	0x200001cc
    5e64:	000088fc 	.word	0x000088fc
    5e68:	00000000 	.word	0x00000000
    5e6c:	000088fc 	.word	0x000088fc
    5e70:	20000000 	.word	0x20000000

00005e74 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5e74:	4b03      	ldr	r3, [pc, #12]	; (5e84 <elapsed+0x10>)
    5e76:	681b      	ldr	r3, [r3, #0]
    5e78:	b90b      	cbnz	r3, 5e7e <elapsed+0xa>
    5e7a:	f7fd be3f 	b.w	3afc <sys_clock_elapsed>
}
    5e7e:	2000      	movs	r0, #0
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop
    5e84:	20000f78 	.word	0x20000f78

00005e88 <next_timeout>:
	return list->head == list;
    5e88:	4b10      	ldr	r3, [pc, #64]	; (5ecc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5e8a:	b510      	push	{r4, lr}
    5e8c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e8e:	429c      	cmp	r4, r3
    5e90:	bf08      	it	eq
    5e92:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5e94:	f7ff ffee 	bl	5e74 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5e98:	b1a4      	cbz	r4, 5ec4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5e9a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5e9e:	1a1b      	subs	r3, r3, r0
    5ea0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5ea8:	f170 0200 	sbcs.w	r2, r0, #0
    5eac:	da0a      	bge.n	5ec4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5eae:	2800      	cmp	r0, #0
    5eb0:	bfac      	ite	ge
    5eb2:	4618      	movge	r0, r3
    5eb4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5eb6:	4b06      	ldr	r3, [pc, #24]	; (5ed0 <next_timeout+0x48>)
    5eb8:	691b      	ldr	r3, [r3, #16]
    5eba:	b113      	cbz	r3, 5ec2 <next_timeout+0x3a>
    5ebc:	4298      	cmp	r0, r3
    5ebe:	bfa8      	it	ge
    5ec0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5ec2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5ec4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5ec8:	e7f5      	b.n	5eb6 <next_timeout+0x2e>
    5eca:	bf00      	nop
    5ecc:	200000ec 	.word	0x200000ec
    5ed0:	20000f3c 	.word	0x20000f3c

00005ed4 <remove_timeout>:
{
    5ed4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5ed6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5ed8:	b168      	cbz	r0, 5ef6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5eda:	4a0a      	ldr	r2, [pc, #40]	; (5f04 <remove_timeout+0x30>)
    5edc:	6852      	ldr	r2, [r2, #4]
    5ede:	4290      	cmp	r0, r2
    5ee0:	d009      	beq.n	5ef6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    5ee2:	b143      	cbz	r3, 5ef6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5ee4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5ee8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5eec:	1912      	adds	r2, r2, r4
    5eee:	eb41 0105 	adc.w	r1, r1, r5
    5ef2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5ef6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5ef8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5efa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5efc:	2300      	movs	r3, #0
	node->prev = NULL;
    5efe:	e9c0 3300 	strd	r3, r3, [r0]
}
    5f02:	bd30      	pop	{r4, r5, pc}
    5f04:	200000ec 	.word	0x200000ec

00005f08 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5f0c:	bf08      	it	eq
    5f0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f14:	4604      	mov	r4, r0
    5f16:	461f      	mov	r7, r3
    5f18:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f1a:	d067      	beq.n	5fec <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5f1c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5f1e:	f04f 0320 	mov.w	r3, #32
    5f22:	f3ef 8611 	mrs	r6, BASEPRI
    5f26:	f383 8812 	msr	BASEPRI_MAX, r3
    5f2a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5f2e:	f06f 0201 	mvn.w	r2, #1
    5f32:	1b53      	subs	r3, r2, r5
    5f34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5f38:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	db1b      	blt.n	5f78 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5f40:	4b2b      	ldr	r3, [pc, #172]	; (5ff0 <z_add_timeout+0xe8>)
    5f42:	e9d3 1300 	ldrd	r1, r3, [r3]
    5f46:	1a52      	subs	r2, r2, r1
    5f48:	eb6c 0303 	sbc.w	r3, ip, r3
    5f4c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5f4e:	eb63 0307 	sbc.w	r3, r3, r7
    5f52:	2d01      	cmp	r5, #1
    5f54:	f173 0200 	sbcs.w	r2, r3, #0
    5f58:	bfbc      	itt	lt
    5f5a:	2501      	movlt	r5, #1
    5f5c:	2300      	movlt	r3, #0
    5f5e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5f62:	4824      	ldr	r0, [pc, #144]	; (5ff4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5f64:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f68:	4283      	cmp	r3, r0
    5f6a:	d118      	bne.n	5f9e <z_add_timeout+0x96>
	node->prev = tail;
    5f6c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5f70:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5f74:	6044      	str	r4, [r0, #4]
}
    5f76:	e026      	b.n	5fc6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5f78:	f7ff ff7c 	bl	5e74 <elapsed>
    5f7c:	3501      	adds	r5, #1
    5f7e:	f147 0700 	adc.w	r7, r7, #0
    5f82:	182d      	adds	r5, r5, r0
    5f84:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5f88:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5f8c:	e7e9      	b.n	5f62 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5f8e:	1a52      	subs	r2, r2, r1
    5f90:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5f94:	459c      	cmp	ip, r3
    5f96:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5f9a:	d0e7      	beq.n	5f6c <z_add_timeout+0x64>
    5f9c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d0e4      	beq.n	5f6c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5fa2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5fa6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5faa:	428a      	cmp	r2, r1
    5fac:	eb75 0e07 	sbcs.w	lr, r5, r7
    5fb0:	daed      	bge.n	5f8e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5fb2:	1a8a      	subs	r2, r1, r2
    5fb4:	eb67 0505 	sbc.w	r5, r7, r5
    5fb8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5fbc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5fbe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5fc2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5fc4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5fc6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fc8:	4283      	cmp	r3, r0
    5fca:	d00b      	beq.n	5fe4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5fcc:	429c      	cmp	r4, r3
    5fce:	d109      	bne.n	5fe4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5fd0:	f7ff ff5a 	bl	5e88 <next_timeout>

			if (next_time == 0 ||
    5fd4:	b118      	cbz	r0, 5fde <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5fd6:	4b08      	ldr	r3, [pc, #32]	; (5ff8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5fd8:	691b      	ldr	r3, [r3, #16]
    5fda:	4283      	cmp	r3, r0
    5fdc:	d002      	beq.n	5fe4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5fde:	2100      	movs	r1, #0
    5fe0:	f7fd fd5a 	bl	3a98 <sys_clock_set_timeout>
	__asm__ volatile(
    5fe4:	f386 8811 	msr	BASEPRI, r6
    5fe8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fee:	bf00      	nop
    5ff0:	200007d8 	.word	0x200007d8
    5ff4:	200000ec 	.word	0x200000ec
    5ff8:	20000f3c 	.word	0x20000f3c

00005ffc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6000:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6002:	f7ff fc79 	bl	58f8 <z_time_slice>
	__asm__ volatile(
    6006:	f04f 0320 	mov.w	r3, #32
    600a:	f3ef 8511 	mrs	r5, BASEPRI
    600e:	f383 8812 	msr	BASEPRI_MAX, r3
    6012:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6016:	4f24      	ldr	r7, [pc, #144]	; (60a8 <sys_clock_announce+0xac>)
	return list->head == list;
    6018:	f8df 8090 	ldr.w	r8, [pc, #144]	; 60ac <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    601c:	4e24      	ldr	r6, [pc, #144]	; (60b0 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
    601e:	603c      	str	r4, [r7, #0]
    6020:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6024:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6026:	4540      	cmp	r0, r8
		curr_tick += dt;
    6028:	e9d6 2e00 	ldrd	r2, lr, [r6]
    602c:	ea4f 71e3 	mov.w	r1, r3, asr #31
    6030:	d00b      	beq.n	604a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6032:	b150      	cbz	r0, 604a <sys_clock_announce+0x4e>
    6034:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    6038:	42a3      	cmp	r3, r4
    603a:	eb71 090c 	sbcs.w	r9, r1, ip
    603e:	da16      	bge.n	606e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6040:	1ae4      	subs	r4, r4, r3
    6042:	eb6c 0c01 	sbc.w	ip, ip, r1
    6046:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    604a:	189b      	adds	r3, r3, r2
    604c:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    6050:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6052:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    6056:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6058:	f7ff ff16 	bl	5e88 <next_timeout>
    605c:	4621      	mov	r1, r4
    605e:	f7fd fd1b 	bl	3a98 <sys_clock_set_timeout>
	__asm__ volatile(
    6062:	f385 8811 	msr	BASEPRI, r5
    6066:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    606e:	18a2      	adds	r2, r4, r2
    6070:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
    6074:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    6078:	2300      	movs	r3, #0
    607a:	2200      	movs	r2, #0
    607c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    6080:	f7ff ff28 	bl	5ed4 <remove_timeout>
    6084:	f385 8811 	msr	BASEPRI, r5
    6088:	f3bf 8f6f 	isb	sy
		t->fn(t);
    608c:	6883      	ldr	r3, [r0, #8]
    608e:	4798      	blx	r3
	__asm__ volatile(
    6090:	f04f 0320 	mov.w	r3, #32
    6094:	f3ef 8511 	mrs	r5, BASEPRI
    6098:	f383 8812 	msr	BASEPRI_MAX, r3
    609c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    60a0:	683b      	ldr	r3, [r7, #0]
    60a2:	1b1b      	subs	r3, r3, r4
    60a4:	603b      	str	r3, [r7, #0]
    60a6:	e7bb      	b.n	6020 <sys_clock_announce+0x24>
    60a8:	20000f78 	.word	0x20000f78
    60ac:	200000ec 	.word	0x200000ec
    60b0:	200007d8 	.word	0x200007d8

000060b4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    60b4:	b510      	push	{r4, lr}
    60b6:	f04f 0320 	mov.w	r3, #32
    60ba:	f3ef 8411 	mrs	r4, BASEPRI
    60be:	f383 8812 	msr	BASEPRI_MAX, r3
    60c2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    60c6:	f7ff fed5 	bl	5e74 <elapsed>
    60ca:	4b06      	ldr	r3, [pc, #24]	; (60e4 <sys_clock_tick_get+0x30>)
    60cc:	4601      	mov	r1, r0
    60ce:	e9d3 0300 	ldrd	r0, r3, [r3]
    60d2:	1808      	adds	r0, r1, r0
    60d4:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    60d8:	f384 8811 	msr	BASEPRI, r4
    60dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    60e0:	bd10      	pop	{r4, pc}
    60e2:	bf00      	nop
    60e4:	200007d8 	.word	0x200007d8

000060e8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    60e8:	b570      	push	{r4, r5, r6, lr}
    60ea:	4604      	mov	r4, r0
	__asm__ volatile(
    60ec:	f04f 0320 	mov.w	r3, #32
    60f0:	f3ef 8511 	mrs	r5, BASEPRI
    60f4:	f383 8812 	msr	BASEPRI_MAX, r3
    60f8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    60fc:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    6100:	3301      	adds	r3, #1
    6102:	f142 0200 	adc.w	r2, r2, #0
    6106:	2b02      	cmp	r3, #2
    6108:	f172 0300 	sbcs.w	r3, r2, #0
    610c:	d322      	bcc.n	6154 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    610e:	f001 fc58 	bl	79c2 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6112:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    6116:	3001      	adds	r0, #1
    6118:	f141 0100 	adc.w	r1, r1, #0
    611c:	18c0      	adds	r0, r0, r3
    611e:	eb41 0102 	adc.w	r1, r1, r2
    6122:	2801      	cmp	r0, #1
    6124:	f171 0300 	sbcs.w	r3, r1, #0
    6128:	db32      	blt.n	6190 <z_timer_expiration_handler+0xa8>
    612a:	f001 fc4a 	bl	79c2 <z_impl_k_uptime_ticks>
    612e:	3001      	adds	r0, #1
    6130:	f141 0300 	adc.w	r3, r1, #0
    6134:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    6138:	1880      	adds	r0, r0, r2
    613a:	f06f 0201 	mvn.w	r2, #1
    613e:	eb43 0301 	adc.w	r3, r3, r1
    6142:	1a12      	subs	r2, r2, r0
    6144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6148:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    614c:	491a      	ldr	r1, [pc, #104]	; (61b8 <z_timer_expiration_handler+0xd0>)
    614e:	4620      	mov	r0, r4
    6150:	f7ff feda 	bl	5f08 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    6154:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6156:	3301      	adds	r3, #1
    6158:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    615a:	6a23      	ldr	r3, [r4, #32]
    615c:	b173      	cbz	r3, 617c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    615e:	f385 8811 	msr	BASEPRI, r5
    6162:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    6166:	6a23      	ldr	r3, [r4, #32]
    6168:	4620      	mov	r0, r4
    616a:	4798      	blx	r3
	__asm__ volatile(
    616c:	f04f 0320 	mov.w	r3, #32
    6170:	f3ef 8511 	mrs	r5, BASEPRI
    6174:	f383 8812 	msr	BASEPRI_MAX, r3
    6178:	f3bf 8f6f 	isb	sy
	return list->head == list;
    617c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6180:	42a6      	cmp	r6, r4
    6182:	d000      	beq.n	6186 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    6184:	b94e      	cbnz	r6, 619a <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    6186:	f385 8811 	msr	BASEPRI, r5
    618a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    618e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6190:	f06f 0201 	mvn.w	r2, #1
    6194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6198:	e7d8      	b.n	614c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    619a:	4630      	mov	r0, r6
    619c:	f001 fafb 	bl	7796 <z_unpend_thread_no_timeout>
    61a0:	2300      	movs	r3, #0
    61a2:	67b3      	str	r3, [r6, #120]	; 0x78
    61a4:	f385 8811 	msr	BASEPRI, r5
    61a8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    61ac:	4630      	mov	r0, r6
}
    61ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    61b2:	f001 bb1c 	b.w	77ee <z_ready_thread>
    61b6:	bf00      	nop
    61b8:	000060e9 	.word	0x000060e9

000061bc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    61bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    61c0:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    61c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    61c6:	bf08      	it	eq
    61c8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    61cc:	4606      	mov	r6, r0
    61ce:	461c      	mov	r4, r3
    61d0:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    61d4:	4689      	mov	r9, r1
    61d6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    61d8:	d03e      	beq.n	6258 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    61da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    61de:	bf08      	it	eq
    61e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    61e4:	4615      	mov	r5, r2
    61e6:	4607      	mov	r7, r0
    61e8:	d014      	beq.n	6214 <z_impl_k_timer_start+0x58>
    61ea:	ea50 0302 	orrs.w	r3, r0, r2
    61ee:	d011      	beq.n	6214 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    61f0:	f06f 0301 	mvn.w	r3, #1
    61f4:	1a9b      	subs	r3, r3, r2
    61f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    61fa:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    61fe:	2b00      	cmp	r3, #0
    6200:	da08      	bge.n	6214 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    6202:	2a02      	cmp	r2, #2
    6204:	f170 0300 	sbcs.w	r3, r0, #0
    6208:	bfbc      	itt	lt
    620a:	2502      	movlt	r5, #2
    620c:	2700      	movlt	r7, #0
    620e:	3d01      	subs	r5, #1
    6210:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6214:	f06f 0301 	mvn.w	r3, #1
    6218:	1a5b      	subs	r3, r3, r1
    621a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    621e:	eb63 0304 	sbc.w	r3, r3, r4
    6222:	2b00      	cmp	r3, #0
    6224:	da09      	bge.n	623a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6226:	2901      	cmp	r1, #1
    6228:	f174 0300 	sbcs.w	r3, r4, #0
    622c:	bfbc      	itt	lt
    622e:	2101      	movlt	r1, #1
    6230:	2400      	movlt	r4, #0
    6232:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    6236:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    623a:	4630      	mov	r0, r6
    623c:	f001 fb7d 	bl	793a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6240:	2300      	movs	r3, #0
    6242:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    6244:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6248:	464a      	mov	r2, r9
    624a:	4643      	mov	r3, r8
    624c:	4630      	mov	r0, r6
    624e:	4903      	ldr	r1, [pc, #12]	; (625c <z_impl_k_timer_start+0xa0>)
		     duration);
}
    6250:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6254:	f7ff be58 	b.w	5f08 <z_add_timeout>
}
    6258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    625c:	000060e9 	.word	0x000060e9

00006260 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6260:	4a02      	ldr	r2, [pc, #8]	; (626c <boot_banner+0xc>)
    6262:	4903      	ldr	r1, [pc, #12]	; (6270 <boot_banner+0x10>)
    6264:	4803      	ldr	r0, [pc, #12]	; (6274 <boot_banner+0x14>)
    6266:	f000 ba5b 	b.w	6720 <printk>
    626a:	bf00      	nop
    626c:	00008142 	.word	0x00008142
    6270:	000088bc 	.word	0x000088bc
    6274:	000088c9 	.word	0x000088c9

00006278 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    6278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    627a:	4b09      	ldr	r3, [pc, #36]	; (62a0 <k_sys_work_q_init+0x28>)
    627c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    627e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    6280:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    6282:	9300      	str	r3, [sp, #0]
    6284:	4907      	ldr	r1, [pc, #28]	; (62a4 <k_sys_work_q_init+0x2c>)
    6286:	4808      	ldr	r0, [pc, #32]	; (62a8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    6288:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    628c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6290:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6294:	f7ff f9ce 	bl	5634 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    6298:	4620      	mov	r0, r4
    629a:	b004      	add	sp, #16
    629c:	bd10      	pop	{r4, pc}
    629e:	bf00      	nop
    62a0:	000088f0 	.word	0x000088f0
    62a4:	200022c0 	.word	0x200022c0
    62a8:	200007e0 	.word	0x200007e0

000062ac <nrf_cc3xx_platform_init_no_rng>:
    62ac:	b510      	push	{r4, lr}
    62ae:	4c0a      	ldr	r4, [pc, #40]	; (62d8 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    62b0:	6823      	ldr	r3, [r4, #0]
    62b2:	b11b      	cbz	r3, 62bc <nrf_cc3xx_platform_init_no_rng+0x10>
    62b4:	2301      	movs	r3, #1
    62b6:	6023      	str	r3, [r4, #0]
    62b8:	2000      	movs	r0, #0
    62ba:	bd10      	pop	{r4, pc}
    62bc:	f000 f8ce 	bl	645c <CC_LibInitNoRng>
    62c0:	2800      	cmp	r0, #0
    62c2:	d0f7      	beq.n	62b4 <nrf_cc3xx_platform_init_no_rng+0x8>
    62c4:	3801      	subs	r0, #1
    62c6:	2806      	cmp	r0, #6
    62c8:	d803      	bhi.n	62d2 <nrf_cc3xx_platform_init_no_rng+0x26>
    62ca:	4b04      	ldr	r3, [pc, #16]	; (62dc <nrf_cc3xx_platform_init_no_rng+0x30>)
    62cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    62d0:	bd10      	pop	{r4, pc}
    62d2:	4803      	ldr	r0, [pc, #12]	; (62e0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    62d4:	bd10      	pop	{r4, pc}
    62d6:	bf00      	nop
    62d8:	20000f7c 	.word	0x20000f7c
    62dc:	00007f60 	.word	0x00007f60
    62e0:	ffff8ffe 	.word	0xffff8ffe

000062e4 <nrf_cc3xx_platform_abort>:
    62e4:	f3bf 8f4f 	dsb	sy
    62e8:	4905      	ldr	r1, [pc, #20]	; (6300 <nrf_cc3xx_platform_abort+0x1c>)
    62ea:	4b06      	ldr	r3, [pc, #24]	; (6304 <nrf_cc3xx_platform_abort+0x20>)
    62ec:	68ca      	ldr	r2, [r1, #12]
    62ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    62f2:	4313      	orrs	r3, r2
    62f4:	60cb      	str	r3, [r1, #12]
    62f6:	f3bf 8f4f 	dsb	sy
    62fa:	bf00      	nop
    62fc:	e7fd      	b.n	62fa <nrf_cc3xx_platform_abort+0x16>
    62fe:	bf00      	nop
    6300:	e000ed00 	.word	0xe000ed00
    6304:	05fa0004 	.word	0x05fa0004

00006308 <CC_PalAbort>:
    6308:	b410      	push	{r4}
    630a:	4b09      	ldr	r3, [pc, #36]	; (6330 <CC_PalAbort+0x28>)
    630c:	4909      	ldr	r1, [pc, #36]	; (6334 <CC_PalAbort+0x2c>)
    630e:	4c0a      	ldr	r4, [pc, #40]	; (6338 <CC_PalAbort+0x30>)
    6310:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6314:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6318:	6849      	ldr	r1, [r1, #4]
    631a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    631e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6322:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6326:	2300      	movs	r3, #0
    6328:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    632c:	bc10      	pop	{r4}
    632e:	4708      	bx	r1
    6330:	5002b000 	.word	0x5002b000
    6334:	200000f4 	.word	0x200000f4
    6338:	5002a000 	.word	0x5002a000

0000633c <nrf_cc3xx_platform_set_abort>:
    633c:	e9d0 1200 	ldrd	r1, r2, [r0]
    6340:	4b01      	ldr	r3, [pc, #4]	; (6348 <nrf_cc3xx_platform_set_abort+0xc>)
    6342:	e9c3 1200 	strd	r1, r2, [r3]
    6346:	4770      	bx	lr
    6348:	200000f4 	.word	0x200000f4

0000634c <mutex_free>:
    634c:	b510      	push	{r4, lr}
    634e:	4604      	mov	r4, r0
    6350:	b130      	cbz	r0, 6360 <mutex_free+0x14>
    6352:	6863      	ldr	r3, [r4, #4]
    6354:	06db      	lsls	r3, r3, #27
    6356:	d502      	bpl.n	635e <mutex_free+0x12>
    6358:	2300      	movs	r3, #0
    635a:	6023      	str	r3, [r4, #0]
    635c:	6063      	str	r3, [r4, #4]
    635e:	bd10      	pop	{r4, pc}
    6360:	4b02      	ldr	r3, [pc, #8]	; (636c <mutex_free+0x20>)
    6362:	4803      	ldr	r0, [pc, #12]	; (6370 <mutex_free+0x24>)
    6364:	685b      	ldr	r3, [r3, #4]
    6366:	4798      	blx	r3
    6368:	e7f3      	b.n	6352 <mutex_free+0x6>
    636a:	bf00      	nop
    636c:	200000f4 	.word	0x200000f4
    6370:	00007f7c 	.word	0x00007f7c

00006374 <mutex_lock>:
    6374:	b1b0      	cbz	r0, 63a4 <mutex_lock+0x30>
    6376:	6843      	ldr	r3, [r0, #4]
    6378:	b193      	cbz	r3, 63a0 <mutex_lock+0x2c>
    637a:	06db      	lsls	r3, r3, #27
    637c:	d50e      	bpl.n	639c <mutex_lock+0x28>
    637e:	2301      	movs	r3, #1
    6380:	e850 2f00 	ldrex	r2, [r0]
    6384:	4619      	mov	r1, r3
    6386:	e840 1c00 	strex	ip, r1, [r0]
    638a:	f09c 0f00 	teq	ip, #0
    638e:	d1f7      	bne.n	6380 <mutex_lock+0xc>
    6390:	2a01      	cmp	r2, #1
    6392:	d0f5      	beq.n	6380 <mutex_lock+0xc>
    6394:	f3bf 8f5f 	dmb	sy
    6398:	2000      	movs	r0, #0
    639a:	4770      	bx	lr
    639c:	4803      	ldr	r0, [pc, #12]	; (63ac <mutex_lock+0x38>)
    639e:	4770      	bx	lr
    63a0:	4803      	ldr	r0, [pc, #12]	; (63b0 <mutex_lock+0x3c>)
    63a2:	4770      	bx	lr
    63a4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    63a8:	4770      	bx	lr
    63aa:	bf00      	nop
    63ac:	ffff8fe9 	.word	0xffff8fe9
    63b0:	ffff8fea 	.word	0xffff8fea

000063b4 <mutex_unlock>:
    63b4:	b168      	cbz	r0, 63d2 <mutex_unlock+0x1e>
    63b6:	6843      	ldr	r3, [r0, #4]
    63b8:	b13b      	cbz	r3, 63ca <mutex_unlock+0x16>
    63ba:	06db      	lsls	r3, r3, #27
    63bc:	d507      	bpl.n	63ce <mutex_unlock+0x1a>
    63be:	f3bf 8f5f 	dmb	sy
    63c2:	2300      	movs	r3, #0
    63c4:	6003      	str	r3, [r0, #0]
    63c6:	4618      	mov	r0, r3
    63c8:	4770      	bx	lr
    63ca:	4803      	ldr	r0, [pc, #12]	; (63d8 <mutex_unlock+0x24>)
    63cc:	4770      	bx	lr
    63ce:	4803      	ldr	r0, [pc, #12]	; (63dc <mutex_unlock+0x28>)
    63d0:	4770      	bx	lr
    63d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    63d6:	4770      	bx	lr
    63d8:	ffff8fea 	.word	0xffff8fea
    63dc:	ffff8fe9 	.word	0xffff8fe9

000063e0 <mutex_init>:
    63e0:	b510      	push	{r4, lr}
    63e2:	4604      	mov	r4, r0
    63e4:	b120      	cbz	r0, 63f0 <mutex_init+0x10>
    63e6:	2200      	movs	r2, #0
    63e8:	2311      	movs	r3, #17
    63ea:	6022      	str	r2, [r4, #0]
    63ec:	6063      	str	r3, [r4, #4]
    63ee:	bd10      	pop	{r4, pc}
    63f0:	4801      	ldr	r0, [pc, #4]	; (63f8 <mutex_init+0x18>)
    63f2:	f7ff ff89 	bl	6308 <CC_PalAbort>
    63f6:	e7f6      	b.n	63e6 <mutex_init+0x6>
    63f8:	00007fa4 	.word	0x00007fa4

000063fc <nrf_cc3xx_platform_set_mutexes>:
    63fc:	b570      	push	{r4, r5, r6, lr}
    63fe:	e9d0 2300 	ldrd	r2, r3, [r0]
    6402:	4c13      	ldr	r4, [pc, #76]	; (6450 <nrf_cc3xx_platform_set_mutexes+0x54>)
    6404:	4d13      	ldr	r5, [pc, #76]	; (6454 <nrf_cc3xx_platform_set_mutexes+0x58>)
    6406:	6063      	str	r3, [r4, #4]
    6408:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    640c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    6410:	6022      	str	r2, [r4, #0]
    6412:	4b11      	ldr	r3, [pc, #68]	; (6458 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6414:	6808      	ldr	r0, [r1, #0]
    6416:	6018      	str	r0, [r3, #0]
    6418:	6848      	ldr	r0, [r1, #4]
    641a:	6058      	str	r0, [r3, #4]
    641c:	6888      	ldr	r0, [r1, #8]
    641e:	6098      	str	r0, [r3, #8]
    6420:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    6424:	60d8      	str	r0, [r3, #12]
    6426:	6119      	str	r1, [r3, #16]
    6428:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    642c:	06db      	lsls	r3, r3, #27
    642e:	d50d      	bpl.n	644c <nrf_cc3xx_platform_set_mutexes+0x50>
    6430:	2300      	movs	r3, #0
    6432:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    6436:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    643a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    643e:	4790      	blx	r2
    6440:	6823      	ldr	r3, [r4, #0]
    6442:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    644a:	4718      	bx	r3
    644c:	bd70      	pop	{r4, r5, r6, pc}
    644e:	bf00      	nop
    6450:	20000104 	.word	0x20000104
    6454:	20000f94 	.word	0x20000f94
    6458:	20000114 	.word	0x20000114

0000645c <CC_LibInitNoRng>:
    645c:	b538      	push	{r3, r4, r5, lr}
    645e:	f000 f82f 	bl	64c0 <CC_HalInit>
    6462:	b120      	cbz	r0, 646e <CC_LibInitNoRng+0x12>
    6464:	2403      	movs	r4, #3
    6466:	f000 f863 	bl	6530 <CC_PalTerminate>
    646a:	4620      	mov	r0, r4
    646c:	bd38      	pop	{r3, r4, r5, pc}
    646e:	f000 f831 	bl	64d4 <CC_PalInit>
    6472:	b998      	cbnz	r0, 649c <CC_LibInitNoRng+0x40>
    6474:	f000 f8ac 	bl	65d0 <CC_PalPowerSaveModeSelect>
    6478:	b998      	cbnz	r0, 64a2 <CC_LibInitNoRng+0x46>
    647a:	4d0f      	ldr	r5, [pc, #60]	; (64b8 <CC_LibInitNoRng+0x5c>)
    647c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    6480:	0e1b      	lsrs	r3, r3, #24
    6482:	2bf0      	cmp	r3, #240	; 0xf0
    6484:	d108      	bne.n	6498 <CC_LibInitNoRng+0x3c>
    6486:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    648a:	4b0c      	ldr	r3, [pc, #48]	; (64bc <CC_LibInitNoRng+0x60>)
    648c:	429a      	cmp	r2, r3
    648e:	d00a      	beq.n	64a6 <CC_LibInitNoRng+0x4a>
    6490:	2407      	movs	r4, #7
    6492:	f000 f817 	bl	64c4 <CC_HalTerminate>
    6496:	e7e6      	b.n	6466 <CC_LibInitNoRng+0xa>
    6498:	2406      	movs	r4, #6
    649a:	e7fa      	b.n	6492 <CC_LibInitNoRng+0x36>
    649c:	2404      	movs	r4, #4
    649e:	4620      	mov	r0, r4
    64a0:	bd38      	pop	{r3, r4, r5, pc}
    64a2:	2400      	movs	r4, #0
    64a4:	e7f5      	b.n	6492 <CC_LibInitNoRng+0x36>
    64a6:	2001      	movs	r0, #1
    64a8:	f000 f892 	bl	65d0 <CC_PalPowerSaveModeSelect>
    64ac:	4604      	mov	r4, r0
    64ae:	2800      	cmp	r0, #0
    64b0:	d1f7      	bne.n	64a2 <CC_LibInitNoRng+0x46>
    64b2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    64b6:	e7d8      	b.n	646a <CC_LibInitNoRng+0xe>
    64b8:	5002b000 	.word	0x5002b000
    64bc:	20e00000 	.word	0x20e00000

000064c0 <CC_HalInit>:
    64c0:	2000      	movs	r0, #0
    64c2:	4770      	bx	lr

000064c4 <CC_HalTerminate>:
    64c4:	2000      	movs	r0, #0
    64c6:	4770      	bx	lr

000064c8 <CC_HalMaskInterrupt>:
    64c8:	4b01      	ldr	r3, [pc, #4]	; (64d0 <CC_HalMaskInterrupt+0x8>)
    64ca:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    64ce:	4770      	bx	lr
    64d0:	5002b000 	.word	0x5002b000

000064d4 <CC_PalInit>:
    64d4:	b510      	push	{r4, lr}
    64d6:	4811      	ldr	r0, [pc, #68]	; (651c <CC_PalInit+0x48>)
    64d8:	f000 f848 	bl	656c <CC_PalMutexCreate>
    64dc:	b100      	cbz	r0, 64e0 <CC_PalInit+0xc>
    64de:	bd10      	pop	{r4, pc}
    64e0:	480f      	ldr	r0, [pc, #60]	; (6520 <CC_PalInit+0x4c>)
    64e2:	f000 f843 	bl	656c <CC_PalMutexCreate>
    64e6:	2800      	cmp	r0, #0
    64e8:	d1f9      	bne.n	64de <CC_PalInit+0xa>
    64ea:	4c0e      	ldr	r4, [pc, #56]	; (6524 <CC_PalInit+0x50>)
    64ec:	4620      	mov	r0, r4
    64ee:	f000 f83d 	bl	656c <CC_PalMutexCreate>
    64f2:	2800      	cmp	r0, #0
    64f4:	d1f3      	bne.n	64de <CC_PalInit+0xa>
    64f6:	4b0c      	ldr	r3, [pc, #48]	; (6528 <CC_PalInit+0x54>)
    64f8:	480c      	ldr	r0, [pc, #48]	; (652c <CC_PalInit+0x58>)
    64fa:	601c      	str	r4, [r3, #0]
    64fc:	f000 f836 	bl	656c <CC_PalMutexCreate>
    6500:	4601      	mov	r1, r0
    6502:	2800      	cmp	r0, #0
    6504:	d1eb      	bne.n	64de <CC_PalInit+0xa>
    6506:	f000 f82d 	bl	6564 <CC_PalDmaInit>
    650a:	4604      	mov	r4, r0
    650c:	b108      	cbz	r0, 6512 <CC_PalInit+0x3e>
    650e:	4620      	mov	r0, r4
    6510:	bd10      	pop	{r4, pc}
    6512:	f000 f83f 	bl	6594 <CC_PalPowerSaveModeInit>
    6516:	4620      	mov	r0, r4
    6518:	e7fa      	b.n	6510 <CC_PalInit+0x3c>
    651a:	bf00      	nop
    651c:	2000014c 	.word	0x2000014c
    6520:	20000140 	.word	0x20000140
    6524:	20000148 	.word	0x20000148
    6528:	20000150 	.word	0x20000150
    652c:	20000144 	.word	0x20000144

00006530 <CC_PalTerminate>:
    6530:	b508      	push	{r3, lr}
    6532:	4808      	ldr	r0, [pc, #32]	; (6554 <CC_PalTerminate+0x24>)
    6534:	f000 f824 	bl	6580 <CC_PalMutexDestroy>
    6538:	4807      	ldr	r0, [pc, #28]	; (6558 <CC_PalTerminate+0x28>)
    653a:	f000 f821 	bl	6580 <CC_PalMutexDestroy>
    653e:	4807      	ldr	r0, [pc, #28]	; (655c <CC_PalTerminate+0x2c>)
    6540:	f000 f81e 	bl	6580 <CC_PalMutexDestroy>
    6544:	4806      	ldr	r0, [pc, #24]	; (6560 <CC_PalTerminate+0x30>)
    6546:	f000 f81b 	bl	6580 <CC_PalMutexDestroy>
    654a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    654e:	f000 b80b 	b.w	6568 <CC_PalDmaTerminate>
    6552:	bf00      	nop
    6554:	2000014c 	.word	0x2000014c
    6558:	20000140 	.word	0x20000140
    655c:	20000148 	.word	0x20000148
    6560:	20000144 	.word	0x20000144

00006564 <CC_PalDmaInit>:
    6564:	2000      	movs	r0, #0
    6566:	4770      	bx	lr

00006568 <CC_PalDmaTerminate>:
    6568:	4770      	bx	lr
    656a:	bf00      	nop

0000656c <CC_PalMutexCreate>:
    656c:	b508      	push	{r3, lr}
    656e:	4b03      	ldr	r3, [pc, #12]	; (657c <CC_PalMutexCreate+0x10>)
    6570:	6802      	ldr	r2, [r0, #0]
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	6810      	ldr	r0, [r2, #0]
    6576:	4798      	blx	r3
    6578:	2000      	movs	r0, #0
    657a:	bd08      	pop	{r3, pc}
    657c:	20000104 	.word	0x20000104

00006580 <CC_PalMutexDestroy>:
    6580:	b508      	push	{r3, lr}
    6582:	4b03      	ldr	r3, [pc, #12]	; (6590 <CC_PalMutexDestroy+0x10>)
    6584:	6802      	ldr	r2, [r0, #0]
    6586:	685b      	ldr	r3, [r3, #4]
    6588:	6810      	ldr	r0, [r2, #0]
    658a:	4798      	blx	r3
    658c:	2000      	movs	r0, #0
    658e:	bd08      	pop	{r3, pc}
    6590:	20000104 	.word	0x20000104

00006594 <CC_PalPowerSaveModeInit>:
    6594:	b570      	push	{r4, r5, r6, lr}
    6596:	4c09      	ldr	r4, [pc, #36]	; (65bc <CC_PalPowerSaveModeInit+0x28>)
    6598:	4d09      	ldr	r5, [pc, #36]	; (65c0 <CC_PalPowerSaveModeInit+0x2c>)
    659a:	6920      	ldr	r0, [r4, #16]
    659c:	68ab      	ldr	r3, [r5, #8]
    659e:	4798      	blx	r3
    65a0:	b118      	cbz	r0, 65aa <CC_PalPowerSaveModeInit+0x16>
    65a2:	4b08      	ldr	r3, [pc, #32]	; (65c4 <CC_PalPowerSaveModeInit+0x30>)
    65a4:	4808      	ldr	r0, [pc, #32]	; (65c8 <CC_PalPowerSaveModeInit+0x34>)
    65a6:	685b      	ldr	r3, [r3, #4]
    65a8:	4798      	blx	r3
    65aa:	4a08      	ldr	r2, [pc, #32]	; (65cc <CC_PalPowerSaveModeInit+0x38>)
    65ac:	68eb      	ldr	r3, [r5, #12]
    65ae:	6920      	ldr	r0, [r4, #16]
    65b0:	2100      	movs	r1, #0
    65b2:	6011      	str	r1, [r2, #0]
    65b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65b8:	4718      	bx	r3
    65ba:	bf00      	nop
    65bc:	20000114 	.word	0x20000114
    65c0:	20000104 	.word	0x20000104
    65c4:	200000f4 	.word	0x200000f4
    65c8:	00007fc8 	.word	0x00007fc8
    65cc:	20000f90 	.word	0x20000f90

000065d0 <CC_PalPowerSaveModeSelect>:
    65d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65d2:	4d1a      	ldr	r5, [pc, #104]	; (663c <CC_PalPowerSaveModeSelect+0x6c>)
    65d4:	4e1a      	ldr	r6, [pc, #104]	; (6640 <CC_PalPowerSaveModeSelect+0x70>)
    65d6:	4604      	mov	r4, r0
    65d8:	68b2      	ldr	r2, [r6, #8]
    65da:	6928      	ldr	r0, [r5, #16]
    65dc:	4790      	blx	r2
    65de:	b9e8      	cbnz	r0, 661c <CC_PalPowerSaveModeSelect+0x4c>
    65e0:	4f18      	ldr	r7, [pc, #96]	; (6644 <CC_PalPowerSaveModeSelect+0x74>)
    65e2:	683b      	ldr	r3, [r7, #0]
    65e4:	b14c      	cbz	r4, 65fa <CC_PalPowerSaveModeSelect+0x2a>
    65e6:	b1a3      	cbz	r3, 6612 <CC_PalPowerSaveModeSelect+0x42>
    65e8:	2b01      	cmp	r3, #1
    65ea:	d019      	beq.n	6620 <CC_PalPowerSaveModeSelect+0x50>
    65ec:	3b01      	subs	r3, #1
    65ee:	603b      	str	r3, [r7, #0]
    65f0:	6928      	ldr	r0, [r5, #16]
    65f2:	68f3      	ldr	r3, [r6, #12]
    65f4:	4798      	blx	r3
    65f6:	2000      	movs	r0, #0
    65f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    65fa:	b943      	cbnz	r3, 660e <CC_PalPowerSaveModeSelect+0x3e>
    65fc:	4a12      	ldr	r2, [pc, #72]	; (6648 <CC_PalPowerSaveModeSelect+0x78>)
    65fe:	2101      	movs	r1, #1
    6600:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6604:	4911      	ldr	r1, [pc, #68]	; (664c <CC_PalPowerSaveModeSelect+0x7c>)
    6606:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    660a:	2a00      	cmp	r2, #0
    660c:	d1fb      	bne.n	6606 <CC_PalPowerSaveModeSelect+0x36>
    660e:	3301      	adds	r3, #1
    6610:	603b      	str	r3, [r7, #0]
    6612:	68f3      	ldr	r3, [r6, #12]
    6614:	6928      	ldr	r0, [r5, #16]
    6616:	4798      	blx	r3
    6618:	2000      	movs	r0, #0
    661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    661c:	480c      	ldr	r0, [pc, #48]	; (6650 <CC_PalPowerSaveModeSelect+0x80>)
    661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6620:	4a0a      	ldr	r2, [pc, #40]	; (664c <CC_PalPowerSaveModeSelect+0x7c>)
    6622:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6626:	2b00      	cmp	r3, #0
    6628:	d1fb      	bne.n	6622 <CC_PalPowerSaveModeSelect+0x52>
    662a:	4a07      	ldr	r2, [pc, #28]	; (6648 <CC_PalPowerSaveModeSelect+0x78>)
    662c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6630:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6634:	f7ff ff48 	bl	64c8 <CC_HalMaskInterrupt>
    6638:	683b      	ldr	r3, [r7, #0]
    663a:	e7d7      	b.n	65ec <CC_PalPowerSaveModeSelect+0x1c>
    663c:	20000114 	.word	0x20000114
    6640:	20000104 	.word	0x20000104
    6644:	20000f90 	.word	0x20000f90
    6648:	5002a000 	.word	0x5002a000
    664c:	5002b000 	.word	0x5002b000
    6650:	ffff8fe9 	.word	0xffff8fe9

00006654 <button_handler>:
	if (change_detected & button_state)
    6654:	4201      	tst	r1, r0
    6656:	d002      	beq.n	665e <button_handler+0xa>
    6658:	4608      	mov	r0, r1
    665a:	f7f9 bebf 	b.w	3dc <button_handler.part.0>
}
    665e:	4770      	bx	lr

00006660 <cbpprintf_external>:
{
    6660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6664:	4607      	mov	r7, r0
    6666:	460e      	mov	r6, r1
    6668:	4690      	mov	r8, r2
	if (buf == NULL) {
    666a:	461d      	mov	r5, r3
    666c:	b30b      	cbz	r3, 66b2 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    666e:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    6670:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
    6672:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    6676:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6678:	441c      	add	r4, r3
    667a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    667e:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    6680:	f04f 0900 	mov.w	r9, #0
    6684:	45d1      	cmp	r9, sl
    6686:	d308      	bcc.n	669a <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    6688:	686a      	ldr	r2, [r5, #4]
    668a:	f105 0308 	add.w	r3, r5, #8
    668e:	4641      	mov	r1, r8
    6690:	4638      	mov	r0, r7
    6692:	46b4      	mov	ip, r6
}
    6694:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6698:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    669a:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    669e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    66a2:	4620      	mov	r0, r4
    66a4:	f000 fc0d 	bl	6ec2 <strlen>
    66a8:	3001      	adds	r0, #1
    66aa:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    66ac:	f109 0901 	add.w	r9, r9, #1
    66b0:	e7e8      	b.n	6684 <cbpprintf_external+0x24>
}
    66b2:	f06f 0015 	mvn.w	r0, #21
    66b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000066ba <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    66ba:	4603      	mov	r3, r0
    66bc:	b158      	cbz	r0, 66d6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    66be:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    66c0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    66c4:	2a01      	cmp	r2, #1
    66c6:	d003      	beq.n	66d0 <sys_notify_validate+0x16>
    66c8:	2a03      	cmp	r2, #3
    66ca:	d104      	bne.n	66d6 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    66cc:	6802      	ldr	r2, [r0, #0]
    66ce:	b112      	cbz	r2, 66d6 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    66d0:	2000      	movs	r0, #0
    66d2:	6098      	str	r0, [r3, #8]
    66d4:	4770      	bx	lr
		return -EINVAL;
    66d6:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    66da:	4770      	bx	lr

000066dc <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    66dc:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    66de:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    66e0:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    66e4:	2a03      	cmp	r2, #3
    66e6:	f04f 0200 	mov.w	r2, #0
{
    66ea:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    66ec:	bf0c      	ite	eq
    66ee:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    66f0:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    66f2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    66f4:	4770      	bx	lr

000066f6 <arch_printk_char_out>:
}
    66f6:	2000      	movs	r0, #0
    66f8:	4770      	bx	lr

000066fa <str_out>:
{
    66fa:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    66fc:	688a      	ldr	r2, [r1, #8]
    66fe:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6700:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6702:	b114      	cbz	r4, 670a <str_out+0x10>
    6704:	684b      	ldr	r3, [r1, #4]
    6706:	4293      	cmp	r3, r2
    6708:	dc01      	bgt.n	670e <str_out+0x14>
		ctx->count++;
    670a:	608d      	str	r5, [r1, #8]
}
    670c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    670e:	3b01      	subs	r3, #1
    6710:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    6712:	bf08      	it	eq
    6714:	2200      	moveq	r2, #0
    6716:	608d      	str	r5, [r1, #8]
    6718:	bf0c      	ite	eq
    671a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    671c:	54a0      	strbne	r0, [r4, r2]
    671e:	e7f5      	b.n	670c <str_out+0x12>

00006720 <printk>:
{
    6720:	b40f      	push	{r0, r1, r2, r3}
    6722:	b507      	push	{r0, r1, r2, lr}
    6724:	a904      	add	r1, sp, #16
    6726:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    672a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    672c:	f7fa f8f0 	bl	910 <vprintk>
}
    6730:	b003      	add	sp, #12
    6732:	f85d eb04 	ldr.w	lr, [sp], #4
    6736:	b004      	add	sp, #16
    6738:	4770      	bx	lr

0000673a <snprintk>:
{
    673a:	b40c      	push	{r2, r3}
    673c:	b507      	push	{r0, r1, r2, lr}
    673e:	ab04      	add	r3, sp, #16
    6740:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6744:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6746:	f7fa f8f1 	bl	92c <vsnprintk>
}
    674a:	b003      	add	sp, #12
    674c:	f85d eb04 	ldr.w	lr, [sp], #4
    6750:	b002      	add	sp, #8
    6752:	4770      	bx	lr

00006754 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6754:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6756:	f013 0307 	ands.w	r3, r3, #7
    675a:	d105      	bne.n	6768 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    675c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    675e:	2b00      	cmp	r3, #0
    6760:	bf0c      	ite	eq
    6762:	2000      	moveq	r0, #0
    6764:	2003      	movne	r0, #3
    6766:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6768:	2b02      	cmp	r3, #2
    676a:	d105      	bne.n	6778 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    676c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    676e:	2b00      	cmp	r3, #0
    6770:	bf14      	ite	ne
    6772:	2000      	movne	r0, #0
    6774:	2004      	moveq	r0, #4
    6776:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6778:	2b01      	cmp	r3, #1
    677a:	d105      	bne.n	6788 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    677c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    677e:	2b00      	cmp	r3, #0
    6780:	bf0c      	ite	eq
    6782:	2000      	moveq	r0, #0
    6784:	2005      	movne	r0, #5
    6786:	4770      	bx	lr
	int evt = EVT_NOP;
    6788:	2000      	movs	r0, #0
}
    678a:	4770      	bx	lr

0000678c <notify_one>:
{
    678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6790:	460d      	mov	r5, r1
    6792:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6794:	4619      	mov	r1, r3
    6796:	1d28      	adds	r0, r5, #4
{
    6798:	4690      	mov	r8, r2
    679a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    679c:	f7ff ff9e 	bl	66dc <sys_notify_finalize>
	if (cb) {
    67a0:	4604      	mov	r4, r0
    67a2:	b138      	cbz	r0, 67b4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    67a4:	4633      	mov	r3, r6
    67a6:	4642      	mov	r2, r8
    67a8:	4629      	mov	r1, r5
    67aa:	4638      	mov	r0, r7
    67ac:	46a4      	mov	ip, r4
}
    67ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    67b2:	4760      	bx	ip
}
    67b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067b8 <transition_complete>:
{
    67b8:	b410      	push	{r4}
	__asm__ volatile(
    67ba:	f04f 0420 	mov.w	r4, #32
    67be:	f3ef 8211 	mrs	r2, BASEPRI
    67c2:	f384 8812 	msr	BASEPRI_MAX, r4
    67c6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    67ca:	6141      	str	r1, [r0, #20]
}
    67cc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    67ce:	2101      	movs	r1, #1
    67d0:	f7fa b8c2 	b.w	958 <process_event>

000067d4 <validate_args>:
{
    67d4:	b510      	push	{r4, lr}
    67d6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    67d8:	b140      	cbz	r0, 67ec <validate_args+0x18>
    67da:	b139      	cbz	r1, 67ec <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    67dc:	1d08      	adds	r0, r1, #4
    67de:	f7ff ff6c 	bl	66ba <sys_notify_validate>
	if ((rv == 0)
    67e2:	b928      	cbnz	r0, 67f0 <validate_args+0x1c>
	    && ((cli->notify.flags
    67e4:	68a3      	ldr	r3, [r4, #8]
    67e6:	f033 0303 	bics.w	r3, r3, #3
    67ea:	d001      	beq.n	67f0 <validate_args+0x1c>
		rv = -EINVAL;
    67ec:	f06f 0015 	mvn.w	r0, #21
}
    67f0:	bd10      	pop	{r4, pc}

000067f2 <onoff_manager_init>:
{
    67f2:	b538      	push	{r3, r4, r5, lr}
    67f4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    67f6:	4605      	mov	r5, r0
    67f8:	b158      	cbz	r0, 6812 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    67fa:	b151      	cbz	r1, 6812 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    67fc:	680b      	ldr	r3, [r1, #0]
    67fe:	b143      	cbz	r3, 6812 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6800:	684b      	ldr	r3, [r1, #4]
    6802:	b133      	cbz	r3, 6812 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6804:	221c      	movs	r2, #28
    6806:	2100      	movs	r1, #0
    6808:	f000 fb76 	bl	6ef8 <memset>
    680c:	612c      	str	r4, [r5, #16]
	return 0;
    680e:	2000      	movs	r0, #0
}
    6810:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6812:	f06f 0015 	mvn.w	r0, #21
    6816:	e7fb      	b.n	6810 <onoff_manager_init+0x1e>

00006818 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6818:	b570      	push	{r4, r5, r6, lr}
    681a:	4604      	mov	r4, r0
    681c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    681e:	f7ff ffd9 	bl	67d4 <validate_args>

	if (rv < 0) {
    6822:	1e05      	subs	r5, r0, #0
    6824:	db31      	blt.n	688a <onoff_request+0x72>
    6826:	f04f 0320 	mov.w	r3, #32
    682a:	f3ef 8111 	mrs	r1, BASEPRI
    682e:	f383 8812 	msr	BASEPRI_MAX, r3
    6832:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6836:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6838:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    683a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    683e:	42ab      	cmp	r3, r5
    6840:	f000 0207 	and.w	r2, r0, #7
    6844:	d02e      	beq.n	68a4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6846:	2a02      	cmp	r2, #2
    6848:	d10e      	bne.n	6868 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    684a:	3301      	adds	r3, #1
    684c:	8363      	strh	r3, [r4, #26]
	rv = state;
    684e:	4615      	mov	r5, r2
		notify = true;
    6850:	2301      	movs	r3, #1
	__asm__ volatile(
    6852:	f381 8811 	msr	BASEPRI, r1
    6856:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    685a:	b1b3      	cbz	r3, 688a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    685c:	2300      	movs	r3, #0
    685e:	4631      	mov	r1, r6
    6860:	4620      	mov	r0, r4
    6862:	f7ff ff93 	bl	678c <notify_one>
    6866:	e010      	b.n	688a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6868:	0783      	lsls	r3, r0, #30
    686a:	d001      	beq.n	6870 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    686c:	2a06      	cmp	r2, #6
    686e:	d10e      	bne.n	688e <onoff_request+0x76>
	parent->next = child;
    6870:	2300      	movs	r3, #0
    6872:	6033      	str	r3, [r6, #0]
	return list->tail;
    6874:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6876:	b993      	cbnz	r3, 689e <onoff_request+0x86>
	list->head = node;
    6878:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    687c:	4615      	mov	r5, r2
    687e:	b962      	cbnz	r2, 689a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    6880:	460a      	mov	r2, r1
    6882:	4620      	mov	r0, r4
    6884:	2102      	movs	r1, #2
    6886:	f7fa f867 	bl	958 <process_event>
		}
	}

	return rv;
}
    688a:	4628      	mov	r0, r5
    688c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    688e:	2a05      	cmp	r2, #5
    6890:	bf0c      	ite	eq
    6892:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6896:	f06f 0504 	mvnne.w	r5, #4
    689a:	2300      	movs	r3, #0
    689c:	e7d9      	b.n	6852 <onoff_request+0x3a>
	parent->next = child;
    689e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    68a0:	6066      	str	r6, [r4, #4]
}
    68a2:	e7eb      	b.n	687c <onoff_request+0x64>
		rv = -EAGAIN;
    68a4:	f06f 050a 	mvn.w	r5, #10
    68a8:	e7f7      	b.n	689a <onoff_request+0x82>

000068aa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    68aa:	4604      	mov	r4, r0
    68ac:	b508      	push	{r3, lr}
    68ae:	4608      	mov	r0, r1
    68b0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    68b2:	461a      	mov	r2, r3
    68b4:	47a0      	blx	r4
	return z_impl_z_current_get();
    68b6:	f7ff fa4b 	bl	5d50 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    68ba:	f7fc f90b 	bl	2ad4 <z_impl_k_thread_abort>

000068be <encode_uint>:
{
    68be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68c2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    68c4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    68c6:	2b6f      	cmp	r3, #111	; 0x6f
{
    68c8:	4680      	mov	r8, r0
    68ca:	460f      	mov	r7, r1
    68cc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    68ce:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    68d2:	d029      	beq.n	6928 <encode_uint+0x6a>
    68d4:	d824      	bhi.n	6920 <encode_uint+0x62>
		return 16;
    68d6:	2b58      	cmp	r3, #88	; 0x58
    68d8:	bf14      	ite	ne
    68da:	260a      	movne	r6, #10
    68dc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    68de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    68e2:	4632      	mov	r2, r6
    68e4:	2300      	movs	r3, #0
    68e6:	4640      	mov	r0, r8
    68e8:	4639      	mov	r1, r7
    68ea:	f7f9 fc09 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    68ee:	2a09      	cmp	r2, #9
    68f0:	b2d4      	uxtb	r4, r2
    68f2:	d81e      	bhi.n	6932 <encode_uint+0x74>
    68f4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    68f6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    68f8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    68fa:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    68fe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6902:	d301      	bcc.n	6908 <encode_uint+0x4a>
    6904:	45d1      	cmp	r9, sl
    6906:	d811      	bhi.n	692c <encode_uint+0x6e>
	if (conv->flag_hash) {
    6908:	782b      	ldrb	r3, [r5, #0]
    690a:	069b      	lsls	r3, r3, #26
    690c:	d505      	bpl.n	691a <encode_uint+0x5c>
		if (radix == 8) {
    690e:	2e08      	cmp	r6, #8
    6910:	d115      	bne.n	693e <encode_uint+0x80>
			conv->altform_0 = true;
    6912:	78ab      	ldrb	r3, [r5, #2]
    6914:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6918:	70ab      	strb	r3, [r5, #2]
}
    691a:	4648      	mov	r0, r9
    691c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6920:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6924:	2b70      	cmp	r3, #112	; 0x70
    6926:	e7d7      	b.n	68d8 <encode_uint+0x1a>
	switch (specifier) {
    6928:	2608      	movs	r6, #8
    692a:	e7d8      	b.n	68de <encode_uint+0x20>
		value /= radix;
    692c:	4680      	mov	r8, r0
    692e:	460f      	mov	r7, r1
    6930:	e7d7      	b.n	68e2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6932:	f1bb 0f19 	cmp.w	fp, #25
    6936:	bf94      	ite	ls
    6938:	3437      	addls	r4, #55	; 0x37
    693a:	3457      	addhi	r4, #87	; 0x57
    693c:	e7db      	b.n	68f6 <encode_uint+0x38>
		} else if (radix == 16) {
    693e:	2e10      	cmp	r6, #16
    6940:	d1eb      	bne.n	691a <encode_uint+0x5c>
			conv->altform_0c = true;
    6942:	78ab      	ldrb	r3, [r5, #2]
    6944:	f043 0310 	orr.w	r3, r3, #16
    6948:	e7e6      	b.n	6918 <encode_uint+0x5a>

0000694a <outs>:
{
    694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    694e:	4607      	mov	r7, r0
    6950:	4688      	mov	r8, r1
    6952:	4615      	mov	r5, r2
    6954:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6956:	4614      	mov	r4, r2
    6958:	42b4      	cmp	r4, r6
    695a:	eba4 0005 	sub.w	r0, r4, r5
    695e:	d302      	bcc.n	6966 <outs+0x1c>
    6960:	b93e      	cbnz	r6, 6972 <outs+0x28>
    6962:	7823      	ldrb	r3, [r4, #0]
    6964:	b12b      	cbz	r3, 6972 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6966:	f814 0b01 	ldrb.w	r0, [r4], #1
    696a:	4641      	mov	r1, r8
    696c:	47b8      	blx	r7
		if (rc < 0) {
    696e:	2800      	cmp	r0, #0
    6970:	daf2      	bge.n	6958 <outs+0xe>
}
    6972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006976 <free_space>:
	__ASSERT_NO_MSG(err == 0);
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    6976:	4602      	mov	r2, r0
    6978:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    697a:	68c0      	ldr	r0, [r0, #12]
    697c:	6814      	ldr	r4, [r2, #0]
    697e:	42a0      	cmp	r0, r4
    6980:	d904      	bls.n	698c <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    6982:	3801      	subs	r0, #1
    6984:	1b00      	subs	r0, r0, r4
    6986:	6008      	str	r0, [r1, #0]

		return false;
    6988:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    698a:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    698c:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    698e:	b918      	cbnz	r0, 6998 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6990:	3b01      	subs	r3, #1
    6992:	1b1b      	subs	r3, r3, r4
    6994:	600b      	str	r3, [r1, #0]
		return false;
    6996:	e7f8      	b.n	698a <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    6998:	1b1b      	subs	r3, r3, r4
    699a:	600b      	str	r3, [r1, #0]
	return true;
    699c:	2001      	movs	r0, #1
    699e:	e7f4      	b.n	698a <free_space+0x14>

000069a0 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    69a0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    69a2:	a901      	add	r1, sp, #4
{
    69a4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    69a6:	f7ff ffe6 	bl	6976 <free_space>
    69aa:	b120      	cbz	r0, 69b6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	68e2      	ldr	r2, [r4, #12]
    69b0:	3b01      	subs	r3, #1
    69b2:	4413      	add	r3, r2
    69b4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    69b6:	9801      	ldr	r0, [sp, #4]
    69b8:	6a23      	ldr	r3, [r4, #32]
    69ba:	43c0      	mvns	r0, r0
}
    69bc:	4418      	add	r0, r3
    69be:	b002      	add	sp, #8
    69c0:	bd10      	pop	{r4, pc}

000069c2 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    69c2:	b510      	push	{r4, lr}
    69c4:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    69c6:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    69c8:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    69ca:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    69cc:	07d2      	lsls	r2, r2, #31
    69ce:	d502      	bpl.n	69d6 <idx_inc+0x14>
		return i & (buffer->size - 1);
    69d0:	3b01      	subs	r3, #1
    69d2:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    69d4:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    69d6:	4298      	cmp	r0, r3
    69d8:	bf28      	it	cs
    69da:	1ac0      	subcs	r0, r0, r3
    69dc:	e7fa      	b.n	69d4 <idx_inc+0x12>

000069de <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    69de:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    69e0:	69c2      	ldr	r2, [r0, #28]
{
    69e2:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    69e4:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    69e6:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    69e8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    69ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    69f0:	462a      	mov	r2, r5
    69f2:	6801      	ldr	r1, [r0, #0]
{
    69f4:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    69f6:	f7ff ffe4 	bl	69c2 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    69fa:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    69fc:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    69fe:	462a      	mov	r2, r5
    6a00:	4620      	mov	r0, r4
    6a02:	f7ff ffde 	bl	69c2 <idx_inc>
    6a06:	6060      	str	r0, [r4, #4]
}
    6a08:	bd38      	pop	{r3, r4, r5, pc}

00006a0a <max_utilization_update>:
{
    6a0a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6a0c:	6903      	ldr	r3, [r0, #16]
    6a0e:	075b      	lsls	r3, r3, #29
{
    6a10:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6a12:	d506      	bpl.n	6a22 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6a14:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6a16:	f7ff ffc3 	bl	69a0 <get_usage>
    6a1a:	4285      	cmp	r5, r0
    6a1c:	d902      	bls.n	6a24 <max_utilization_update+0x1a>
    6a1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6a20:	6260      	str	r0, [r4, #36]	; 0x24
}
    6a22:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6a24:	4620      	mov	r0, r4
    6a26:	f7ff ffbb 	bl	69a0 <get_usage>
    6a2a:	e7f9      	b.n	6a20 <max_utilization_update+0x16>

00006a2c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    6a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6a30:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    6a34:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    6a38:	461f      	mov	r7, r3
	*user_packet = false;
    6a3a:	2300      	movs	r3, #0
    6a3c:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    6a3e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6a42:	f003 0303 	and.w	r3, r3, #3
    6a46:	2b02      	cmp	r3, #2
{
    6a48:	4604      	mov	r4, r0
    6a4a:	468b      	mov	fp, r1
    6a4c:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6a4e:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6a52:	d103      	bne.n	6a5c <drop_item_locked+0x30>
		return item->skip.len;
    6a54:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    6a58:	08ad      	lsrs	r5, r5, #2
    6a5a:	d12e      	bne.n	6aba <drop_item_locked+0x8e>
    6a5c:	69a3      	ldr	r3, [r4, #24]
    6a5e:	4630      	mov	r0, r6
    6a60:	4798      	blx	r3
    6a62:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    6a64:	f1b8 0f00 	cmp.w	r8, #0
    6a68:	d036      	beq.n	6ad8 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    6a6a:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6a6e:	079b      	lsls	r3, r3, #30
    6a70:	d52f      	bpl.n	6ad2 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    6a72:	f10b 0101 	add.w	r1, fp, #1
    6a76:	4620      	mov	r0, r4
    6a78:	f7ff ffb1 	bl	69de <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6a7c:	6861      	ldr	r1, [r4, #4]
    6a7e:	462a      	mov	r2, r5
    6a80:	4620      	mov	r0, r4
    6a82:	f7ff ff9e 	bl	69c2 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6a86:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6a88:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6a8a:	462a      	mov	r2, r5
    6a8c:	4620      	mov	r0, r4
    6a8e:	f7ff ff98 	bl	69c2 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6a92:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6a94:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6a96:	68e1      	ldr	r1, [r4, #12]
    6a98:	4620      	mov	r0, r4
    6a9a:	f7ff ff92 	bl	69c2 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6a9e:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    6aa0:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    6aa4:	f002 0203 	and.w	r2, r2, #3
    6aa8:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6aaa:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6aae:	d10c      	bne.n	6aca <drop_item_locked+0x9e>
		return item->skip.len;
    6ab0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    6ab4:	089b      	lsrs	r3, r3, #2
    6ab6:	d008      	beq.n	6aca <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    6ab8:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6aba:	68e1      	ldr	r1, [r4, #12]
    6abc:	462a      	mov	r2, r5
    6abe:	4620      	mov	r0, r4
    6ac0:	f7ff ff7f 	bl	69c2 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6ac4:	e9c4 0002 	strd	r0, r0, [r4, #8]
    6ac8:	e007      	b.n	6ada <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    6aca:	69a3      	ldr	r3, [r4, #24]
    6acc:	4630      	mov	r0, r6
    6ace:	4798      	blx	r3
    6ad0:	4405      	add	r5, r0
			*user_packet = true;
    6ad2:	2301      	movs	r3, #1
    6ad4:	703b      	strb	r3, [r7, #0]
    6ad6:	e7f0      	b.n	6aba <drop_item_locked+0x8e>
		item = NULL;
    6ad8:	4646      	mov	r6, r8
	}

	return item;
}
    6ada:	4630      	mov	r0, r6
    6adc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006ae0 <mpsc_pbuf_init>:
{
    6ae0:	b538      	push	{r3, r4, r5, lr}
    6ae2:	460d      	mov	r5, r1
    6ae4:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    6ae6:	221c      	movs	r2, #28
    6ae8:	2100      	movs	r1, #0
    6aea:	f000 fa05 	bl	6ef8 <memset>
	buffer->get_wlen = cfg->get_wlen;
    6aee:	68eb      	ldr	r3, [r5, #12]
    6af0:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    6af2:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    6af4:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    6af6:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    6af8:	682b      	ldr	r3, [r5, #0]
    6afa:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    6afc:	2300      	movs	r3, #0
    6afe:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    6b00:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    6b02:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    6b04:	b122      	cbz	r2, 6b10 <mpsc_pbuf_init+0x30>
    6b06:	1e51      	subs	r1, r2, #1
    6b08:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    6b0a:	bf08      	it	eq
    6b0c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    6b10:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6b12:	2201      	movs	r2, #1
    6b14:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6b18:	2100      	movs	r1, #0
}
    6b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b1e:	f000 bdd1 	b.w	76c4 <z_impl_k_sem_init>

00006b22 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b26:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6b28:	6a03      	ldr	r3, [r0, #32]
    6b2a:	3b01      	subs	r3, #1
    6b2c:	428b      	cmp	r3, r1
{
    6b2e:	b085      	sub	sp, #20
    6b30:	4604      	mov	r4, r0
    6b32:	460f      	mov	r7, r1
    6b34:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    6b36:	d367      	bcc.n	6c08 <mpsc_pbuf_alloc+0xe6>
	union mpsc_pbuf_generic *dropped_item = NULL;
    6b38:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    6b3a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    6b3c:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    6b40:	f04f 0320 	mov.w	r3, #32
    6b44:	f3ef 8611 	mrs	r6, BASEPRI
    6b48:	f383 8812 	msr	BASEPRI_MAX, r3
    6b4c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    6b50:	a903      	add	r1, sp, #12
    6b52:	4620      	mov	r0, r4
    6b54:	f7ff ff0f 	bl	6976 <free_space>
		if (free_wlen >= wlen) {
    6b58:	9903      	ldr	r1, [sp, #12]
    6b5a:	42b9      	cmp	r1, r7
    6b5c:	d324      	bcc.n	6ba8 <mpsc_pbuf_alloc+0x86>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6b5e:	6821      	ldr	r1, [r4, #0]
			item =
    6b60:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    6b62:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    6b66:	f022 0203 	bic.w	r2, r2, #3
    6b6a:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    6b6e:	4620      	mov	r0, r4
    6b70:	463a      	mov	r2, r7
			item =
    6b72:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    6b76:	f7ff ff24 	bl	69c2 <idx_inc>
		cont = false;
    6b7a:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    6b7c:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    6b7e:	f386 8811 	msr	BASEPRI, r6
    6b82:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    6b86:	2b00      	cmp	r3, #0
    6b88:	d040      	beq.n	6c0c <mpsc_pbuf_alloc+0xea>
    6b8a:	2d00      	cmp	r5, #0
    6b8c:	d0d8      	beq.n	6b40 <mpsc_pbuf_alloc+0x1e>
    6b8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6b92:	2b00      	cmp	r3, #0
    6b94:	d0d4      	beq.n	6b40 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    6b96:	6963      	ldr	r3, [r4, #20]
    6b98:	b123      	cbz	r3, 6ba4 <mpsc_pbuf_alloc+0x82>
				buffer->notify_drop(buffer, dropped_item);
    6b9a:	4629      	mov	r1, r5
    6b9c:	4620      	mov	r0, r4
    6b9e:	4798      	blx	r3
			}
			dropped_item = NULL;
    6ba0:	2500      	movs	r5, #0
    6ba2:	e7cd      	b.n	6b40 <mpsc_pbuf_alloc+0x1e>
    6ba4:	461d      	mov	r5, r3
    6ba6:	e7cb      	b.n	6b40 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    6ba8:	b128      	cbz	r0, 6bb6 <mpsc_pbuf_alloc+0x94>
    6baa:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    6bac:	4620      	mov	r0, r4
    6bae:	f7ff ff16 	bl	69de <add_skip_item>
			cont = true;
    6bb2:	9b01      	ldr	r3, [sp, #4]
    6bb4:	e7e3      	b.n	6b7e <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6bb6:	ea58 0309 	orrs.w	r3, r8, r9
    6bba:	d017      	beq.n	6bec <mpsc_pbuf_alloc+0xca>
			   !k_is_in_isr()) {
    6bbc:	f000 fd5f 	bl	767e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6bc0:	b9a0      	cbnz	r0, 6bec <mpsc_pbuf_alloc+0xca>
    6bc2:	f386 8811 	msr	BASEPRI, r6
    6bc6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6bca:	4642      	mov	r2, r8
    6bcc:	464b      	mov	r3, r9
    6bce:	4658      	mov	r0, fp
    6bd0:	f7fe fc22 	bl	5418 <z_impl_k_sem_take>
	__asm__ volatile(
    6bd4:	f04f 0320 	mov.w	r3, #32
    6bd8:	f3ef 8611 	mrs	r6, BASEPRI
    6bdc:	f383 8812 	msr	BASEPRI_MAX, r3
    6be0:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    6be4:	fab0 f380 	clz	r3, r0
    6be8:	095b      	lsrs	r3, r3, #5
    6bea:	e7c8      	b.n	6b7e <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6bec:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6bee:	9903      	ldr	r1, [sp, #12]
    6bf0:	f10d 030b 	add.w	r3, sp, #11
    6bf4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6bf8:	4620      	mov	r0, r4
    6bfa:	f7ff ff17 	bl	6a2c <drop_item_locked>
			cont = dropped_item != NULL;
    6bfe:	1e03      	subs	r3, r0, #0
    6c00:	4605      	mov	r5, r0
    6c02:	bf18      	it	ne
    6c04:	2301      	movne	r3, #1
    6c06:	e7ba      	b.n	6b7e <mpsc_pbuf_alloc+0x5c>
		return NULL;
    6c08:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6c0c:	4650      	mov	r0, sl
    6c0e:	b005      	add	sp, #20
    6c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006c14 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6c14:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6c16:	6983      	ldr	r3, [r0, #24]
{
    6c18:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6c1a:	4608      	mov	r0, r1
{
    6c1c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6c1e:	4798      	blx	r3
    6c20:	4602      	mov	r2, r0
    6c22:	f04f 0320 	mov.w	r3, #32
    6c26:	f3ef 8611 	mrs	r6, BASEPRI
    6c2a:	f383 8812 	msr	BASEPRI_MAX, r3
    6c2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6c32:	782b      	ldrb	r3, [r5, #0]
    6c34:	f043 0301 	orr.w	r3, r3, #1
    6c38:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6c3a:	6861      	ldr	r1, [r4, #4]
    6c3c:	4620      	mov	r0, r4
    6c3e:	f7ff fec0 	bl	69c2 <idx_inc>
    6c42:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6c44:	4620      	mov	r0, r4
    6c46:	f7ff fee0 	bl	6a0a <max_utilization_update>
	__asm__ volatile(
    6c4a:	f386 8811 	msr	BASEPRI, r6
    6c4e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    6c52:	bd70      	pop	{r4, r5, r6, pc}

00006c54 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c58:	4604      	mov	r4, r0
	__asm__ volatile(
    6c5a:	f04f 0320 	mov.w	r3, #32
    6c5e:	f3ef 8611 	mrs	r6, BASEPRI
    6c62:	f383 8812 	msr	BASEPRI_MAX, r3
    6c66:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6c6a:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    6c6e:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6c70:	bf88      	it	hi
    6c72:	6a23      	ldrhi	r3, [r4, #32]
    6c74:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    6c76:	b1f3      	cbz	r3, 6cb6 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    6c78:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    6c7a:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    6c7e:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    6c82:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    6c86:	d016      	beq.n	6cb6 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    6c88:	2b02      	cmp	r3, #2
    6c8a:	d103      	bne.n	6c94 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    6c8c:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    6c90:	08ad      	lsrs	r5, r5, #2
    6c92:	d115      	bne.n	6cc0 <mpsc_pbuf_claim+0x6c>
    6c94:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    6c96:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    6c98:	d50f      	bpl.n	6cba <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    6c9a:	f042 0202 	orr.w	r2, r2, #2
    6c9e:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6ca2:	4640      	mov	r0, r8
    6ca4:	4798      	blx	r3
    6ca6:	4639      	mov	r1, r7
    6ca8:	4602      	mov	r2, r0
    6caa:	4620      	mov	r0, r4
    6cac:	f7ff fe89 	bl	69c2 <idx_inc>
		cont = false;
    6cb0:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    6cb2:	60a0      	str	r0, [r4, #8]
    6cb4:	e011      	b.n	6cda <mpsc_pbuf_claim+0x86>
			item = NULL;
    6cb6:	4698      	mov	r8, r3
    6cb8:	e00f      	b.n	6cda <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    6cba:	4640      	mov	r0, r8
    6cbc:	4798      	blx	r3
    6cbe:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    6cc0:	68a1      	ldr	r1, [r4, #8]
    6cc2:	462a      	mov	r2, r5
    6cc4:	4620      	mov	r0, r4
    6cc6:	f7ff fe7c 	bl	69c2 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6cca:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    6ccc:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    6cce:	462a      	mov	r2, r5
    6cd0:	4620      	mov	r0, r4
    6cd2:	f7ff fe76 	bl	69c2 <idx_inc>
				cont = true;
    6cd6:	2301      	movs	r3, #1
				buffer->rd_idx =
    6cd8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6cda:	f386 8811 	msr	BASEPRI, r6
    6cde:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d1b9      	bne.n	6c5a <mpsc_pbuf_claim+0x6>

	return item;
}
    6ce6:	4640      	mov	r0, r8
    6ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006cec <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6cec:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6cee:	6983      	ldr	r3, [r0, #24]
{
    6cf0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6cf2:	4608      	mov	r0, r1
{
    6cf4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6cf6:	4798      	blx	r3
    6cf8:	4602      	mov	r2, r0
	__asm__ volatile(
    6cfa:	f04f 0320 	mov.w	r3, #32
    6cfe:	f3ef 8611 	mrs	r6, BASEPRI
    6d02:	f383 8812 	msr	BASEPRI_MAX, r3
    6d06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6d0a:	782b      	ldrb	r3, [r5, #0]
    6d0c:	f36f 0300 	bfc	r3, #0, #1
    6d10:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6d12:	6923      	ldr	r3, [r4, #16]
    6d14:	079b      	lsls	r3, r3, #30
    6d16:	d505      	bpl.n	6d24 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6d18:	68e1      	ldr	r1, [r4, #12]
    6d1a:	69e3      	ldr	r3, [r4, #28]
    6d1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6d20:	429d      	cmp	r5, r3
    6d22:	d112      	bne.n	6d4a <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    6d24:	782b      	ldrb	r3, [r5, #0]
    6d26:	f36f 0341 	bfc	r3, #1, #1
    6d2a:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6d2c:	68e1      	ldr	r1, [r4, #12]
    6d2e:	4620      	mov	r0, r4
    6d30:	f7ff fe47 	bl	69c2 <idx_inc>
    6d34:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6d36:	f386 8811 	msr	BASEPRI, r6
    6d3a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6d3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    6d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d46:	f7fe bb47 	b.w	53d8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    6d4a:	682b      	ldr	r3, [r5, #0]
    6d4c:	f360 039f 	bfi	r3, r0, #2, #30
    6d50:	602b      	str	r3, [r5, #0]
    6d52:	e7f0      	b.n	6d36 <mpsc_pbuf_free+0x4a>

00006d54 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6d54:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    6d58:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6d5a:	bf8a      	itet	hi
    6d5c:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    6d5e:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6d60:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    6d62:	1e18      	subs	r0, r3, #0
    6d64:	bf18      	it	ne
    6d66:	2001      	movne	r0, #1
    6d68:	4770      	bx	lr

00006d6a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6d6a:	4770      	bx	lr

00006d6c <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    6d6c:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    6d6e:	075b      	lsls	r3, r3, #29
    6d70:	d40b      	bmi.n	6d8a <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6d72:	6803      	ldr	r3, [r0, #0]
    6d74:	8840      	ldrh	r0, [r0, #2]
    6d76:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6d7a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    6d7e:	4418      	add	r0, r3
    6d80:	3017      	adds	r0, #23
    6d82:	f020 0007 	bic.w	r0, r0, #7
    6d86:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    6d88:	4770      	bx	lr
	return 0;
    6d8a:	2000      	movs	r0, #0
}
    6d8c:	4770      	bx	lr

00006d8e <dummy_timestamp>:
}
    6d8e:	2000      	movs	r0, #0
    6d90:	4770      	bx	lr

00006d92 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6d92:	f000 ba42 	b.w	721a <sys_clock_cycle_get_32>

00006d96 <notify_drop>:
	z_log_dropped(true);
    6d96:	2001      	movs	r0, #1
    6d98:	f7fa bb68 	b.w	146c <z_log_dropped>

00006d9c <z_log_get_tag>:
}
    6d9c:	2000      	movs	r0, #0
    6d9e:	4770      	bx	lr

00006da0 <z_cbprintf_cpy>:
{
    6da0:	b570      	push	{r4, r5, r6, lr}
    6da2:	4603      	mov	r3, r0
    6da4:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    6da6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    6daa:	1a12      	subs	r2, r2, r0
    6dac:	428a      	cmp	r2, r1
{
    6dae:	460c      	mov	r4, r1
	if ((desc->size - desc->off) < len) {
    6db0:	d30a      	bcc.n	6dc8 <z_cbprintf_cpy+0x28>
	memcpy(&((uint8_t *)desc->buf)[desc->off], (void *)buf, len);
    6db2:	682e      	ldr	r6, [r5, #0]
    6db4:	460a      	mov	r2, r1
    6db6:	4430      	add	r0, r6
    6db8:	4619      	mov	r1, r3
    6dba:	f000 f892 	bl	6ee2 <memcpy>
	desc->off += len;
    6dbe:	68ab      	ldr	r3, [r5, #8]
    6dc0:	4423      	add	r3, r4
    6dc2:	60ab      	str	r3, [r5, #8]
	return len;
    6dc4:	4620      	mov	r0, r4
}
    6dc6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    6dc8:	f06f 001b 	mvn.w	r0, #27
    6dcc:	e7fb      	b.n	6dc6 <z_cbprintf_cpy+0x26>

00006dce <z_log_msg_finalize>:
{
    6dce:	b570      	push	{r4, r5, r6, lr}
    6dd0:	460e      	mov	r6, r1
    6dd2:	4615      	mov	r5, r2
    6dd4:	4619      	mov	r1, r3
	if (!msg) {
    6dd6:	4604      	mov	r4, r0
    6dd8:	b918      	cbnz	r0, 6de2 <z_log_msg_finalize+0x14>
}
    6dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    6dde:	f7fa bb45 	b.w	146c <z_log_dropped>
	if (data) {
    6de2:	b143      	cbz	r3, 6df6 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    6de4:	f100 0310 	add.w	r3, r0, #16
    6de8:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    6dec:	4418      	add	r0, r3
    6dee:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    6df2:	f000 f876 	bl	6ee2 <memcpy>
	msg->hdr.source = source;
    6df6:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    6dfa:	4620      	mov	r0, r4
}
    6dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    6e00:	f7fa bc72 	b.w	16e8 <z_log_msg_commit>

00006e04 <buffer_write>:
{
    6e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e06:	4606      	mov	r6, r0
    6e08:	460d      	mov	r5, r1
    6e0a:	4614      	mov	r4, r2
    6e0c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6e0e:	4621      	mov	r1, r4
    6e10:	4628      	mov	r0, r5
    6e12:	463a      	mov	r2, r7
    6e14:	47b0      	blx	r6
	} while (len != 0);
    6e16:	1a24      	subs	r4, r4, r0
		buf += processed;
    6e18:	4405      	add	r5, r0
	} while (len != 0);
    6e1a:	d1f8      	bne.n	6e0e <buffer_write+0xa>
}
    6e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006e1e <cbvprintf>:
{
    6e1e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    6e20:	2400      	movs	r4, #0
    6e22:	9400      	str	r4, [sp, #0]
    6e24:	f7f9 fe78 	bl	b18 <z_cbvprintf_impl>
}
    6e28:	b002      	add	sp, #8
    6e2a:	bd10      	pop	{r4, pc}

00006e2c <log_output_flush>:
		     output->control_block->offset,
    6e2c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    6e2e:	6881      	ldr	r1, [r0, #8]
{
    6e30:	b510      	push	{r4, lr}
    6e32:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6e34:	e9d2 2300 	ldrd	r2, r3, [r2]
    6e38:	6800      	ldr	r0, [r0, #0]
    6e3a:	f7ff ffe3 	bl	6e04 <buffer_write>
	output->control_block->offset = 0;
    6e3e:	6863      	ldr	r3, [r4, #4]
    6e40:	2200      	movs	r2, #0
    6e42:	601a      	str	r2, [r3, #0]
}
    6e44:	bd10      	pop	{r4, pc}

00006e46 <out_func>:
{
    6e46:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    6e48:	684b      	ldr	r3, [r1, #4]
    6e4a:	681a      	ldr	r2, [r3, #0]
    6e4c:	68cb      	ldr	r3, [r1, #12]
    6e4e:	429a      	cmp	r2, r3
{
    6e50:	4605      	mov	r5, r0
    6e52:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6e54:	d102      	bne.n	6e5c <out_func+0x16>
		log_output_flush(out_ctx);
    6e56:	4608      	mov	r0, r1
    6e58:	f7ff ffe8 	bl	6e2c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6e5c:	6863      	ldr	r3, [r4, #4]
    6e5e:	f3bf 8f5b 	dmb	ish
    6e62:	e853 2f00 	ldrex	r2, [r3]
    6e66:	1c51      	adds	r1, r2, #1
    6e68:	e843 1000 	strex	r0, r1, [r3]
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d1f8      	bne.n	6e62 <out_func+0x1c>
    6e70:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6e74:	68a3      	ldr	r3, [r4, #8]
    6e76:	549d      	strb	r5, [r3, r2]
}
    6e78:	2000      	movs	r0, #0
    6e7a:	bd38      	pop	{r3, r4, r5, pc}

00006e7c <cr_out_func>:
{
    6e7c:	b538      	push	{r3, r4, r5, lr}
    6e7e:	4605      	mov	r5, r0
    6e80:	460c      	mov	r4, r1
	out_func(c, ctx);
    6e82:	f7ff ffe0 	bl	6e46 <out_func>
	if (c == '\n') {
    6e86:	2d0a      	cmp	r5, #10
    6e88:	d103      	bne.n	6e92 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    6e8a:	4621      	mov	r1, r4
    6e8c:	200d      	movs	r0, #13
    6e8e:	f7ff ffda 	bl	6e46 <out_func>
}
    6e92:	2000      	movs	r0, #0
    6e94:	bd38      	pop	{r3, r4, r5, pc}

00006e96 <abort_function>:
{
    6e96:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6e98:	2000      	movs	r0, #0
    6e9a:	f7fa fa03 	bl	12a4 <sys_reboot>

00006e9e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6e9e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6ea0:	6800      	ldr	r0, [r0, #0]
    6ea2:	f7fb b92b 	b.w	20fc <z_arm_fatal_error>

00006ea6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6ea6:	2100      	movs	r1, #0
    6ea8:	2001      	movs	r0, #1
    6eaa:	f7fb b927 	b.w	20fc <z_arm_fatal_error>

00006eae <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6eae:	b508      	push	{r3, lr}
	handler();
    6eb0:	f7fb f9c0 	bl	2234 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6eb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6eb8:	f7fb ba98 	b.w	23ec <z_arm_exc_exit>

00006ebc <z_log_msg_static_create.constprop.0>:
    6ebc:	2300      	movs	r3, #0
    6ebe:	f7fa bc81 	b.w	17c4 <z_impl_z_log_msg_static_create>

00006ec2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6ec2:	4603      	mov	r3, r0
	size_t n = 0;
    6ec4:	2000      	movs	r0, #0

	while (*s != '\0') {
    6ec6:	5c1a      	ldrb	r2, [r3, r0]
    6ec8:	b902      	cbnz	r2, 6ecc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6eca:	4770      	bx	lr
		n++;
    6ecc:	3001      	adds	r0, #1
    6ece:	e7fa      	b.n	6ec6 <strlen+0x4>

00006ed0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6ed0:	4603      	mov	r3, r0
	size_t n = 0;
    6ed2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6ed4:	5c1a      	ldrb	r2, [r3, r0]
    6ed6:	b10a      	cbz	r2, 6edc <strnlen+0xc>
    6ed8:	4288      	cmp	r0, r1
    6eda:	d100      	bne.n	6ede <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6edc:	4770      	bx	lr
		n++;
    6ede:	3001      	adds	r0, #1
    6ee0:	e7f8      	b.n	6ed4 <strnlen+0x4>

00006ee2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6ee2:	b510      	push	{r4, lr}
    6ee4:	1e43      	subs	r3, r0, #1
    6ee6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6ee8:	4291      	cmp	r1, r2
    6eea:	d100      	bne.n	6eee <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6eec:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6eee:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6ef6:	e7f7      	b.n	6ee8 <memcpy+0x6>

00006ef8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6ef8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6efa:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6efc:	4603      	mov	r3, r0
	while (n > 0) {
    6efe:	4293      	cmp	r3, r2
    6f00:	d100      	bne.n	6f04 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6f02:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6f04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6f08:	e7f9      	b.n	6efe <memset+0x6>

00006f0a <_stdout_hook_default>:
}
    6f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6f0e:	4770      	bx	lr

00006f10 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6f10:	2806      	cmp	r0, #6
    6f12:	d108      	bne.n	6f26 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f18:	2201      	movs	r2, #1
    6f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6f1e:	f3bf 8f4f 	dsb	sy
        __WFE();
    6f22:	bf20      	wfe
    while (true)
    6f24:	e7fd      	b.n	6f22 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6f26:	4770      	bx	lr

00006f28 <pm_state_exit_post_ops>:
    6f28:	2300      	movs	r3, #0
    6f2a:	f383 8811 	msr	BASEPRI, r3
    6f2e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6f32:	4770      	bx	lr

00006f34 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6f34:	6903      	ldr	r3, [r0, #16]
    6f36:	b2c9      	uxtb	r1, r1
    6f38:	220c      	movs	r2, #12
    6f3a:	fb01 3302 	mla	r3, r1, r2, r3
    6f3e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6f40:	f000 0007 	and.w	r0, r0, #7
    6f44:	4770      	bx	lr

00006f46 <set_on_state>:
	__asm__ volatile(
    6f46:	f04f 0320 	mov.w	r3, #32
    6f4a:	f3ef 8211 	mrs	r2, BASEPRI
    6f4e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f52:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6f56:	6803      	ldr	r3, [r0, #0]
    6f58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6f5c:	f043 0302 	orr.w	r3, r3, #2
    6f60:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6f62:	f382 8811 	msr	BASEPRI, r2
    6f66:	f3bf 8f6f 	isb	sy
}
    6f6a:	4770      	bx	lr

00006f6c <stop>:
{
    6f6c:	4603      	mov	r3, r0
    6f6e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6f70:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6f72:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6f74:	f04f 0420 	mov.w	r4, #32
    6f78:	f3ef 8611 	mrs	r6, BASEPRI
    6f7c:	f384 8812 	msr	BASEPRI_MAX, r4
    6f80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6f84:	250c      	movs	r5, #12
    6f86:	fb05 0401 	mla	r4, r5, r1, r0
    6f8a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6f8c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6f90:	d001      	beq.n	6f96 <stop+0x2a>
    6f92:	42a2      	cmp	r2, r4
    6f94:	d111      	bne.n	6fba <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6f96:	fb05 0001 	mla	r0, r5, r1, r0
    6f9a:	2201      	movs	r2, #1
    6f9c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6f9e:	2000      	movs	r0, #0
	__asm__ volatile(
    6fa0:	f386 8811 	msr	BASEPRI, r6
    6fa4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6fa8:	b930      	cbnz	r0, 6fb8 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6faa:	685b      	ldr	r3, [r3, #4]
    6fac:	220c      	movs	r2, #12
    6fae:	fb02 3101 	mla	r1, r2, r1, r3
    6fb2:	684b      	ldr	r3, [r1, #4]
    6fb4:	4798      	blx	r3
	return 0;
    6fb6:	2000      	movs	r0, #0
}
    6fb8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6fbe:	e7ef      	b.n	6fa0 <stop+0x34>

00006fc0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6fc0:	2280      	movs	r2, #128	; 0x80
    6fc2:	f7ff bfd3 	b.w	6f6c <stop>

00006fc6 <async_start>:
{
    6fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6fca:	6904      	ldr	r4, [r0, #16]
{
    6fcc:	4605      	mov	r5, r0
    6fce:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6fd0:	f04f 0020 	mov.w	r0, #32
    6fd4:	f3ef 8c11 	mrs	ip, BASEPRI
    6fd8:	f380 8812 	msr	BASEPRI_MAX, r0
    6fdc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6fe0:	260c      	movs	r6, #12
    6fe2:	fb06 4601 	mla	r6, r6, r1, r4
    6fe6:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6fe8:	f000 0e07 	and.w	lr, r0, #7
    6fec:	f1be 0f01 	cmp.w	lr, #1
    6ff0:	d110      	bne.n	7014 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6ff2:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6ff4:	2600      	movs	r6, #0
	__asm__ volatile(
    6ff6:	f38c 8811 	msr	BASEPRI, ip
    6ffa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6ffe:	b93e      	cbnz	r6, 7010 <async_start+0x4a>
	subdata->cb = cb;
    7000:	200c      	movs	r0, #12
    7002:	4341      	muls	r1, r0
    7004:	440c      	add	r4, r1
	subdata->user_data = user_data;
    7006:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    700a:	686b      	ldr	r3, [r5, #4]
    700c:	585b      	ldr	r3, [r3, r1]
    700e:	4798      	blx	r3
}
    7010:	4630      	mov	r0, r6
    7012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7014:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7018:	4287      	cmp	r7, r0
    701a:	bf14      	ite	ne
    701c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    7020:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7024:	e7e7      	b.n	6ff6 <async_start+0x30>

00007026 <api_start>:
{
    7026:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7028:	2480      	movs	r4, #128	; 0x80
    702a:	9400      	str	r4, [sp, #0]
    702c:	f7ff ffcb 	bl	6fc6 <async_start>
}
    7030:	b002      	add	sp, #8
    7032:	bd10      	pop	{r4, pc}

00007034 <onoff_started_callback>:
	return &data->mgr[type];
    7034:	6900      	ldr	r0, [r0, #16]
{
    7036:	b410      	push	{r4}
	return &data->mgr[type];
    7038:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    703a:	241c      	movs	r4, #28
    703c:	fb03 0004 	mla	r0, r3, r4, r0
    7040:	2100      	movs	r1, #0
}
    7042:	bc10      	pop	{r4}
	notify(mgr, 0);
    7044:	4710      	bx	r2

00007046 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7046:	2000      	movs	r0, #0
    7048:	f000 ba01 	b.w	744e <nrfx_clock_start>

0000704c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    704c:	2000      	movs	r0, #0
    704e:	f000 ba3b 	b.w	74c8 <nrfx_clock_stop>

00007052 <blocking_start_callback>:
{
    7052:	4610      	mov	r0, r2
    7054:	f7fe b9c0 	b.w	53d8 <z_impl_k_sem_give>

00007058 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7058:	6843      	ldr	r3, [r0, #4]
    705a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    705c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7060:	600b      	str	r3, [r1, #0]
}
    7062:	2000      	movs	r0, #0
    7064:	4770      	bx	lr

00007066 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7066:	6843      	ldr	r3, [r0, #4]
    7068:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    706a:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    706e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7072:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    7076:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    707a:	2000      	movs	r0, #0
    707c:	4770      	bx	lr

0000707e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    707e:	6843      	ldr	r3, [r0, #4]
    7080:	685b      	ldr	r3, [r3, #4]
}
    7082:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7084:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7088:	4770      	bx	lr

0000708a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    708a:	6843      	ldr	r3, [r0, #4]
    708c:	685b      	ldr	r3, [r3, #4]
}
    708e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7090:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    7094:	4770      	bx	lr

00007096 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7096:	6843      	ldr	r3, [r0, #4]
    7098:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    709a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    709e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    70a2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    70a4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    70a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    70ac:	2000      	movs	r0, #0
    70ae:	4770      	bx	lr

000070b0 <gpio_nrfx_manage_callback>:
	return port->data;
    70b0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    70b2:	6858      	ldr	r0, [r3, #4]
{
    70b4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    70b6:	b158      	cbz	r0, 70d0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    70b8:	2400      	movs	r4, #0
    70ba:	4281      	cmp	r1, r0
    70bc:	d112      	bne.n	70e4 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    70be:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    70c0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    70c2:	b954      	cbnz	r4, 70da <gpio_nrfx_manage_callback+0x2a>
    70c4:	428d      	cmp	r5, r1
	list->head = node;
    70c6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    70c8:	d100      	bne.n	70cc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    70ca:	6098      	str	r0, [r3, #8]
	parent->next = child;
    70cc:	2000      	movs	r0, #0
    70ce:	6008      	str	r0, [r1, #0]
	if (set) {
    70d0:	b96a      	cbnz	r2, 70ee <gpio_nrfx_manage_callback+0x3e>
	return 0;
    70d2:	2000      	movs	r0, #0
}
    70d4:	bd30      	pop	{r4, r5, pc}
    70d6:	4628      	mov	r0, r5
    70d8:	e7ef      	b.n	70ba <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    70da:	428d      	cmp	r5, r1
	parent->next = child;
    70dc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    70de:	bf08      	it	eq
    70e0:	609c      	streq	r4, [r3, #8]
}
    70e2:	e7f3      	b.n	70cc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    70e4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    70e6:	4604      	mov	r4, r0
    70e8:	2d00      	cmp	r5, #0
    70ea:	d1f4      	bne.n	70d6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    70ec:	b13a      	cbz	r2, 70fe <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    70ee:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    70f0:	685a      	ldr	r2, [r3, #4]
    70f2:	600a      	str	r2, [r1, #0]
	list->head = node;
    70f4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    70f6:	2800      	cmp	r0, #0
    70f8:	d1eb      	bne.n	70d2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    70fa:	6099      	str	r1, [r3, #8]
}
    70fc:	e7ea      	b.n	70d4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    70fe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7102:	e7e7      	b.n	70d4 <gpio_nrfx_manage_callback+0x24>

00007104 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    7104:	6902      	ldr	r2, [r0, #16]
{
    7106:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7108:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    710c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7110:	2000      	movs	r0, #0
    7112:	4770      	bx	lr

00007114 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7114:	6843      	ldr	r3, [r0, #4]
    7116:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7118:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    711c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7120:	4770      	bx	lr

00007122 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7122:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7124:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7126:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7128:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    712c:	b150      	cbz	r0, 7144 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    712e:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7130:	2000      	movs	r0, #0
    7132:	7812      	ldrb	r2, [r2, #0]
    7134:	700a      	strb	r2, [r1, #0]
    7136:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    713a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    713e:	2201      	movs	r2, #1
    7140:	601a      	str	r2, [r3, #0]
	return 0;
    7142:	4770      	bx	lr
		return -1;
    7144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7148:	4770      	bx	lr

0000714a <is_tx_ready.isra.0>:
	return config->uarte_regs;
    714a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    714c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    714e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7152:	b940      	cbnz	r0, 7166 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7154:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7156:	079b      	lsls	r3, r3, #30
    7158:	d406      	bmi.n	7168 <is_tx_ready.isra.0+0x1e>
    715a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    715e:	3800      	subs	r0, #0
    7160:	bf18      	it	ne
    7162:	2001      	movne	r0, #1
    7164:	4770      	bx	lr
    7166:	2001      	movs	r0, #1
}
    7168:	4770      	bx	lr

0000716a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    716a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    716c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    716e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7172:	05c9      	lsls	r1, r1, #23
    7174:	d518      	bpl.n	71a8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7176:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    717a:	b1a9      	cbz	r1, 71a8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    717c:	f04f 0020 	mov.w	r0, #32
    7180:	f3ef 8111 	mrs	r1, BASEPRI
    7184:	f380 8812 	msr	BASEPRI_MAX, r0
    7188:	f3bf 8f6f 	isb	sy
    718c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7190:	b130      	cbz	r0, 71a0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7192:	2000      	movs	r0, #0
    7194:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    7198:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    719c:	2001      	movs	r0, #1
    719e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    71a0:	f381 8811 	msr	BASEPRI, r1
    71a4:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    71a8:	6852      	ldr	r2, [r2, #4]
    71aa:	06d2      	lsls	r2, r2, #27
    71ac:	d515      	bpl.n	71da <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    71ae:	f04f 0120 	mov.w	r1, #32
    71b2:	f3ef 8211 	mrs	r2, BASEPRI
    71b6:	f381 8812 	msr	BASEPRI_MAX, r1
    71ba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71be:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    71c2:	b111      	cbz	r1, 71ca <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    71c4:	2100      	movs	r1, #0
    71c6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    71ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    71ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    71d2:	f382 8811 	msr	BASEPRI, r2
    71d6:	f3bf 8f6f 	isb	sy
}
    71da:	4770      	bx	lr

000071dc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    71dc:	b510      	push	{r4, lr}
    71de:	2200      	movs	r2, #0
    71e0:	4604      	mov	r4, r0
    71e2:	2101      	movs	r1, #1
    71e4:	2028      	movs	r0, #40	; 0x28
    71e6:	f7fb f80d 	bl	2204 <z_arm_irq_priority_set>
    71ea:	2028      	movs	r0, #40	; 0x28
    71ec:	f7fa ffec 	bl	21c8 <arch_irq_enable>
    71f0:	4620      	mov	r0, r4
    71f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    71f6:	f7fc b959 	b.w	34ac <uarte_instance_init.constprop.0>

000071fa <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    71fa:	b510      	push	{r4, lr}
    71fc:	2200      	movs	r2, #0
    71fe:	4604      	mov	r4, r0
    7200:	2101      	movs	r1, #1
    7202:	2002      	movs	r0, #2
    7204:	f7fa fffe 	bl	2204 <z_arm_irq_priority_set>
    7208:	2002      	movs	r0, #2
    720a:	f7fa ffdd 	bl	21c8 <arch_irq_enable>
    720e:	4620      	mov	r0, r4
    7210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7214:	f7fc b94a 	b.w	34ac <uarte_instance_init.constprop.0>

00007218 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7218:	4770      	bx	lr

0000721a <sys_clock_cycle_get_32>:
{
    721a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    721c:	f7fc fac0 	bl	37a0 <z_nrf_rtc_timer_read>
}
    7220:	bd08      	pop	{r3, pc}

00007222 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7222:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7224:	6843      	ldr	r3, [r0, #4]
    7226:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7228:	7a03      	ldrb	r3, [r0, #8]
    722a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    722e:	3b01      	subs	r3, #1
    7230:	00db      	lsls	r3, r3, #3
    7232:	6845      	ldr	r5, [r0, #4]
    7234:	6814      	ldr	r4, [r2, #0]
    7236:	441d      	add	r5, r3
    7238:	42ac      	cmp	r4, r5
    723a:	d902      	bls.n	7242 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    723c:	f06f 0001 	mvn.w	r0, #1
}
    7240:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7242:	7965      	ldrb	r5, [r4, #5]
    7244:	428d      	cmp	r5, r1
    7246:	d002      	beq.n	724e <pinctrl_lookup_state+0x2c>
		(*state)++;
    7248:	3408      	adds	r4, #8
    724a:	6014      	str	r4, [r2, #0]
    724c:	e7f1      	b.n	7232 <pinctrl_lookup_state+0x10>
			return 0;
    724e:	2000      	movs	r0, #0
    7250:	e7f6      	b.n	7240 <pinctrl_lookup_state+0x1e>

00007252 <nrf_gpio_pin_write>:
    if (value == 0)
    7252:	b909      	cbnz	r1, 7258 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    7254:	f7fc bc5c 	b.w	3b10 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7258:	f7fc bc8c 	b.w	3b74 <nrf_gpio_pin_set>

0000725c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7260:	4616      	mov	r6, r2
    7262:	4605      	mov	r5, r0
    7264:	eb00 0781 	add.w	r7, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7268:	42af      	cmp	r7, r5
    726a:	d102      	bne.n	7272 <pinctrl_configure_pins+0x16>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    726c:	2000      	movs	r0, #0
}
    726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7272:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    7274:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7276:	f3c4 2803 	ubfx	r8, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    727a:	2b22      	cmp	r3, #34	; 0x22
    727c:	f200 8097 	bhi.w	73ae <pinctrl_configure_pins+0x152>
    7280:	e8df f003 	tbb	[pc, r3]
    7284:	2b261e12 	.word	0x2b261e12
    7288:	952b4130 	.word	0x952b4130
    728c:	4b959595 	.word	0x4b959595
    7290:	95959555 	.word	0x95959555
    7294:	95959595 	.word	0x95959595
    7298:	665a9595 	.word	0x665a9595
    729c:	9595706b 	.word	0x9595706b
    72a0:	817c7595 	.word	0x817c7595
    72a4:	8b86      	.short	0x8b86
    72a6:	90          	.byte	0x90
    72a7:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    72a8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    72ac:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    72b0:	6828      	ldr	r0, [r5, #0]
    72b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    72b6:	f7fc fc5d 	bl	3b74 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    72ba:	4643      	mov	r3, r8
    72bc:	2201      	movs	r2, #1
    72be:	e01c      	b.n	72fa <pinctrl_configure_pins+0x9e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    72c0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    72c4:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72c8:	4643      	mov	r3, r8
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72ca:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72cc:	2100      	movs	r1, #0
    72ce:	e015      	b.n	72fc <pinctrl_configure_pins+0xa0>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    72d0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    72d4:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    72d8:	e7ea      	b.n	72b0 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    72da:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    72de:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
    72e2:	e7f1      	b.n	72c8 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    72e4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    72e8:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    72ec:	6828      	ldr	r0, [r5, #0]
        nrf_gpio_pin_clear(pin_number);
    72ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    72f2:	f7fc fc0d 	bl	3b10 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    72f6:	4643      	mov	r3, r8
    72f8:	2200      	movs	r2, #0
    72fa:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    72fc:	6828      	ldr	r0, [r5, #0]
    72fe:	f7fc fc17 	bl	3b30 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7302:	3504      	adds	r5, #4
    7304:	e7b0      	b.n	7268 <pinctrl_configure_pins+0xc>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7306:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    730a:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    730e:	6828      	ldr	r0, [r5, #0]
    7310:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7314:	f7fc fbfc 	bl	3b10 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7318:	e7cf      	b.n	72ba <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    731a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    731e:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    7322:	f1b8 0f00 	cmp.w	r8, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7326:	bf14      	ite	ne
    7328:	4643      	movne	r3, r8
    732a:	2306      	moveq	r3, #6
    732c:	e7cd      	b.n	72ca <pinctrl_configure_pins+0x6e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    732e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7332:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    7336:	e7f4      	b.n	7322 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7338:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    733c:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7340:	6828      	ldr	r0, [r5, #0]
    7342:	f3c0 3140 	ubfx	r1, r0, #13, #1
    7346:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    734a:	f7ff ff82 	bl	7252 <nrf_gpio_pin_write>
    734e:	e7b4      	b.n	72ba <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7350:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7354:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7358:	e7f2      	b.n	7340 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    735a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    735e:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7362:	e7ed      	b.n	7340 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7364:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7368:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    736c:	e7e8      	b.n	7340 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    736e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7372:	f8c6 4524 	str.w	r4, [r6, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7376:	4643      	mov	r3, r8
    7378:	2201      	movs	r2, #1
    737a:	e7a7      	b.n	72cc <pinctrl_configure_pins+0x70>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    737c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7380:	f8c6 4528 	str.w	r4, [r6, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7384:	e7f7      	b.n	7376 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7386:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    738a:	f8c6 4530 	str.w	r4, [r6, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    738e:	e7f2      	b.n	7376 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    7390:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    7394:	f8c6 4534 	str.w	r4, [r6, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7398:	e7ed      	b.n	7376 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    739a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    739e:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    73a2:	e7e8      	b.n	7376 <pinctrl_configure_pins+0x11a>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    73a4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    73a8:	f8c6 453c 	str.w	r4, [r6, #1340]	; 0x53c
    73ac:	e7e3      	b.n	7376 <pinctrl_configure_pins+0x11a>
		switch (NRF_GET_FUN(pins[i])) {
    73ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
    73b2:	e75c      	b.n	726e <pinctrl_configure_pins+0x12>

000073b4 <gpio_pin_configure_dt>:
{
    73b4:	b470      	push	{r4, r5, r6}
    73b6:	4603      	mov	r3, r0
	return gpio_pin_configure(spec->port,
    73b8:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
    73ba:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    73bc:	791d      	ldrb	r5, [r3, #4]
    73be:	430a      	orrs	r2, r1
	struct gpio_driver_data *data =
    73c0:	6901      	ldr	r1, [r0, #16]
	const struct gpio_driver_api *api =
    73c2:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73c4:	2301      	movs	r3, #1
    73c6:	fa03 f405 	lsl.w	r4, r3, r5
    73ca:	680b      	ldr	r3, [r1, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    73cc:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    73d0:	bf14      	ite	ne
    73d2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    73d4:	43a3      	biceq	r3, r4
    73d6:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
    73d8:	6833      	ldr	r3, [r6, #0]
    73da:	4629      	mov	r1, r5
}
    73dc:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    73de:	4718      	bx	r3

000073e0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    73e0:	2301      	movs	r3, #1
    73e2:	fa03 f101 	lsl.w	r1, r3, r1
    73e6:	6903      	ldr	r3, [r0, #16]
    73e8:	681b      	ldr	r3, [r3, #0]
    73ea:	4219      	tst	r1, r3
    73ec:	d003      	beq.n	73f6 <gpio_pin_set+0x16>
	if (value != 0)	{
    73ee:	b122      	cbz	r2, 73fa <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
    73f0:	6883      	ldr	r3, [r0, #8]
    73f2:	691b      	ldr	r3, [r3, #16]
    73f4:	e003      	b.n	73fe <gpio_pin_set+0x1e>
	if (value != 0)	{
    73f6:	2a00      	cmp	r2, #0
    73f8:	d0fa      	beq.n	73f0 <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
    73fa:	6883      	ldr	r3, [r0, #8]
    73fc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    73fe:	4718      	bx	r3

00007400 <z_log_msg_static_create.constprop.0>:
    7400:	2300      	movs	r3, #0
    7402:	f7fa b9df 	b.w	17c4 <z_impl_z_log_msg_static_create>

00007406 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7406:	f7fe bf51 	b.w	62ac <nrf_cc3xx_platform_init_no_rng>

0000740a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    740a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    740c:	f7fa fd8e 	bl	1f2c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7410:	f7fa fe40 	bl	2094 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7418:	f7fe bf48 	b.w	62ac <nrf_cc3xx_platform_init_no_rng>

0000741c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    741c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    7420:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    7424:	f1a0 0308 	sub.w	r3, r0, #8
    7428:	4258      	negs	r0, r3
    742a:	4158      	adcs	r0, r3
    742c:	4770      	bx	lr

0000742e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    742e:	4700      	bx	r0

00007430 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7430:	f000 bac9 	b.w	79c6 <z_impl_k_busy_wait>

00007434 <nrfx_clock_enable>:
{
    7434:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7436:	2000      	movs	r0, #0
    7438:	f7fa fed6 	bl	21e8 <arch_irq_is_enabled>
    743c:	b908      	cbnz	r0, 7442 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    743e:	f7fa fec3 	bl	21c8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7446:	2200      	movs	r2, #0
    7448:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    744c:	bd08      	pop	{r3, pc}

0000744e <nrfx_clock_start>:
{
    744e:	b508      	push	{r3, lr}
    switch (domain)
    7450:	b110      	cbz	r0, 7458 <nrfx_clock_start+0xa>
    7452:	2801      	cmp	r0, #1
    7454:	d02d      	beq.n	74b2 <nrfx_clock_start+0x64>
}
    7456:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7458:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    745c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7460:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7464:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    7468:	d10b      	bne.n	7482 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    746a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    746e:	07c9      	lsls	r1, r1, #31
    7470:	d510      	bpl.n	7494 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7472:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    7476:	079b      	lsls	r3, r3, #30
    7478:	d408      	bmi.n	748c <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    747a:	2302      	movs	r3, #2
    747c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    7480:	e7e9      	b.n	7456 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7482:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    7486:	2b01      	cmp	r3, #1
    7488:	d004      	beq.n	7494 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    748a:	b11b      	cbz	r3, 7494 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    748c:	2000      	movs	r0, #0
    748e:	f7fc ff31 	bl	42f4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    7492:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    7494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7498:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    749c:	2300      	movs	r3, #0
    749e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    74a2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    74a6:	2302      	movs	r3, #2
    74a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74ac:	2301      	movs	r3, #1
    74ae:	6093      	str	r3, [r2, #8]
}
    74b0:	e7d1      	b.n	7456 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74b6:	2200      	movs	r2, #0
    74b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    74bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    74c0:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74c4:	6018      	str	r0, [r3, #0]
}
    74c6:	e7c6      	b.n	7456 <nrfx_clock_start+0x8>

000074c8 <nrfx_clock_stop>:
    clock_stop(domain);
    74c8:	f7fc bf14 	b.w	42f4 <clock_stop>

000074cc <nrf_gpio_reconfigure>:
{
    74cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    74ce:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    74d0:	a801      	add	r0, sp, #4
{
    74d2:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    74d6:	4617      	mov	r7, r2
    74d8:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    74da:	f7fc ffa3 	bl	4424 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    74de:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    74e0:	2f00      	cmp	r7, #0
    74e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    74e6:	bf14      	ite	ne
    74e8:	2302      	movne	r3, #2
    74ea:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    74ec:	2900      	cmp	r1, #0
    74ee:	bf18      	it	ne
    74f0:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    74f4:	2d00      	cmp	r5, #0
    74f6:	bf14      	ite	ne
    74f8:	f04f 0c0c 	movne.w	ip, #12
    74fc:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7500:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7502:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7506:	bf14      	ite	ne
    7508:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    750c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7510:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7512:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7516:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    751a:	bf14      	ite	ne
    751c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    7520:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7524:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7528:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    752c:	b101      	cbz	r1, 7530 <nrf_gpio_reconfigure+0x64>
    752e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7530:	b10f      	cbz	r7, 7536 <nrf_gpio_reconfigure+0x6a>
    7532:	783f      	ldrb	r7, [r7, #0]
    7534:	007f      	lsls	r7, r7, #1
    7536:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7538:	b10d      	cbz	r5, 753e <nrf_gpio_reconfigure+0x72>
    753a:	782d      	ldrb	r5, [r5, #0]
    753c:	00ad      	lsls	r5, r5, #2
    753e:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7540:	b10c      	cbz	r4, 7546 <nrf_gpio_reconfigure+0x7a>
    7542:	7822      	ldrb	r2, [r4, #0]
    7544:	0214      	lsls	r4, r2, #8
    7546:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7548:	b10e      	cbz	r6, 754e <nrf_gpio_reconfigure+0x82>
    754a:	7836      	ldrb	r6, [r6, #0]
    754c:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    754e:	432c      	orrs	r4, r5
    7550:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    7552:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7556:	b003      	add	sp, #12
    7558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000755a <nrf_gpio_cfg_sense_set>:
{
    755a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    755c:	f10d 030f 	add.w	r3, sp, #15
    7560:	9301      	str	r3, [sp, #4]
    7562:	2300      	movs	r3, #0
{
    7564:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7568:	9300      	str	r3, [sp, #0]
    756a:	461a      	mov	r2, r3
    756c:	4619      	mov	r1, r3
    756e:	f7ff ffad 	bl	74cc <nrf_gpio_reconfigure>
}
    7572:	b005      	add	sp, #20
    7574:	f85d fb04 	ldr.w	pc, [sp], #4

00007578 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
    7578:	7b0a      	ldrb	r2, [r1, #12]
{
    757a:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
    757c:	2a03      	cmp	r2, #3
    757e:	d829      	bhi.n	75d4 <xfer_completeness_check+0x5c>
    7580:	e8df f002 	tbb	[pc, r2]
    7584:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7588:	688a      	ldr	r2, [r1, #8]
    758a:	0350      	lsls	r0, r2, #13
    758c:	d504      	bpl.n	7598 <xfer_completeness_check+0x20>
}

NRF_STATIC_INLINE size_t nrf_twim_txd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    758e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
    7592:	6908      	ldr	r0, [r1, #16]
    7594:	4290      	cmp	r0, r2
    7596:	d107      	bne.n	75a8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
    7598:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
    759a:	0352      	lsls	r2, r2, #13
    759c:	d41a      	bmi.n	75d4 <xfer_completeness_check+0x5c>
    759e:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    75a2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    75a4:	4291      	cmp	r1, r2
    75a6:	d015      	beq.n	75d4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    75a8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    75aa:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    75ac:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    75b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    75b4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
    75b6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
    75ba:	6908      	ldr	r0, [r1, #16]
    75bc:	4290      	cmp	r0, r2
    75be:	d1f3      	bne.n	75a8 <xfer_completeness_check+0x30>
}

NRF_STATIC_INLINE size_t nrf_twim_rxd_amount_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    75c0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    75c4:	e7ed      	b.n	75a2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
    75c6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
    75ca:	6909      	ldr	r1, [r1, #16]
    75cc:	e7ea      	b.n	75a4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
    75ce:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
    75d2:	e7fa      	b.n	75ca <xfer_completeness_check+0x52>
    bool transfer_complete = true;
    75d4:	2001      	movs	r0, #1
}
    75d6:	4770      	bx	lr

000075d8 <z_device_state_init>:
}
    75d8:	4770      	bx	lr

000075da <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    75da:	b138      	cbz	r0, 75ec <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    75dc:	68c3      	ldr	r3, [r0, #12]
    75de:	8818      	ldrh	r0, [r3, #0]
    75e0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    75e4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    75e8:	4258      	negs	r0, r3
    75ea:	4158      	adcs	r0, r3
}
    75ec:	4770      	bx	lr

000075ee <z_early_memset>:
	(void) memset(dst, c, n);
    75ee:	f7ff bc83 	b.w	6ef8 <memset>

000075f2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    75f2:	f7ff bc76 	b.w	6ee2 <memcpy>

000075f6 <k_mem_slab_init>:
{
    75f6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    75f8:	2400      	movs	r4, #0
    75fa:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    75fc:	ea41 0402 	orr.w	r4, r1, r2
    7600:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7604:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    7608:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    760a:	d10c      	bne.n	7626 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    760c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    760e:	42a3      	cmp	r3, r4
    7610:	d103      	bne.n	761a <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    7612:	e9c0 0000 	strd	r0, r0, [r0]
}
    7616:	2000      	movs	r0, #0
}
    7618:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    761a:	6945      	ldr	r5, [r0, #20]
    761c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    761e:	3401      	adds	r4, #1
		slab->free_list = p;
    7620:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    7622:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7624:	e7f3      	b.n	760e <k_mem_slab_init+0x18>
		return -EINVAL;
    7626:	f06f 0015 	mvn.w	r0, #21
	return rc;
    762a:	e7f5      	b.n	7618 <k_mem_slab_init+0x22>

0000762c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    762e:	4604      	mov	r4, r0
    7630:	460d      	mov	r5, r1
	__asm__ volatile(
    7632:	f04f 0320 	mov.w	r3, #32
    7636:	f3ef 8611 	mrs	r6, BASEPRI
    763a:	f383 8812 	msr	BASEPRI_MAX, r3
    763e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7642:	6947      	ldr	r7, [r0, #20]
    7644:	b977      	cbnz	r7, 7664 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7646:	f000 f943 	bl	78d0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    764a:	b158      	cbz	r0, 7664 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    764c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    764e:	6142      	str	r2, [r0, #20]
    7650:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7652:	f000 f8cc 	bl	77ee <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7656:	4631      	mov	r1, r6
    7658:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    765c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    7660:	f7fe b8ca 	b.w	57f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7664:	682b      	ldr	r3, [r5, #0]
    7666:	6962      	ldr	r2, [r4, #20]
    7668:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    766a:	682b      	ldr	r3, [r5, #0]
    766c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    766e:	69a3      	ldr	r3, [r4, #24]
    7670:	3b01      	subs	r3, #1
    7672:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7674:	f386 8811 	msr	BASEPRI, r6
    7678:	f3bf 8f6f 	isb	sy
}
    767c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000767e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    767e:	f3ef 8005 	mrs	r0, IPSR
}
    7682:	3800      	subs	r0, #0
    7684:	bf18      	it	ne
    7686:	2001      	movne	r0, #1
    7688:	4770      	bx	lr

0000768a <z_impl_k_thread_name_set>:
}
    768a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    768e:	4770      	bx	lr

00007690 <k_thread_name_get>:
}
    7690:	2000      	movs	r0, #0
    7692:	4770      	bx	lr

00007694 <z_impl_k_thread_start>:
	z_sched_start(thread);
    7694:	f7fe b9a8 	b.w	59e8 <z_sched_start>

00007698 <z_pm_save_idle_exit>:
{
    7698:	b508      	push	{r3, lr}
	pm_system_resume();
    769a:	f7fa fb41 	bl	1d20 <pm_system_resume>
}
    769e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    76a2:	f7ff bdb9 	b.w	7218 <sys_clock_idle_exit>

000076a6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    76a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    76aa:	428b      	cmp	r3, r1
    76ac:	d001      	beq.n	76b2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    76ae:	f7fe ba0b 	b.w	5ac8 <z_set_prio>
}
    76b2:	2000      	movs	r0, #0
    76b4:	4770      	bx	lr

000076b6 <z_impl_k_mutex_init>:
{
    76b6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    76b8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    76ba:	e9c3 0002 	strd	r0, r0, [r3, #8]
    76be:	e9c3 3300 	strd	r3, r3, [r3]
}
    76c2:	4770      	bx	lr

000076c4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    76c4:	b13a      	cbz	r2, 76d6 <z_impl_k_sem_init+0x12>
    76c6:	428a      	cmp	r2, r1
    76c8:	d305      	bcc.n	76d6 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    76ca:	e9c0 1202 	strd	r1, r2, [r0, #8]
    76ce:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    76d2:	2000      	movs	r0, #0
    76d4:	4770      	bx	lr
		return -EINVAL;
    76d6:	f06f 0015 	mvn.w	r0, #21
}
    76da:	4770      	bx	lr

000076dc <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    76dc:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    76de:	2301      	movs	r3, #1
    76e0:	408b      	lsls	r3, r1
    76e2:	ea22 0303 	bic.w	r3, r2, r3
    76e6:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    76e8:	fa22 f001 	lsr.w	r0, r2, r1
}
    76ec:	f000 0001 	and.w	r0, r0, #1
    76f0:	4770      	bx	lr

000076f2 <unschedule_locked>:
{
    76f2:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    76f4:	2103      	movs	r1, #3
{
    76f6:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
    76f8:	300c      	adds	r0, #12
    76fa:	f7ff ffef 	bl	76dc <flag_test_and_clear>
    76fe:	4604      	mov	r4, r0
    7700:	b118      	cbz	r0, 770a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
    7702:	f105 0010 	add.w	r0, r5, #16
    7706:	f000 f918 	bl	793a <z_abort_timeout>
}
    770a:	4620      	mov	r0, r4
    770c:	bd38      	pop	{r3, r4, r5, pc}

0000770e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    770e:	b120      	cbz	r0, 771a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    7710:	2200      	movs	r2, #0
    7712:	4611      	mov	r1, r2
    7714:	3088      	adds	r0, #136	; 0x88
    7716:	f000 b8f3 	b.w	7900 <z_sched_wake>
}
    771a:	4770      	bx	lr

0000771c <work_timeout>:
{
    771c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    771e:	4604      	mov	r4, r0
	__asm__ volatile(
    7720:	f04f 0320 	mov.w	r3, #32
    7724:	f3ef 8511 	mrs	r5, BASEPRI
    7728:	f383 8812 	msr	BASEPRI_MAX, r3
    772c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    7730:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    7732:	f1a0 0610 	sub.w	r6, r0, #16
    7736:	2103      	movs	r1, #3
    7738:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    773a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    773c:	f7ff ffce 	bl	76dc <flag_test_and_clear>
    7740:	b128      	cbz	r0, 774e <work_timeout+0x32>
		queue = dw->queue;
    7742:	69a3      	ldr	r3, [r4, #24]
    7744:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    7746:	a901      	add	r1, sp, #4
    7748:	4630      	mov	r0, r6
    774a:	f7fd ff23 	bl	5594 <submit_to_queue_locked>
	__asm__ volatile(
    774e:	f385 8811 	msr	BASEPRI, r5
    7752:	f3bf 8f6f 	isb	sy
}
    7756:	b002      	add	sp, #8
    7758:	bd70      	pop	{r4, r5, r6, pc}

0000775a <k_work_init_delayable>:
{
    775a:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    775c:	2230      	movs	r2, #48	; 0x30
{
    775e:	4604      	mov	r4, r0
    7760:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    7762:	2100      	movs	r1, #0
    7764:	f7ff fbc8 	bl	6ef8 <memset>
    7768:	f44f 7380 	mov.w	r3, #256	; 0x100
    776c:	6065      	str	r5, [r4, #4]
    776e:	60e3      	str	r3, [r4, #12]
}
    7770:	bd38      	pop	{r3, r4, r5, pc}

00007772 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7772:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7776:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7778:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    777a:	2300      	movs	r3, #0
	node->prev = NULL;
    777c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    7780:	4770      	bx	lr

00007782 <unpend_thread_no_timeout>:
{
    7782:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7784:	f7ff fff5 	bl	7772 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7788:	7b43      	ldrb	r3, [r0, #13]
    778a:	f023 0302 	bic.w	r3, r3, #2
    778e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7790:	2300      	movs	r3, #0
    7792:	6083      	str	r3, [r0, #8]
}
    7794:	bd08      	pop	{r3, pc}

00007796 <z_unpend_thread_no_timeout>:
{
    7796:	b508      	push	{r3, lr}
	__asm__ volatile(
    7798:	f04f 0320 	mov.w	r3, #32
    779c:	f3ef 8111 	mrs	r1, BASEPRI
    77a0:	f383 8812 	msr	BASEPRI_MAX, r3
    77a4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    77a8:	f7ff ffeb 	bl	7782 <unpend_thread_no_timeout>
	__asm__ volatile(
    77ac:	f381 8811 	msr	BASEPRI, r1
    77b0:	f3bf 8f6f 	isb	sy
}
    77b4:	bd08      	pop	{r3, pc}

000077b6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    77b6:	4603      	mov	r3, r0
    77b8:	b920      	cbnz	r0, 77c4 <z_reschedule_irqlock+0xe>
    77ba:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    77be:	b90a      	cbnz	r2, 77c4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    77c0:	f7fa bd58 	b.w	2274 <arch_swap>
    77c4:	f383 8811 	msr	BASEPRI, r3
    77c8:	f3bf 8f6f 	isb	sy
}
    77cc:	4770      	bx	lr

000077ce <z_reschedule_unlocked>:
	__asm__ volatile(
    77ce:	f04f 0320 	mov.w	r3, #32
    77d2:	f3ef 8011 	mrs	r0, BASEPRI
    77d6:	f383 8812 	msr	BASEPRI_MAX, r3
    77da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    77de:	f7ff bfea 	b.w	77b6 <z_reschedule_irqlock>

000077e2 <z_priq_dumb_best>:
{
    77e2:	4603      	mov	r3, r0
	return list->head == list;
    77e4:	6800      	ldr	r0, [r0, #0]
}
    77e6:	4283      	cmp	r3, r0
    77e8:	bf08      	it	eq
    77ea:	2000      	moveq	r0, #0
    77ec:	4770      	bx	lr

000077ee <z_ready_thread>:
{
    77ee:	b510      	push	{r4, lr}
    77f0:	f04f 0320 	mov.w	r3, #32
    77f4:	f3ef 8411 	mrs	r4, BASEPRI
    77f8:	f383 8812 	msr	BASEPRI_MAX, r3
    77fc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7800:	f7fe f8bc 	bl	597c <ready_thread>
	__asm__ volatile(
    7804:	f384 8811 	msr	BASEPRI, r4
    7808:	f3bf 8f6f 	isb	sy
}
    780c:	bd10      	pop	{r4, pc}

0000780e <z_thread_timeout>:
{
    780e:	b510      	push	{r4, lr}
    7810:	4601      	mov	r1, r0
	__asm__ volatile(
    7812:	f04f 0320 	mov.w	r3, #32
    7816:	f3ef 8411 	mrs	r4, BASEPRI
    781a:	f383 8812 	msr	BASEPRI_MAX, r3
    781e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7822:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7826:	f013 0f28 	tst.w	r3, #40	; 0x28
    782a:	d10d      	bne.n	7848 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    782c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7830:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7832:	b10b      	cbz	r3, 7838 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7834:	f7ff ffa5 	bl	7782 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7838:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    783c:	f023 0314 	bic.w	r3, r3, #20
    7840:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7844:	f7fe f89a 	bl	597c <ready_thread>
	__asm__ volatile(
    7848:	f384 8811 	msr	BASEPRI, r4
    784c:	f3bf 8f6f 	isb	sy
}
    7850:	bd10      	pop	{r4, pc}

00007852 <add_to_waitq_locked>:
{
    7852:	b538      	push	{r3, r4, r5, lr}
    7854:	4604      	mov	r4, r0
    7856:	460d      	mov	r5, r1
	unready_thread(thread);
    7858:	f7fe f8e4 	bl	5a24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    785c:	7b63      	ldrb	r3, [r4, #13]
    785e:	f043 0302 	orr.w	r3, r3, #2
    7862:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7864:	b195      	cbz	r5, 788c <add_to_waitq_locked+0x3a>
    7866:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    7868:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    786a:	429d      	cmp	r5, r3
    786c:	d015      	beq.n	789a <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    786e:	b1a3      	cbz	r3, 789a <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    7870:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7874:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7878:	4291      	cmp	r1, r2
    787a:	d008      	beq.n	788e <add_to_waitq_locked+0x3c>
		return b2 - b1;
    787c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    787e:	2a00      	cmp	r2, #0
    7880:	dd05      	ble.n	788e <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    7882:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7884:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7888:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    788a:	605c      	str	r4, [r3, #4]
}
    788c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    788e:	686a      	ldr	r2, [r5, #4]
    7890:	4293      	cmp	r3, r2
    7892:	d002      	beq.n	789a <add_to_waitq_locked+0x48>
    7894:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7896:	2b00      	cmp	r3, #0
    7898:	d1ec      	bne.n	7874 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    789a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    789c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    78a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    78a2:	606c      	str	r4, [r5, #4]
}
    78a4:	e7f2      	b.n	788c <add_to_waitq_locked+0x3a>

000078a6 <z_unpend1_no_timeout>:
{
    78a6:	b510      	push	{r4, lr}
	__asm__ volatile(
    78a8:	f04f 0320 	mov.w	r3, #32
    78ac:	f3ef 8411 	mrs	r4, BASEPRI
    78b0:	f383 8812 	msr	BASEPRI_MAX, r3
    78b4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    78b8:	f7ff ff93 	bl	77e2 <z_priq_dumb_best>
		if (thread != NULL) {
    78bc:	4601      	mov	r1, r0
    78be:	b108      	cbz	r0, 78c4 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    78c0:	f7ff ff5f 	bl	7782 <unpend_thread_no_timeout>
	__asm__ volatile(
    78c4:	f384 8811 	msr	BASEPRI, r4
    78c8:	f3bf 8f6f 	isb	sy
}
    78cc:	4608      	mov	r0, r1
    78ce:	bd10      	pop	{r4, pc}

000078d0 <z_unpend_first_thread>:
{
    78d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    78d2:	f04f 0320 	mov.w	r3, #32
    78d6:	f3ef 8511 	mrs	r5, BASEPRI
    78da:	f383 8812 	msr	BASEPRI_MAX, r3
    78de:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    78e2:	f7ff ff7e 	bl	77e2 <z_priq_dumb_best>
		if (thread != NULL) {
    78e6:	4604      	mov	r4, r0
    78e8:	b120      	cbz	r0, 78f4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    78ea:	f7ff ff4a 	bl	7782 <unpend_thread_no_timeout>
    78ee:	3018      	adds	r0, #24
    78f0:	f000 f823 	bl	793a <z_abort_timeout>
	__asm__ volatile(
    78f4:	f385 8811 	msr	BASEPRI, r5
    78f8:	f3bf 8f6f 	isb	sy
}
    78fc:	4620      	mov	r0, r4
    78fe:	bd38      	pop	{r3, r4, r5, pc}

00007900 <z_sched_wake>:
{
    7900:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7902:	f04f 0320 	mov.w	r3, #32
    7906:	f3ef 8511 	mrs	r5, BASEPRI
    790a:	f383 8812 	msr	BASEPRI_MAX, r3
    790e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7912:	f7ff ff66 	bl	77e2 <z_priq_dumb_best>
		if (thread != NULL) {
    7916:	4604      	mov	r4, r0
    7918:	b150      	cbz	r0, 7930 <z_sched_wake+0x30>
    791a:	6781      	str	r1, [r0, #120]	; 0x78
    791c:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    791e:	f7ff ff30 	bl	7782 <unpend_thread_no_timeout>
    7922:	3018      	adds	r0, #24
    7924:	f000 f809 	bl	793a <z_abort_timeout>
			ready_thread(thread);
    7928:	4620      	mov	r0, r4
    792a:	f7fe f827 	bl	597c <ready_thread>
			ret = true;
    792e:	2001      	movs	r0, #1
	__asm__ volatile(
    7930:	f385 8811 	msr	BASEPRI, r5
    7934:	f3bf 8f6f 	isb	sy
}
    7938:	bd38      	pop	{r3, r4, r5, pc}

0000793a <z_abort_timeout>:
{
    793a:	b510      	push	{r4, lr}
	__asm__ volatile(
    793c:	f04f 0220 	mov.w	r2, #32
    7940:	f3ef 8411 	mrs	r4, BASEPRI
    7944:	f382 8812 	msr	BASEPRI_MAX, r2
    7948:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    794c:	6803      	ldr	r3, [r0, #0]
    794e:	b13b      	cbz	r3, 7960 <z_abort_timeout+0x26>
			remove_timeout(to);
    7950:	f7fe fac0 	bl	5ed4 <remove_timeout>
			ret = 0;
    7954:	2000      	movs	r0, #0
	__asm__ volatile(
    7956:	f384 8811 	msr	BASEPRI, r4
    795a:	f3bf 8f6f 	isb	sy
}
    795e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7960:	f06f 0015 	mvn.w	r0, #21
    7964:	e7f7      	b.n	7956 <z_abort_timeout+0x1c>

00007966 <z_get_next_timeout_expiry>:
{
    7966:	b510      	push	{r4, lr}
	__asm__ volatile(
    7968:	f04f 0320 	mov.w	r3, #32
    796c:	f3ef 8411 	mrs	r4, BASEPRI
    7970:	f383 8812 	msr	BASEPRI_MAX, r3
    7974:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7978:	f7fe fa86 	bl	5e88 <next_timeout>
	__asm__ volatile(
    797c:	f384 8811 	msr	BASEPRI, r4
    7980:	f3bf 8f6f 	isb	sy
}
    7984:	bd10      	pop	{r4, pc}

00007986 <z_set_timeout_expiry>:
{
    7986:	b570      	push	{r4, r5, r6, lr}
    7988:	4604      	mov	r4, r0
    798a:	460d      	mov	r5, r1
	__asm__ volatile(
    798c:	f04f 0320 	mov.w	r3, #32
    7990:	f3ef 8611 	mrs	r6, BASEPRI
    7994:	f383 8812 	msr	BASEPRI_MAX, r3
    7998:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    799c:	f7fe fa74 	bl	5e88 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    79a0:	2801      	cmp	r0, #1
    79a2:	dd05      	ble.n	79b0 <z_set_timeout_expiry+0x2a>
    79a4:	42a0      	cmp	r0, r4
    79a6:	db03      	blt.n	79b0 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    79a8:	4629      	mov	r1, r5
    79aa:	4620      	mov	r0, r4
    79ac:	f7fc f874 	bl	3a98 <sys_clock_set_timeout>
	__asm__ volatile(
    79b0:	f386 8811 	msr	BASEPRI, r6
    79b4:	f3bf 8f6f 	isb	sy
}
    79b8:	bd70      	pop	{r4, r5, r6, pc}

000079ba <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    79ba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    79bc:	f7fe fb7a 	bl	60b4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    79c0:	bd08      	pop	{r3, pc}

000079c2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    79c2:	f7fe bb77 	b.w	60b4 <sys_clock_tick_get>

000079c6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    79c6:	b108      	cbz	r0, 79cc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    79c8:	f7fb b9ce 	b.w	2d68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    79cc:	4770      	bx	lr

000079ce <k_timer_init>:
	timer->status = 0U;
    79ce:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    79d0:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    79d4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    79d8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    79dc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    79e0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    79e2:	6343      	str	r3, [r0, #52]	; 0x34
}
    79e4:	4770      	bx	lr

000079e6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    79e6:	b510      	push	{r4, lr}
    79e8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    79ea:	f7ff ffa6 	bl	793a <z_abort_timeout>

	if (inactive) {
    79ee:	b9b0      	cbnz	r0, 7a1e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    79f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    79f2:	b10b      	cbz	r3, 79f8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    79f4:	4620      	mov	r0, r4
    79f6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    79f8:	f104 0018 	add.w	r0, r4, #24
    79fc:	f7ff ff53 	bl	78a6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7a00:	b168      	cbz	r0, 7a1e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7a02:	f7ff fef4 	bl	77ee <z_ready_thread>
	__asm__ volatile(
    7a06:	f04f 0320 	mov.w	r3, #32
    7a0a:	f3ef 8011 	mrs	r0, BASEPRI
    7a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7a12:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    7a1a:	f7ff becc 	b.w	77b6 <z_reschedule_irqlock>
    7a1e:	bd10      	pop	{r4, pc}

00007a20 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7a20:	4770      	bx	lr
